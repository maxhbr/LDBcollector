{"export_restricted":0,"license":"Sun JDL DLJ","packname":"java-1_6_0-sun","patent":0,"pattern":"FAQ for the Operating System Distributor License for Java (DLJ)\n\nThe purpose of this FAQ is to provide some insight into Sun's thoughts\nin creating the Operating System Distributor License for Java. \nAlthough the FAQ is not a legal document, it is designed to illustrate \nthe license terms through explanation and examples. This is a well\naccepted way of helping non-lawyers attain some comfort with legal\nlanguage, which is crafted by attorneys to meet the arcane \nrequirements of statutes and judicial opinions. For example, \nCreative Commons does a similar thing with its \"Deeds,\" \n(e.g. http:\/\/creativecommons.org\/licenses\/by-sa\/2.5\/ ) which are \nhuman-readable summaries of the \"Legal Code\" \n(e.g. http:\/\/creativecommons.org\/licenses\/by-sa\/2.5\/legalcode ) and\nand are accompanied by a legal disclaimer\n( http:\/\/creativecommons.org\/licenses\/disclaimer-popup?lang=en-us ).\n\nIf you think our FAQ is contradicted by the language in the license,\nwe'd like to hear from you so that we can consider revising the\nlicense to clear up any confusion. Otherwise, we encourage you to\nthink of the FAQ as a series of guideposts designed to help you\nunderstand and work with the license terms. Of course, if Sun clearly\nsays in an FAQ that it's okay to do something (and we haven't made a\nblatant typographical error), we're not going to sue you -- even if\none could make a clever legal argument that the license doesn't permit\nit. We believe in simplicity and transparency, and pledge to work\ndiligently with the community to achieve those objectives.\n\nSun expects to periodically update this FAQ to better reflect the\nconcerns and questions of the developer community. You will find a\npointer to the latest version of this FAQ at:\n  https:\/\/jdk-distros.dev.java.net\/developer.html \n\n1.  What is the Operating System Distribution License for Java\n    (a.k.a. the \"Distro License for Java\" or DLJ)?\n\n    The DLJ is a license created specifically for individuals and\n    communities who want to distribute Sun's binary Java Development\n    Kit (JDK) or Java Runtime Environment (JRE) with a Linux or\n    OpenSolaris Operating System (OS) distribution.\n\n2.   Why is Sun releasing the DLJ?\n\n    It's been difficult for developers who want to use Java SE\n    technology on a broad choice of Linux or OpenSolaris distributions\n    to easily obtain and use Sun's JDK or JRE. One issue has been the\n    redistribution terms of the Binary Code License (BCL) for Java SE\n    technology, which was never intended to license these bits for\n    general distribution with an Operating System. With this new\n    license, Sun is enabling the developer community to distribute our\n    binary JDK and JRE with distributions of Linux or OpenSolaris\n    operating systems, while still maintaining compatibility with the\n    Java Specifications.\n\n3.  How do I become a \"DLJ Licensee?\"\n\n    The DLJ is distributed by Sun as a \"click-through license\" in\n    special bundles available on java.net in the jdk-distros project\n    at https:\/\/jdk-distros.dev.java.net . These bundles contain the\n    same JDK software found in the standard Linux distribution bundles\n    and the Solaris bundles in the download area on java.sun.com\n    except that the LICENSE and README file are replaced by the DLJ\n    and a modified README file with matching terms. The README file\n    included in these bundles allows you to create JRE distributions\n    from the JDK bundles by following instructions in the file.\n\n4.  What does the DLJ allow me to do?\n\n    You can: \n    - Use the JDK on your OS to design, develop, test, and run Java programs. \n    - Repackage the JDK for use with your OS, within the limitations\n      spelled out in the README file.\n    - Distribute the JDK on any media, online, and preinstalled on\n      systems as a package with your OS.\n    - Distribute the JDK directly, or indirectly through your\n      licensees, distributors, resellers, OEMs, or downstream\n      recipients of your OS.\n\n5.  When I exercise the license and distribute the JDK, does it become\n    part of my Operating System, or do I need to explicitly declare it\n    as part of my OS?\n\n    No - the license grants you the right to distribute the JDK with\n    your Operating System, but it is still a separate piece of\n    software. You do not need to make the JDK part of what you define\n    as your OS when you exercise the license. All you need to do to\n    exercise the license is distribute the JDK with your OS. For\n    example, you could distribute the JDK bundles on a CD with your\n    OS, or in a package repository for your OS on your mirror\n    distribution sites.\n\n6.  Can projects such as the JPackage Project exercise the DLJ?\n\n    Sun recognizes and encourages the contributions of projects such\n    as the JPackage Project ( http:\/\/www.jpackage.org ) to the adoption\n    of Java technology on GNU\/Linux OSs. Such projects are very\n    similar to the jdk-distros project that Sun has established,\n    providing recommendations for packaging Java technology with OS\n    distributions, but not actually distributing an OS. Anyone can\n    provide recommendations for packaging under the DLJ, but only\n    GNU\/Linux and OpenSolaris OS distributors may exercise the DLJ and\n    ship the JDK, as the license requires that you ship the JDK\n    bundles with an OS.\n\n7.  I distribute my OS online from multiple mirror sites. Does such a\n    multi-site online distribution model fit into the definition of\n    \"online\" under this license?\n\n    Yes it does. Each mirror is, in essence, a downstream distributor\n    of the original OS bundles from the master site. Accordingly, the\n    mirror sites may distribute the JDK as part of these bundles,\n    under the terms and conditions of the DLJ.\n\n8.  What are my obligations under this license?\n\n    The license is the best reference for this. Some of the important \n    terms to consider are that you are required to:\n    - Keep all copyright and other notices intact.\n    - Distribute the entire JDK - no subsetting. Note - the README\n      file has the specifics of what you must distribute, and what can\n      be omitted.\n    - Use the JDK only to design, develop, test, and run Java programs\n      on your OS - you may not use it or parts of it for other\n      purposes.\n    - Present for acceptance any end user licenses that are part of\n      the JDK, if such licenses are included in the generic install\n      bundle provided to you for repackaging.\n    - Redistribute subject to the DLJ - so that downstream users and\n      distributors of the JDK are also subject to the DLJ's terms.\n    - Indemnify Sun against claims arising from your OS or your\n      violation of the DLJ (or any applicable law) Note that you are\n      not responsible for changes made to your OS distribution by\n      downstream users or distributors when such changes are out of\n      your control.\n    - Ship only a compatible JDK on your OS. If notified of an\n      incompatibility, you must correct it and offer a patch or\n      replacement to downstream recipients within 90 days, or stop\n      shipment and notify downstream recipients.\n\n9.  What is the README file? Is it part of the license? Why not include \n    it with the rest of the license?\n\n    The README file is explicitly called out in Section 2. License\n    Grant as a document that provides specific exceptions and\n    restrictions to what you may distribute, and should be considered\n    an adjunct to the license. The reason for keeping these details in\n    a separate file is simple: it allows us to adjust the technical\n    details of what constitutes the \"Software\" and what parts may be\n    redistributed separately or omitted from a distribution without\n    revising the license itself. This allows us to more quickly react\n    to clarify allowable modifications as additional distributions\n    package the JDK and discover modifications that are required to\n    ensure compatibility and quality.\n\n    You will find a pointer to the latest version of the README at:\n    https:\/\/jdk-distros.dev.java.net\/developer.html\n\n10. May I redistribute the src.zip file?\n\n    This is one of the files listed in the README as being optional,\n    but redistributable, so yes.\n\n11. If I am working on alternative technology projects, will I be\n    \"tainted\" by the existence of the src.zip file on my system, or if\n    I open this file and examine its contents?\n\n    No. The source in src.zip is licensed as a reference for running,\n    designing, developing and testing Java applications, and is an\n    integral and useful component of the JDK. Sun maintains that you\n    aren't tainted simply by having looked at this code, or having it\n    on your hard drive.\n\n12. How do I ensure that my package reproduces all the right copyright \n    notices and proprietary legends as required in Section 2(a)?\n\n    If you make certain that any copyright notices and licenses for\n    the packaging are clearly separate from the notices for the Java\n    platform, you'll be fine. Just make sure you distribute all the\n    notices that are provided as part of the JDK bundles you are\n    repackaging. For example in the 1.5.0 bundles, the notices are in\n    the following files in the top level directory:\n\n    COPYRIGHT\n    LICENSE\n    THIRDPARTYLICENSEREADME.txt\n\n    These files are the copyright notice for the JRE or JDK packages,\n    the license terms (DLJ) for the JRE or JDK packages and the\n    copyright notices and license terms for the THIRD PARTY CODE,\n    respectively.\n\n13. Can I use the JDK to develop programs that can be run anywhere,\n    or only for my OS? Section 2(b) seems to say I can't use the JDK\n    for developing arbitrary Java language applications.\n\n    The license allows you and your users to run Java programs from\n    any source, and develop Java programs for any platform. If you\n    distribute the JDK under this license, you must distribute it with\n    your OS, and for the purpose of running and developing Java\n    programs on your OS. The DLJ does not give you the right to\n    distribute a \"naked\" version of the JDK without your OS. The\n    purpose of the language in 2(b) is to require that you include\n    your OS, and to use the JDK only for its normal intended purpose\n    of running and developing Java programs.\n\n14. Does this license prevent me shipping any alternative technologies \n    in my OS distribution? \n\n    The DLJ does not restrict you from shipping any other technologies\n    you choose to include in your distribution. However, you can't use\n    pieces of the JDK configured in conjunction with any alternative\n    technologies to create hybrid implementations, or mingle the code\n    from the JDK with non-JDK components of any kind so that they run\n    together. It is of course perfectly OK to ship programs or\n    libraries that use the JDK. Because this question has caused\n    confusion in the past, we want to make this absolutely clear:\n    except for these limitations on combining technologies, there is\n    nothing in the DLJ intended to prevent you from shipping\n    alternative technologies with your OS distribution.\n\n15. So, can I ship Eclipse, or other language implementations like \n    Perl or Python?\n\n    Sun can't give you permission to ship these technologies. Only the\n    lawful owners and licensors of those technologies can do that. The\n    DLJ doesn't prohibit you from shipping them or from running them.\n\n16. If some program in my OS specifies the option -Xbootclasspath to\n    the java command, is that considered a breach of Section 2(c)?\n\n    We realize there is some confusion about this because the\n    documentation for the java command at\n    http:\/\/java.sun.com\/j2se\/1.5.0\/docs\/tooldocs\/solaris\/java.html\n    makes specific mention of the Binary Code License (BCL). The\n    intent of Section 2(c) is not to restrict what end user programs\n    do with command line options but rather to ensure that the Sun\n    Java platform is not used to create hybrid implementations with\n    alternate technologies, or mingle the JDK code with alternate\n    technologies so they run together.\n\n17. What do you mean by \"Present for acceptance end user licenses\"\n    (from #8 above)? Do I have to create a click-through license\n    display when a user first installs or runs the JDK? Must my users\n    accept the license?\n\n    Your users must agree to the license terms for the JDK before\n    installing it. While you aren't required to show the DLJ on first\n    use or installation, you must inform them that the JDK is licensed\n    software and that they must agree to the license before using\n    it. A click-through mechanism is the preferred way to do this, but\n    at a minimum you must present the license by some appropriate\n    means for acceptance. For example, your OS download procedure\n    could show the user a page that informs him or her that software\n    packages included in the download may contain software licenses to\n    which the user must agree before installation, and allow the user\n    to review them before download.\n\n    You can leverage your distribution's packaging technology to\n    ensure that the license terms have been accepted. For instance, on\n    Debian and derivative distributions, you could configure the\n    package so that if the debconf key for accepting the DLJ has not\n    been pre-accepted, the installation will be canceled if the\n    license cannot be presented. The point of presenting the license\n    is that an individual, corporation, non-profit or entity which\n    will be an end user of the JRE or JDK has had a chance to review\n    and agree to the DLJ. If the user or administrator pre-accepts\n    the key for DLJ agreement on behalf of herself or her group then\n    it is perfectly acceptable to silently install Sun Java on one or\n    many computers. This is an excellent example of how you can\n    leverage packaging infrastructure to comply with the terms of the\n    DLJ in ways that are convenient and expected for your users.\n\n18. How do I redistribute the JDK in my OS, so that downstream\n    recipients are subject to the DLJ? Do I need to do anything\n    special?\n\n    Nothing special - just be sure to include the license in your JDK\n    bundle, and inform your downstream recipients that the JDK is\n    subject to the license when they download or install it.\n\n19. What obligations do I assume when I receive the JDK as part of an\n    OS distribution, and then turn around and redistribute it, even if\n    I don't change a thing?\n\n    When you redistribute the JDK under the DLJ, you are subject to\n    its terms. This means that you are granted the rights described in\n    the license (provided you remain in compliance with the license\n    terms) and assume its obligations, including compatibility\n    requirements and indemnification. It doesn't matter whether you\n    change the distribution you receive or not. When you redistribute,\n    you do so under the terms of the DLJ.\n\n20. Why does Sun ask for indemnification? What indemnification am I\n    providing to Sun? I'm concerned that I will be held responsible\n    for things over which I have no control.\n\n    Simply put, Sun requires indemnification to limit its exposure for\n    issues that are not Sun's fault. If your conduct or your OS\n    causes a problem that results in a third-party claim, then Sun\n    expects you to take responsibility for it. Note that you are not\n    indemnifying Sun against claims that are a result of something in\n    Sun's code. You also are not indemnifying Sun against claims due\n    to changes that a downstream distributor has made to your OS.\n\n    Since downstream distributors must redistribute the JDK under the\n    terms of the DLJ, they are the ones providing indemnification to\n    Sun for the changes they've made to your OS - which is now their\n    OS for the purposes of this license.\n\n21. What do you mean by \"compatible\"?\n\n    \"Compatible\" has a very specific meaning for Java technology, and\n    in this license. Specifically, a \"Compatible\" Implementation\" is\n    an implementation of the Java SE technology specification that\n    meets the requirements of the Technology Compatibility Kit (TCK).,\n    i.e., the compliance tests, tools and documentation which allows\n    you to establish whether a particular implementation completely\n    and correctly implements the Java SE Specification on a specific\n    host platform.\n\n22. Am I required to run the TCK before I distribute the software?\n\n    No, this license does not require that you run the TCK.\n\n23. How do I learn more about the TCK?\n\n    There is a \"read-only\" version of the Java SE TCK available at\n    https:\/\/jck.dev.java.net which you can look at to better\n    understand the compatibility requirements. The license for this\n    is for evaluation purposes only.\n\n24. How do I verify compatibility when I don't have the TCK?\n\n    The DLJ is a binary redistribution license, for a binary that has\n    been verified on Sun's supported OS platforms (see\n    http:\/\/java.sun.com\/j2se\/1.5.0\/system-configurations.html ).\n    However, it is possible that the combination of Sun's JDK with\n    your OS distribution could break compatibility. The jdk-distros\n    project was created as a place for Linux, OpenSolaris, and Java\n    developers to cooperate on creating new packaging for the JDK,\n    solving problems including compatibility issues, and as a\n    clearinghouse for best practices, tips and tricks, examples, and\n    solutions to common issues. This project includes helpful guides\n    to potential problems with compatibility based on Sun's experience\n    in creating JDK bundles for supported OS versions. You can use\n    this guide to help you discover potential problems before you\n    distribute the JDK with your OS.\n\n25. I'd like to test my OS distribution's compatibility. How do I \n    obtain the TCK?\n\n    The TCK is available under a usage license that includes some\n    support, and which may be purchased from Sun.\n\n    If you are a qualified not-for-profit organization, you may be\n    eligible to obtain the TCK under a scholarship. You can find more\n    information about this program and request a scholarship\n    application at: http:\/\/java.sun.com\/scholarship\/\n\n    There is a \"read-only\" version of the Java SE TCK available at\n    http:\/\/jck.dev.java.net which you can look at to better understand\n    the compatibility requirements. The license for this is for\n    evaluation purposes only and while it does not allow you to run\n    the TCK, it may be helpful in your understanding of its\n    requirements.\n\n26. What happens if my OS does not behave compatibly with the JDK?\n\n    Sun provides JDK bundles which have been qualified as compatible\n    on several common Linux distributions and on\n    Solaris. Incompatibility problems will typically be the result of\n    variations between your OS and common distributions. Accordingly\n    you should fix any problems you are aware of in your OS before\n    distributing the software. The JDK must behave in a compatible\n    manner when running on your OS.\n\n27. If I'm aware of problems, can I document them for my users \n    and ship anyway?\n\n    No, you must fix the problems before distributing the software. It\n    is worth noting however, that you may document supported and\n    unsupported platform configurations such as specific web browsers,\n    OS versions, or hardware devices.\n\n28. What if a problem comes up after I distribute the software?\n\n    If Sun becomes aware of a compatibility problem with the JDK\n    software on your OS distribution and notifies you about it, then\n    you must fix the problem and offer a patch or new version to your\n    downstream users and distributors, or stop distributing the\n    software within 90 days of being notified. If you stop\n    distributing the software, you must also make reasonable attempts\n    to notify your users, and anyone who might have downloaded your OS\n    distribution. Once your downstream users are notified, they must\n    make the same choice (i.e. fix the problem or stop\n    using\/distributing the software)\n\n    Remember, you are always allowed to discontinue distribution of\n    the JDK and make a reasonable attempt to notify your downstream\n    users and distributors. For example you can stop shipping Sun Java\n    by removing it from the list of currently available software for\n    your OS. Sun will consider a stop-ship action to be a suitable\n    remedy for any compatibility problems. If at some future time you\n    are able to fix the problem, you can resume distribution of the\n    JDK under the terms of the DLJ.\n\n29. If I decide to stop-ship, must I remove the JDK from archived and \n    compatible distribution bundles as well?\n\n    No, archived bundles can contain the JDK as long as there are no\n    compatibility issues. Removing the JDK from your active\n    distribution should be sufficient. For instance, on Debian and","risk":4,"spdx":"","trademark":0,"unique_id":"0139f8c6-45d4-4d62-8818-84948ac98ce6"}