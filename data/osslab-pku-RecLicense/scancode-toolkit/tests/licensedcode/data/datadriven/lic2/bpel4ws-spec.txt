<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="EN"><head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><meta name="TITLE" content="Business Process Execution Language for Web Services Version 1.1"><meta name="KEYWORDS" content=""><meta name="ABSTRACT" content="This document defines a notation for specifying business process behavior based on Web Services. 
	This notation is called Business Process Execution Language for Web Services (abbreviated to BPEL4WS 
	in the rest of this document). Processes in BPEL4WS export and import functionality by using Web 
	Service interfaces exclusively."><meta name="DESCRIPTION" content="This document defines a notation for specifying business process behavior based on Web Services. 
	This notation is called Business Process Execution Language for Web Services (abbreviated to BPEL4WS 
	in the rest of this document). Processes in BPEL4WS export and import functionality by using Web 
	Service interfaces exclusively."><meta name="OWNER" content="http://www-106.ibm.com/developerworks/feedback/"><meta scheme="iso8601" name="DC.Date" content=""><meta scheme="rfc1766" name="DC.Language" content="en-us"><meta name="IBM.Country" content="zz"><meta name="SECURITY" content="Public"><meta name="FORMAT" content="text/xhtml"><meta name="COPYRIGHT" content="Copyright (c) 2003 by IBM Corporation"><meta name="ROBOTS" content="index,follow"> <meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;http://www.icra.org/ratingsv02.html&quot; l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) &quot;http://www.rsac.org/ratingsv01.html&quot; l gen true r (n 0 s 0 v 0 l 0) &quot;http://www.classify.org/safesurf/&quot; l gen true r (SS~~000 1))"> <meta http-equiv="Expires" content="0"><title>Business Process Execution Language for Web Services Version 1.1</title><style type="text/css">
:link { color: #00C; background: transparent }
:visited { color: #609; background: transparent }
:active { color: #C00; background: transparent }

h1, h2, h3, h4, h5, h6 { text-align: left }
/* background should be transparent, but WebTV has a bug */
h1, h2, h3 { color: #005A9C; background: white }
h1 { font: 170% sans-serif }
h2 { font: 140% sans-serif }
h3 { font: 120% sans-serif }
h4 { font: bold 100% sans-serif }
h5 { font: italic 100% sans-serif }
h6 { font: small-caps 100% sans-serif }

.hide { display: none }

div.head { margin-bottom: 1em }
div.head h1 { margin-top: 2em; clear: both }
div.head table { margin-left: 2em; margin-top: 2em }
div.head img { color: white; border: none } /* remove border from top image */

p.copyright { font-size: smaller }
p.copyright small { font-size: small }

@media screen {  /* hide from IE3 */
a[href]:hover { background: #ffa }
}

pre { margin-left: 2em }
/*
p {
  margin-top: 0.6em;
  margin-bottom: 0.6em;
}
*/
dt, dd { margin-top: 0; margin-bottom: 0 } /* opera 3.50 */
dt { font-weight: bold }

pre, code { font-family: monospace } /* navigator 4 requires this */

ul.toc {
  list-style: disc;		/* Mac NS has problem with 'none' */
  list-style: none;
}

@media aural {  
  h1, h2, h3 { stress: 20; richness: 90 }
  .hide { speak: none }
  p.copyright { volume: x-soft; speech-rate: x-fast }
  dt { pause-before: 20% }
  pre { speak-punctuation: code } 
}


code           { font-family: monospace;}

div.constraint,
div.issue,
div.note,
div.notice     { margin-left: 2em; }

dt.label       { display: run-in; }
                   

li p           { margin-top: 0.3em;
                 margin-bottom: 0.3em; }

            

div.exampleInner pre { margin-left: 1em;
                       margin-top: 0em; margin-bottom: 0em}
div.exampleOuter {border: 4px double gray;
                  margin: 0em; padding: 0em}
div.exampleInner { background-color: #d5dee3;
                   border-top-width: 4px;
                   border-top-style: double;
                   border-top-color: #d3d3d3;
                   border-bottom-width: 4px;
                   border-bottom-style: double;
                   border-bottom-color: #d3d3d3;
                   padding: 4px; margin: 0em }
div.exampleWrapper { margin: 4px }
div.exampleHeader { font-weight: bold;
                    margin: 4px}
</style><script language="JavaScript" src="bpel-spec_files/stylespec.js"></script><link rel="stylesheet" href="bpel-spec_files/ns1spec.css" type="text/css"><style type="text/css">p {font-family: sans-serif;}</style><style type="text/css">p {font-family: sans-serif;}</style></head><body bgcolor="#ffffff"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr valign="top"><td><!-- begin masthead dw liquid -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr valign="top">
<td class="bbg" width="110"><a href="http://www.ibm.com/"><img alt="IBMŽ" border="0" height="52" src="bpel-spec_files/ibm-logo.gif" width="110"></a></td>
<td class="bbg"><img src="bpel-spec_files/c.gif" width="1" height="1" border="0" alt=""></td>
<td align="right" class="mbbg" width="650">
<table border="0" cellpadding="0" cellspacing="0" align="right">
<tbody><tr class="cty-tou">
<td rowspan="2" width="17" class="upper-masthead-corner"><a href="#main"><img src="bpel-spec_files/c_002.gif" border="0" width="1" height="1" alt="Skip to main content"></a></td>
<td align="left">
<table border="0" cellpadding="0" cellspacing="0" align="left">
<tbody><tr>
<td><span class="spacer">    </span><b class="country">Country/region</b><span class="spacer"> [</span><a class="ur-link" href="http://www.ibm.com/developerworks/country/">select</a><span class="spacer">]</span></td>
<td width="29" class="upper-masthead-divider">    </td>
<td align="left"><a class="ur-link" href="http://www.ibm.com/legal/">Terms of use</a></td>
</tr>
</tbody></table>
</td>
<td width="40"> </td>
</tr>
<tr>
<td class="cty-tou-border" height="1" colspan="2"><img src="bpel-spec_files/c_002.gif" alt="" height="1" width="1"></td>
</tr>
<tr>
<td colspan="3"><img alt="" height="8" src="bpel-spec_files/c_002.gif" width="1"></td>
</tr>
<tr>
<td> </td>
<td align="center" colspan="2">
<input type="hidden" name="searchType" value="1"><input value="dW" name="searchSite" type="hidden">
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<form method="get" action="http://www-128.ibm.com/developerworks/search/searchResults.jsp" id="form1" name="form1"></form><td width="1"><label for="q"><img src="bpel-spec_files/c_002.gif" width="1" height="1" alt="Select a scope:"></label></td>
<td align="right"><select id="sq" name="searchScope" class="input-scope"><option value="dW">All of dW</option><option value="dW">-----------------</option><option value="db2">  DB2</option><option value="eserver">  eServer</option><option value="lotus">  Lotus</option><option value="rdd">  Rational</option><option value="tivoli">  Tivoli</option><option value="WSDD">  WebSphere</option><option value="dW">-----------------</option><option value="acZ">  Autonomic computing</option><option value="gridZ">  Grid computing</option><option value="javaZ">  Java technology</option><option value="linuxZ">  Linux</option><option value="opensrcZ">  Open source</option><option value="paZ">  Power Architecture</option><option value="webservZ">  SOA &amp; Web services</option><option value="webarchZ">  Web architecture</option><option value="wirelessZ">  Wireless</option><option value="xmlZ">  XML</option><option value="dW">-----------------</option><option value="forums">  dW forums</option><option value="dW">-----------------</option><option value="toolbox">  dW Subscription</option><option value="dW">-----------------</option><option value="aW">alphaWorks</option><option value="dW">-----------------</option><option value="all">All of IBM</option></select></td>
<td width="1" align="right"><label for="q"><img src="bpel-spec_files/c_002.gif" width="1" height="1" alt="Search for:"></label>  </td>
<td align="right"><input class="input" id="q" maxlength="100" name="query" size="15" type="text" value="">
</td>
<td width="7"> 
<!--
<input value="11" name="v" type="hidden"/><input value="en" name="lang" type="hidden"/><input value="zz" name="cc" type="hidden"/>
-->
</td>
<td><input alt="Search" name="Search" src="bpel-spec_files/search.gif" type="image" value="Search"></td>
<td width="20"> </td>
</tr>
</tbody></table>

</td>
</tr>
</tbody></table>
</td>
</tr>
<tr>
<td class="blbg" colspan="3">
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr>
<td>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td><span class="spacer">    </span></td>
<td><a class="masthead-mainlink" href="http://www.ibm.com/">Home</a></td>
<td class="masthead-divider" width="27">    </td>
<td><a class="masthead-mainlink" href="http://www.ibm.com/products/">Products</a></td>
<td class="masthead-divider" width="27">    </td>
<td><a class="masthead-mainlink" href="http://www.ibm.com/servicessolutions/">Services &amp; solutions</a></td>
<td class="masthead-divider" width="27">    </td>
<td><a class="masthead-mainlink" href="http://www.ibm.com/support/">Support &amp; downloads</a></td>
<td class="masthead-divider" width="27">    </td>
<td><a class="masthead-mainlink" href="http://www.ibm.com/account/">My account</a></td>
<td><span class="spacer">    </span></td>
</tr>
</tbody></table>
</td>
</tr>
</tbody></table>
</td>
</tr>
</tbody></table>
<!--
<script src="//www.ibm.com/common/v14/pmh.js" language="JavaScript" type="text/javascript"></script>
-->
<!-- end masthead dw liquid --><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody><tr class="hil"><td width="100%" height="1"><img src="bpel-spec_files/c.gif" width="600" height="1" alt=""></td></tr><tr class="dwr1"><td width="100%" height="2"><img src="bpel-spec_files/c.gif" width="600" height="2" alt=""></td></tr><tr class="dwg3"><td width="100%" height="1"><img src="bpel-spec_files/c.gif" width="600" height="1" alt=""></td></tr><tr class="bbg"><td width="100%" height="1"><img src="bpel-spec_files/c.gif" width="600" height="1" alt=""></td></tr><tr class="hil"><td width="100%" height="1"><img src="bpel-spec_files/c.gif" width="600" height="1" alt=""></td></tr></tbody></table><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody><tr valign="top"><td width="5"><img src="bpel-spec_files/c.gif" width="5" height="1" border="0" alt=""></td><td width="100%"><table width="100%" cellspacing="0" cellpadding="0" border="0"><tbody><tr valign="top"><td width="100%" class="btrail"><img src="bpel-spec_files/c.gif" width="2" height="4" border="0" alt=""><br><b><a href="http://www-106.ibm.com/developerworks/">IBM developerWorks</a> &gt; <a href="http://www-106.ibm.com/developerworks/webservices/">Web services</a></b></td><td width="136" align="right"><a href="http://www-106.ibm.com/developerworks/"><img src="bpel-spec_files/dwlogo-small.gif" width="136" height="24" border="0" alt="developerWorks"></a></td><td width="5"><img src="bpel-spec_files/c.gif" width="5" height="1" border="0" alt=""></td></tr></tbody></table></td></tr></tbody></table><div class="head"><h1><font color="#cc6633">Specification: </font>Business Process Execution Language for Web Services Version 1.1</h1>
<h2> 05 May 2003</h2><dl><dt>This version:</dt><dd><a href="http://www.ibm.com/developerworks/library/ws-bpel/">
http://www.ibm.com/developerworks/library/ws-bpel/</a> (available in <a href="ftp://www6.software.ibm.com/software/developer/library/ws-bpel.pdf">PDF</a>)
</dd><dt>Authors:</dt><dd>Tony Andrews, Microsoft <a href="mailto:tandrews@microsoft.com">&lt;tandrews@microsoft.com&gt;</a></dd><dd>Francisco Curbera, IBM <a href="mailto:curbera@us.ibm.com">&lt;curbera@us.ibm.com&gt;</a></dd><dd>Hitesh Dholakia, Siebel Systems <a href="mailto:Hitesh.Dholakia@siebel.com">&lt;Hitesh.Dholakia@siebel.com&gt;</a></dd><dd>Yaron Goland, BEA <a href="mailto:ygoland@bea.com">&lt;ygoland@bea.com&gt;</a></dd><dd>Johannes Klein, Microsoft <a href="mailto:joklein@microsoft.com">&lt;joklein@microsoft.com&gt;</a></dd><dd>Frank Leymann, IBM <a href="mailto:LEY1@de.ibm.com">&lt;LEY1@de.ibm.com&gt;</a></dd><dd>Kevin Liu, SAP <a href="mailto:kevin.liu@sap.com">&lt;kevin.liu@sap.com&gt;</a></dd><dd>Dieter Roller, IBM <a href="mailto:ROL@de.ibm.com">&lt;ROL@de.ibm.com&gt;</a></dd><dd>Doug Smith, Siebel Systems <a href="mailto:Doug.Smith@siebel.com">&lt;Doug.Smith@siebel.com&gt;</a></dd><dd>Satish Thatte, Microsoft <a href="mailto:satisht@microsoft.com">&lt;satisht@microsoft.com&gt;</a></dd><dd>Ivana Trickovic, SAP <a href="mailto:ivana.trickovic@sap.com">&lt;ivana.trickovic@sap.com&gt;</a></dd><dd>Sanjiva Weerawarana, IBM <a href="mailto:sanjiva@us.ibm.com">&lt;sanjiva@us.ibm.com&gt;</a></dd><dt>Editor:</dt><dd>Satish Thatte, Microsoft <a href="mailto:satisht@microsoft.com">&lt;satisht@microsoft.com&gt;</a></dd></dl><p class="dwsmall">CopyrightŠ 2002, 2003 <a href="http://www.bea.com/">BEA Systems</a>, 
	<a href="http://www.ibm.com/">International Business Machines Corporation</a>, 
	<a href="http://www.microsoft.com/">Microsoft Corporation</a>, 
	<a href="http://www.sap.com/">SAP AG</a>, 
	<a href="http://www.siebel.com/">Siebel Systems</a>. 
	All rights reserved.
	</p><p class="dwsmall">CopyrightŠ Permission to copy and displaythe "Business Process Execution Language for Web Services 
	Specification, version 1.1 dated May 5, 2003" (hereafter "the BPEL4WS Specification"), in any 
	medium without fee or royalty is hereby granted, provided that you include the following on 
	ALL copies of the BPEL4WS Specification, or portions thereof, that you make:
	</p><ol type="1"><li><p>A link to the BPEL4WS Specification at these locations:</p><p><a href="http://dev2dev.bea.com/technologies/webservices/BPEL4WS.jsp">http://dev2dev.bea.com/technologies/webservices/BPEL4WS.jsp</a></p><p><a href="http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/">http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/</a></p><p><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbiz2k2/html/bpel1-1.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbiz2k2/html/bpel1-1.asp</a></p><p><a href="http://ifr.sap.com/bpel4ws/">http://ifr.sap.com/bpel4ws/</a></p><p><a href="http://www.siebel.com/bpel">http://www.siebel.com/bpel</a></p></li><li><p>The copyright notice as shown in the BPEL4WS Specification:</p><p>BEA, IBM, Microsoft, SAP AG and Siebel Systems (collectively, the "Authors") agree to grant 
		you a royalty-free license, under reasonable, non-discriminatory terms and conditions, to patents 
		that they deem necessary to implement the Business Process Execution Language for Web Services 
		Specification.
		</p><p>THE Business Process Execution Language for Web Services SPECIFICATION IS PROVIDED "AS IS," 
		AND THE AUTHORS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT 
		LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, 
		OR TITLE; THAT THE CONTENTS OF THE BPEL4WS SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT 
		THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, 
		TRADEMARKS OR OTHER RIGHTS.
		</p><p>THE AUTHORS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL 
		DAMAGES ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THE BPEL4WS SPECIFICATION.
		</p><p>The name and trademarks of the Authors may NOT be used in any manner, including advertising 
		or publicity pertaining to the BPEL4WS Specification or its contents without specific, written 
		prior permission. Title to copyright in the BPEL4WS Specification will at all times remain with 
		the Authors.
		</p><p>No other rights are granted by implication, estoppel or otherwise.
		</p></li></ol></div><hr><div>
<h2><a name="abstract">Abstract</a></h2><p>This document defines a notation for specifying business process behavior based on Web Services. 
	This notation is called <em>Business Process Execution Language for Web Services</em> (abbreviated to BPEL4WS 
	in the rest of this document). Processes in BPEL4WS export and import functionality by using Web 
	Service interfaces exclusively.
	</p><p>Business processes can be described in two ways. <em>Executable</em> business processes model actual 
	behavior of a participant in a business interaction. <em>Business protocols</em>, in contrast, use process 
	descriptions that specify the mutually visible message exchange behavior of each of the parties 
	involved in the protocol, without revealing their internal behavior. The process descriptions for 
	business protocols are called <em>abstract processes</em>. BPEL4WS is meant to be used to model the behavior 
	of both executable and abstract processes.
	</p><p>BPEL4WS provides a language for the formal specification of business processes and business 
	interaction protocols. By doing so, it extends the Web Services interaction model and enables 
	it to support business transactions. BPEL4WS defines an interoperable integration model that 
	should facilitate the expansion of automated process integration in both the intra-corporate and 
	the business-to-business spaces.
	</p></div><div>
<h2><a name="status">Status of this Document</a></h2><p>This is a second public draft release of the BPEL4WS specification. BPEL4WS represents a 
	convergence of the ideas in the 
	<a href="http://www.gotdotnet.com/team/xml_wsspecs/xlang-c/default.htm">XLANG</a> and 
	<a href="http://www-3.ibm.com/software/solutions/webservices/pdf/WSFL.pdf">WSFL</a> specifications.
	Both XLANG and WSFL are superseded by the BPEL4WS specification.
	</p></div><div class="toc">
<h2><a name="contents">Table of Contents</a></h2><p class="toc">1. <a href="#introduction">Introduction</a><br>2. <a href="#notationalconventions">Notational Conventions</a><br>3. <a href="#relationshipwithwsdl">Relationship with WSDL</a><br>4. <a href="#whatchangedfrombpel4ws_10">What Changed from BPEL4WS 1.0</a><br>    4.1. <a href="#coreconceptsclarification">Core Concepts Clarification</a><br>    4.2. <a href="#terminologychanges">Terminology Changes</a><br>    4.3. <a href="#featurechanges">Feature Changes</a><br>5. <a href="#coreconceptsandusagepatterns">Core Concepts and Usage Patterns</a><br>6. <a href="#definingabusinessprocess">Defining a Business Process</a><br>    6.1. <a href="#initialexample">Initial Example</a><br>    6.2. <a href="#thestructureofabusinessprocess">The Structure of a Business Process</a><br>    6.3. <a href="#languageextensibility">Language Extensibility</a><br>    6.4. <a href="#thelifecycleofabusinessprocess">The Lifecycle of a Business Process</a><br>7. <a href="#partnerlinktypespartnerlinksandendpointreferences">Partner Link Types, Partner Links, and Endpoint References</a><br>    7.1. <a href="#partnerlinktypes">Partner Link Types</a><br>    7.2. <a href="#partnerlinks">Partner Links</a><br>    7.3. <a href="#businesspartners">Business Partners</a><br>    7.4. <a href="#endpointreferences">Endpoint References</a><br>8. <a href="#messageproperties">Message Properties</a><br>    8.1. <a href="#motivation">Motivation</a><br>    8.2. <a href="#definingproperties">Defining Properties</a><br>9. <a href="#datahandling">Data Handling</a><br>    9.1. <a href="#expressions">Expressions</a><br>        9.1.1. <a href="#booleanexpressions">Boolean Expressions</a><br>        9.1.2. <a href="#deadlinevaluedexpressions">Deadline-Valued Expressions</a><br>        9.1.3. <a href="#durationvaluedexpressions">Duration-Valued Expressions</a><br>        9.1.4. <a href="#generalexpressions">General Expressions</a><br>    9.2. <a href="#variables">Variables</a><br>    9.3. <a href="#assignment">Assignment</a><br>        9.3.1. <a href="#typecompatibilityinassignment">Type Compatibility in Assignment</a><br>        9.3.2. <a href="#assignmentexample">Assignment Example</a><br>10. <a href="#correlation">Correlation</a><br>    10.1. <a href="#messagecorrelation">Message Correlation</a><br>    10.2. <a href="#definingandusingcorrelationsets">Defining and Using Correlation Sets</a><br>11. <a href="#basicactivities">Basic Activities</a><br>    11.1. <a href="#standardattributesforeachactivity">Standard Attributes for Each Activity</a><br>    11.2. <a href="#standardelementsforeachactivity">Standard Elements for Each Activity</a><br>    11.3. <a href="#invokingwebserviceoperations">Invoking Web Service Operations</a><br>    11.4. <a href="#providingwebserviceoperations">Providing Web Service Operations</a><br>    11.5. <a href="#updatingvariablecontents">Updating Variable Contents</a><br>    11.6. <a href="#signalingfaults">Signaling Faults</a><br>    11.7. <a href="#waiting">Waiting</a><br>    11.8. <a href="#doingnothing">Doing Nothing</a><br>12. <a href="#structuredactivities">Structured Activities</a><br>    12.1. <a href="#sequence">Sequence</a><br>    12.2. <a href="#switch">Switch</a><br>    12.3. <a href="#while">While</a><br>    12.4. <a href="#pick">Pick</a><br>    12.5. <a href="#flow">Flow</a><br>        12.5.1. <a href="#linksemantics">Link Semantics</a><br>        12.5.2. <a href="#deadpatheliminationdpe">Dead-Path-Elimination (DPE)</a><br>        12.5.3. <a href="#flowgraphexample">Flow Graph Example</a><br>        12.5.4. <a href="#linksandstructuredactivities">Links and Structured Activities</a><br>13. <a href="#scopes">Scopes</a><br>    13.1. <a href="#datahandling2">Data Handling</a><br>    13.2. <a href="#errorhandlinginbusinessprocesses">Error Handling in Business Processes</a><br>    13.3. <a href="#compensationhandlers">Compensation Handlers</a><br>        13.3.1. <a href="#definingacompensationhandler">Defining a Compensation Handler</a><br>        13.3.2. <a href="#invokingacompensationhandler">Invoking a Compensation Handler</a><br>    13.4. <a href="#faulthandlers">Fault Handlers</a><br>        13.4.1. <a href="#implicitfaultandcompensationhandlers">Implicit Fault and Compensation Handlers</a><br>        13.4.2. <a href="#semanticsofactivitytermination">Semantics of Activity Termination</a><br>        13.4.3. <a href="#handlingfaultsthatoccurinsidefaultandcompensationhandlers">Handling Faults That Occur Inside Fault and Compensation Handlers</a><br>    13.5. <a href="#eventhandlers">Event Handlers</a><br>        13.5.1. <a href="#messageevents">Message Events</a><br>        13.5.2. <a href="#alarmevents">Alarm events</a><br>        13.5.3. <a href="#enablementofevents">Enablement of Events</a><br>        13.5.4. <a href="#disablementofevents">Disablement of Events</a><br>        13.5.5. <a href="#faulthandlingconsiderations">Fault Handling Considerations</a><br>        13.5.6. <a href="#concurrencyconsiderations">Concurrency Considerations</a><br>    13.6. <a href="#serializablescopes">Serializable Scopes</a><br>14. <a href="#extensionsforexecutableprocesses">Extensions for Executable Processes</a><br>    14.1. <a href="#expressions2">Expressions</a><br>    14.2. <a href="#variables2">Variables</a><br>    14.3. <a href="#assignment2">Assignment</a><br>    14.4. <a href="#correlation2">Correlation</a><br>    14.5. <a href="#webserviceoperations">Web Service Operations</a><br>    14.6. <a href="#terminatingaserviceinstance">Terminating a Service Instance</a><br>    14.7. <a href="#compensation">Compensation</a><br>    14.8. <a href="#eventhandlers2">Event Handlers</a><br>15. <a href="#extensionsforbusinessprotocols">Extensions for Business Protocols</a><br>    15.1. <a href="#variables3">Variables</a><br>    15.2. <a href="#assignment3">Assignment</a><br>16. <a href="#examples">Examples</a><br>    16.1. <a href="#shippingservice">Shipping Service</a><br>        16.1.1. <a href="#servicedescription">Service Description</a><br>        16.1.2. <a href="#messageproperties2">Message Properties</a><br>        16.1.3. <a href="#process">Process</a><br>    16.2. <a href="#loanapproval">Loan Approval</a><br>        16.2.1. <a href="#servicedescription2">Service Description</a><br>        16.2.2. <a href="#process2">Process</a><br>    16.3. <a href="#multiplestartactivities">Multiple Start Activities</a><br>        16.3.1. <a href="#servicedescription3">Service Description</a><br>        16.3.2. <a href="#process3">Process</a><br>17. <a href="#securityconsiderations">Security Considerations</a><br>18. <a href="#acknowledgments">Acknowledgments</a><br>19. <a href="#references">References</a><br>20. <a href="#appendices">Appendices</a><br>    20.1. <a href="#appendixa">Appendix A - Standard Faults</a><br>    20.2. <a href="#appendixb">Appendix A - Standard Faults</a><br>    20.3. <a href="#appendixc">Appendix C - Coordination Protocol</a><br>        20.3.1. <a href="#coordinationprotocolforbpel4wsscopes">Coordination Protocol for BPEL4WS Scopes</a><br>    20.4. <a href="#appendixd">Appendix D - XSD Schemas</a><br></p></div><hr><div class="body"><div class="div1">
<h2><a name="introduction"></a>1. Introduction</h2><p>The goal of the Web Services effort is to achieve universal interoperability between applications 
	by using Web standards. Web Services use a loosely coupled integration model to allow flexible 
	integration of heterogeneous systems in a variety of domains including business-to-consumer, 
	business-to-business and enterprise application integration. The following basic specifications 
	originally defined the Web Services space: SOAP, Web Services Description Language (WSDL), and 
	Universal Description, Discovery, and Integration (UDDI). SOAP defines an XML messaging protocol 
	for basic service interoperability. WSDL introduces a common grammar for describing services. UDDI 
	provides the infrastructure required to publish and discover services in a systematic way. Together, 
	these specifications allow applications to find each other and interact following a loosely coupled, 
	platform-independent model.
	</p><p>Systems integration requires more than the ability to conduct simple interactions by using 
	standard protocols. The full potential of Web Services as an integration platform will be achieved 
	only when applications and business processes are able to integrate their complex interactions by 
	using a standard process integration model. The interaction model that is directly supported by WSDL 
	is essentially a stateless model of synchronous or uncorrelated asynchronous interactions. Models 
	for business interactions typically assume sequences of peer-to-peer message exchanges, both synchronous 
	and asynchronous, within stateful, long-running interactions involving two or more parties.  To define 
	such business interactions, a formal description of the message exchange protocols used by business 
	processes in their interactions is needed.  The definition of such <em>business protocols</em> involves 
	precisely specifying the mutually visible message exchange behavior of each of the parties involved 
	in the protocol, without revealing their internal implementation. There are two good reasons to separate
	the public aspects of business process behavior from internal or private aspects. One is that businesses 
	obviously do not want to reveal all their internal decision making and data management to their business 
	partners. The other is that, even where this is not the case, separating public from private process 
	provides the freedom to change private aspects of the process implementation without affecting the 
	public business protocol.
	</p><p>Business protocols must clearly be described in a platform-independent manner and must capture 
	all behavioral aspects that have cross-enterprise business significance. Each participant can then 
	understand and plan for conformance to the business protocol without engaging in the process of human 
	agreement that adds so much to the difficulty of establishing cross-enterprise automated business 
	processes today.
	</p><p>What are the concepts required to describe business protocols? And what is the relationship of 
	these concepts to those required to describe executable processes? To answer these questions, consider 
	the following:
	</p><ul><li><p>Business protocols invariably include data-dependent behavior. For example, a supply-chain 
		protocol depends on data such as the number of line items in an order, the total value of an order, 
		or a deliver-by deadline. Defining business intent in these cases requires the use of conditional 
		and time-out constructs.
		</p></li><li><p>The ability to specify exceptional conditions and their consequences, including recovery 
		sequences, is at least as important for business protocols as the ability to define the behavior 
		in the "all goes well" case.
		</p></li><li><p>Long-running interactions include multiple, often nested units of work, each with its 
		own data requirements. Business protocols frequently require cross-partner coordination of the 
		outcome (success or failure) of units of work at various levels of granularity.
		</p></li></ul><p>If we wish to provide precise predictable descriptions of service behavior for cross-enterprise 
	business protocols, we need a rich process description notation with many features reminiscent of 
	an executable language.  The key distinction between public message exchange protocols and executable 
	internal processes is that internal processes handle data in rich private ways that need not be 
	described in public protocols.
	</p><p>In thinking about the data handling aspects of business protocols it is instructive to consider 
	the analogy with network communication protocols. Network protocols define the shape and content of 
	the protocol envelopes that flow on the wire, and the protocol behavior they describe is driven 
	solely by the data in these envelopes. In other words, there is a clear physical separation between 
	protocol-relevant data and "payload" data. The separation is far less clear cut in business protocols 
	because the protocol-relevant data tends to be embedded in other application data.
	</p><p>BPEL4WS uses a notion of message properties to identify protocol-relevant data embedded in 
	messages. Properties can be viewed as "transparent" data relevant to public aspects as opposed 
	to the "opaque" data that internal/private functions use. Transparent data affects the public 
	business protocol in a direct way, whereas opaque data is significant primarily to back-end systems 
	and affects the business protocol only by creating nondeterminism because the way it affects 
	decisions is opaque. We take it as a principle that any data that is used to affect the behavior 
	of a business protocol must be transparent and hence viewed as a property.
	</p><p>The implicit effect of opaque data manifests itself through nondeterminism in the behavior 
	of services involved in business protocols. Consider the example of a purchasing protocol. The 
	seller has a service that receives a purchase order and responds with either acceptance or 
	rejection based on a number of criteria, including availability of the goods and the credit of 
	the buyer. Obviously, the decision processes are opaque, but the fact of the decision must be 
	reflected as behavior alternatives in the external business protocol. In other words, the protocol 
	requires something like a switch activity in the behavior of the seller's service but the selection 
	of the branch taken is nondeterministic. Such nondeterminism can be modeled by allowing the 
	assignment of a nondeterministic or opaque value to a message property, typically from an enumerated 
	set of possibilities. The property can then be used in defining conditional behavior that captures 
	behavioral alternatives without revealing actual decision processes.  BPEL4WS explicitly allows 
	the use of nondeterministic data values to make it possible to capture the essence of public behavior 
	while hiding private aspects.
	</p><p>The basic concepts of BPEL4WS can be applied in one of two ways. A BPEL4WS process can define 
	a business protocol role, using the notion of <em>abstract process</em>. For example, in a supply-chain 
	protocol, the buyer and the seller are two distinct roles, each with its own abstract process. 
	Their relationship is typically modeled as a partner link. Abstract processes use all the concepts 
	of BPEL4WS but approach data handling in a way that reflects the level of abstraction required to 
	describe public aspects of the business protocol. Specifically, abstract processes handle only 
	protocol-relevant data. BPEL4WS provides a way to identify protocol-relevant data as <em>message 
	properties</em>. In addition, abstract processes use nondeterministic data values to hide private 
	aspects of behavior.
	</p><p>It is also possible to use BPEL4WS to define an executable business process. The logic and 
	state of the process determine the nature and sequence of the Web Service interactions conducted 
	at each business partner, and thus the interaction protocols. While a BPEL4WS process definition 
	is not required to be complete from a private implementation point of view, the language effectively 
	defines a portable execution format for business processes that rely exclusively on Web Service 
	resources and XML data. Moreover, such processes execute and interact with their partners in a 
	consistent way regardless of the supporting platform or programming model used by the implementation 
	of the hosting environment.
	</p><p>Even where private implementation aspects use platform-dependent functionality, which is likely 
	in many if not most realistic cases, the continuity of the basic conceptual model between abstract 
	and executable processes in BPEL4WS makes it possible to export and import the public aspects 
	embodied in business protocols as process or role templates while maintaining the intent and structure 
	of the protocols. This is arguably the most attractive prospect for the use of BPEL4WS from the 
	viewpoint of unlocking the potential of Web Services because it allows the development of tools 
	and other technologies that greatly increase the level of automation and thereby lower the cost 
	in establishing cross-enterprise automated business processes.
	</p><p>In summary, we believe that the two usage patterns of business protocol description and executable 
	business process description require a common core of process description concepts.   
	In this specification we clearly separate the core concepts from the extensions required 
	specifically for the two usage patterns.  The BPEL4WS specification is focused on defining 
	the common core, and adds only the essential extensions required for each usage pattern.
	</p><p>BPEL4WS defines a model and a grammar for describing the behavior of a business process based 
	on interactions between the process and its partners. The interaction with each partner occurs 
	through Web Service interfaces, and the structure of the relationship at the interface level is 
	encapsulated in what we call a <em>partner link</em>. The BPEL4WS process defines how multiple service 
	interactions with these partners are coordinated to achieve a business goal, as well as the state 
	and the logic necessary for this coordination. BPEL4WS also introduces systematic mechanisms for 
	dealing with business exceptions and processing faults. Finally, BPEL4WS introduces a mechanism 
	to define how individual or composite activities within a process are to be compensated in cases 
	where exceptions occur or a partner requests reversal.
	</p><p>BPEL4WS is layered on top of several XML specifications: WSDL 1.1, XML Schema 1.0, and 
	XPath1.0. WSDL messages and XML Schema type definitions provide the data model used by BPEL4WS 
	processes. XPath provides support for data manipulation. All external resources and partners are 
	represented as WSDL services. BPEL4WS provides extensibility to accommodate future versions of 
	these standards, specifically the XPath and related standards used in XML computation.
	</p></div><div class="div1">
<h2><a name="notationalconventions"></a>2. Notational Conventions</h2><p>The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", 
	"RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in 
	RFC2119 <a href="#ref13">[KEYWORDS]</a>.
	</p><p>Namespace URIs of the general form "some-URI" represent some application-dependent or 
	context-dependent URI as defined in RFC 2396 <a href="#ref14">[URI]</a>. 
	</p><p>This specification uses an informal syntax to describe the XML grammar of the XML fragments 
	that follow:
	</p><ul><li><p>The syntax appears as an XML instance, but the values indicate the data types instead 
		of values. 
		</p></li><li><p>Grammar in bold has not been introduced earlier in the document, or is of particular 
		interest in an example. 
		</p></li><li><p>&lt;-- description --&gt; is a placeholder for elements from some "other" namespace 
		(like ##other in XSD). 
		</p></li><li><p>Characters
are appended to elements, attributes, and as follows: "?" (0 or 1), "*"
(0 or more), "+" (1 or more). The characters "[" and "]" are used to
indicate that contained items are to be treated as a group with respect
to the "?", "*", or "+" characters. </p></li><li><p>Elements and attributes separated by "|" and grouped by "(" and ")" are meant to be 
		syntactic alternatives.
		</p></li><li><p>The XML namespace prefixes (defined below) are used to indicate the namespace of the 
		element being defined.
		</p></li><li><p>Examples starting with &lt;?xml contain enough information to conform to this specification; 
		other examples are fragments and require additional information to be specified in order to conform. 
		</p></li></ul><p>XSD schemas and WSDL definitions are provided as a formal definition of grammars 
	<a href="#ref07">[XML Schema 1]</a><a href="#ref03">[WSDL]</a>.
	</p></div><div class="div1">
<h2><a name="relationshipwithwsdl"></a>3. Relationship with WSDL</h2><p>BPEL4WS depends on the following XML-based specifications: WSDL 1.1, XML Schema 1.0, XPath 
	1.0 and WS-Addressing.
	</p><p>Among these, WSDL has the most influence on the BPEL4WS language. The BPEL4WS process model 
	is layered on top of the service model defined by WSDL 1.1. At the core of the BPEL4WS process 
	model is the notion of peer-to-peer interaction between services described in WSDL; both the 
	process and its partners are modeled as WSDL services. A business process defines how to coordinate 
	the interactions between a process instance and its partners. In this sense, a BPEL4WS process 
	definition provides and/or uses one or more WSDL services, and provides the description of the 
	behavior and interactions of a process instance relative to its partners and resources through 
	Web Service interfaces. That is, BPEL4WS defines the message exchange protocols followed by the 
	business process of a specific role in the interaction.
	</p><p>The definition of a BPEL4WS business process also follows the WSDL model of separation between 
	the abstract message contents used by the business process and deployment information (messages 
	and portType versus binding and address information). In particular, a BPEL4WS process represents 
	all partners and interactions with these partners in terms of abstract WSDL interfaces (portTypes 
	and operations); no references are made to the actual services used by a process instance.
	</p><p>However, the abstract part of WSDL does not define the constraints imposed on the communication 
	patterns supported by the concrete bindings. Therefore a BPEL4WS process may define behavior 
	relative to a partner service that is not supported by all possible bindings, and it may happen 
	that some bindings are invalid for a BPEL4WS process definition.
	</p><p>A BPEL4WS process is a reusable definition that can be deployed in different ways and in 
	different scenarios, while maintaining a uniform application-level behavior across all of them. 
	Note that the description of the deployment of a BPEL4WS process is out of scope for this 
	specification.
	</p><p>The dependency on <a href="#ref16">[WS-Addressing]</a> is meant to avoid inventing a private BPEL4WS 
	mechanism for web service endpoint references-such references are obviously a very general 
	requirement in the usage of web services.
	</p></div><div class="div1">
<h2><a name="whatchangedfrombpel4ws_10"></a>4. What Changed from BPEL4WS 1.0</h2><p>The BPEL4WS 1.1 specification is an enhancement of the BPEL4WS 1.0 specification 
	<a href="#ref15">[BPEL]</a>.  The 1.1 version has five new authors who brought a fresh viewpoint and 
	deep industry experience.  Their contributions are reflected in a number of enhancements in this 
	version.
	</p><p>The 1.1 version incorporates numerous corrections and clarifications based on the feedback 
	received on the 1.0 version.  In addition, the 1.1 version differs from the 1.0 version in the 
	following substantive ways.
	</p><div class="div2">
<h3><a name="coreconceptsclarification"></a>4.1. Core Concepts Clarification</h3><p>We believe that the two usage patterns of business protocol description and executable 
		business process description require a common core of process description concepts.   
		In the 1.1 version of the specification we clearly separate the core concepts from the 
		extensions required specifically for the two usage patterns.  The main body of the specification 
		defines the core concepts.  The <a href="#extensionsforexecutableprocesses"><b>14. Extensions for Executable Processes</b></a> 
		and the <a href="#extensionsforbusinessprotocols"><b>15. Extensions for Business Protocols</b></a> are defined in separate 
		sections at the end of the specification.  The separation of core concepts from extensions 
		allows features required for specific usage patterns to be defined in a composable manner.  
		It is conceivable that further extensions will be developed over time as the usage of the 
		specification matures. 
		</p></div><div class="div2">
<h3><a name="terminologychanges"></a>4.2. Terminology Changes</h3><p>The following terminology changes have occurred
		</p><ul><li><p>Service Links are now called <em>Partner Links</em></p></li><li><p>Service Link Types are now called <em>Partner Link Types</em></p></li><li><p>Service References are now called <em>Endpoint References</em></p></li><li><p>Containers are now called <em>Variables</em></p></li></ul><p>The formal syntax has also been changed to reflect these terminology changes, including the 
		replacement of the current <code>partner</code> element with a <code>partnerLink</code> element to reflect the fact that 
		such a link is a conversational interface rather than reflective of a business relationship. 
		A <code>partner</code> element reflective of a business relationship is added as described in the next 
		section.
		</p></div><div class="div2">
<h3><a name="featurechanges"></a>4.3. Feature Changes</h3><p>The following changes have been made
		</p><ul><li><p>The <code>terminate</code> activity is now strictly limited to executable processes.</p></li><li><p>Partner Link Type Roles are now limited to a single WSDL portType.</p></li><li><p>A new <code>partner</code> element is added to allow grouping of Partner Links based on expected 
			business enterprise relationships.</p></li><li><p>Endpoint references (formerly service references) are now defined as given in 
			<a href="#ref16">[WS-Addressing]</a>.</p></li><li><p>Message Properties are now limited to only be simple types.</p></li><li><p>Web service interactions in abstract processes are now permitted to omit references 
			to variables for inbound and outbound message data.</p></li><li><p>Opaque assignment in abstract processes may now target Boolean variables, and 
			variables of simple but unbounded types.  In the latter case the semantics requires creation 
			of a unique value similar to a GUID.</p></li><li><p>The syntax for defining variables has been changed to use three mutually exclusive 
			attributes messagetype, type and element. The first points to a WSDL message type definition. 
			The second points to an XML Schema simple type. The third points to an XML Schema global 
			element definition. This allows one to define variables using something other than WSDL message 
			types.  Only variables that are defined using messagetypes can be used as input or output 
			targets in messaging operations.</p></li><li><p>The ability to provide an in-line WSDL message type has been removed, since the vast 
			majority of the uses of this feature will be replaced by the usage of XML Schema simple types 
			and global elements.</p></li><li><p>Correlation sets have now been added to the uniqueness requirement so that it is not 
			legal to have two web service interactions outstanding if they have the same partner, port type, 
			operation and correlation set(s).</p></li><li><p>In case of activity termination, the activities <code>wait</code>, <code>reply</code> 
			and<code>invoke</code> are added to <code>receive</code> as being instantly terminated 
			rather than being allowed to finish.</p></li><li><p>The variable provided as the value of the <code>faultVariable</code> attribute in a 
			<code>catch</code> handler 
			to hold fault data is now scoped to the fault handler itself rather than being inherited from 
			the associated scope.</p></li><li><p>Variables and correlation sets can now be associated with local scopes rather than 
			with the process as a whole.  This permits easier management of visibility and lifetime for 
			variables and repeated initiation of local correlation sets to allow multiple correlated 
			conversations during, e.g., iterative behavior.</p></li><li><p>Event handlers can now be associated with scopes, to permit a process or scope to be 
			prepared to receive external events and requests concurrently with the main activity of the 
			process or scope.  This is especially helpful for events and requests that cannot be "scheduled" 
			relative to the main activity, but may occur at unpredictable times.</p></li><li><p>The Future Directions section has been dropped since this version forms the starting 
			point for a formal standards process, which will define those directions.</p></li></ul></div></div><div class="div1">
<h2><a name="coreconceptsandusagepatterns"></a>5. Core Concepts and Usage Patterns</h2><p>As noted in the introduction, we believe that the two usage patterns of business protocol 
	description and executable business process description require a common core of process description 
	concepts.   In this specification we clearly separate the core concepts from the extensions required 
	specifically for the two usage patterns.  The BPEL4WS specification is focused on defining the 
	common core, and adds only the essential extensions required for each usage pattern.  These extensions 
	are described in separate sections (<a href="#extensionsforexecutableprocesses"><b>14. Extensions for Executable Processes</b></a> and 
	<a href="#extensionsforbusinessprotocols"><b>15. Extensions for Business Protocols</b></a>).
	</p><p>In a number of cases, the behavior of a process in a certain combination of circumstances is 
	undefined, e.g., when a variable is used before being initialized.  In the definition of the core 
	concepts we simply note that the semantics in such cases is not defined.
	</p><p>BPEL4WS takes it as a general principle that compliant implementations MAY choose to 
	perform static analysis to detect and reject process definitions that may have undefined 
	semantics. Such analysis is necessarily pessimistic and therefore might in some cases prevent 
	the use of processes that would not, in fact, create situations with undefined semantics, either 
	in specific uses or in any use.
	</p><p>In the executable usage pattern for BPEL4WS, situations of undefined semantics always 
	result in standard faults in the BPEL4WS namespace.  These cases will be described as part 
	of the <a href="#extensionsforexecutableprocesses"><b>14. Extensions for Executable Processes</b></a> in the specification.  However, 
	it is important to note that BPEL4WS uses two standard <em>internal</em> faults for its 
	core control semantics, namely, bpws:forcedTermination and bpws:joinFailure.  These are the 
	only two standard faults that play a role in the core concepts of BPEL4WS.  Of course, the 
	occurrence of faults specified in WSDL portType definitions during web service invocation is 
	accounted for in the core concepts as well.
	</p></div><div class="div1">
<h2><a name="definingabusinessprocess"></a>6. Defining a Business Process</h2><div class="div2">
<h3><a name="initialexample"></a>6.1. Initial Example</h3><p>Before describing the structure of business processes in detail, this section presents a 
		simple example of a BPEL4WS process for handling a purchase order. The aim is to introduce 
		the most basic structures and some of the fundamental concepts of the language.
		</p><p>The operation of the process is very simple, and is represented in the following figure. 
		Dotted lines represent sequencing. Free grouping of sequences represents concurrent sequences. 
		Solid arrows represent control links used for synchronization across concurrent activities. 
		Note that this is not meant to be a definitive graphical notation for BPEL4WS processes. It 
		is used here informally as an aid to understanding.
		</p><p>On receiving the purchase order from a customer, the process initiates three tasks 
		concurrently: calculating the final price for the order, selecting a shipper, and scheduling 
		the production and shipment for the order. While some of the processing can proceed 
		concurrently, there are control and data dependencies between the three tasks. In particular, 
		the shipping price is required to finalize the price calculation, and the shipping date is 
		required for the complete fulfillment schedule. When the three tasks are completed, invoice 
		processing can proceed and the invoice is sent to the customer.
		</p><p><img src="bpel-spec_files/specfig1.jpg" alt="Initial Example"></p><p>The WSDL portType offered by the service to its customers (purchaseOrderPT) is shown in the 
		following WSDL document. Other WSDL definitions required by the business process are included in 
		the same WSDL document for simplicity; in particular, the portTypes for the Web Services providing 
		price calculation, shipping selection and scheduling, and production scheduling functions are also 
		defined there. Observe that there are no bindings or service elements in the WSDL document. A 
		BPEL4WS process is defined "in the abstract" by referencing only the portTypes of the services 
		involved in the process, and not their possible deployments. Defining business processes in this 
		way allows the reuse of business process definitions over multiple deployments of compatible services.
		</p><p>The partner link types included at the bottom of the WSDL document represent the interaction 
		between the purchase order service and each of the parties with which it interacts (see 
		<a href="#partnerlinktypespartnerlinksandendpointreferences">[partnerlinktypespartnerlinksandendpointreferences]</a>). Partner link types 
		can be used to represent 
		dependencies between services, regardless of whether a BPEL4WS business process is defined for 
		one or more of those services. Each partner link type defines up to two "role" names, and lists 
		the portTypes that each role must support for the interaction to be carried out successfully. 
		In this example, two partner link types, "purchasingLT" and "schedulingLT", list a single role 
		because, in the corresponding service interactions, one of the parties provides all the invoked 
		operations: The "purchasingLT" partner link represents the connection between the process and 
		the requesting customer, where only the purchase order service needs to offers a service operation 
		("sendPurchaseOrder"); the "schedulingLT" partner link represents the interaction between the 
		purchase order service and the scheduling service, in which only operations of the latter are 
		invoked. The two other partner link types, "invoicingLT" and "shippingLT", define two roles 
		because both the user of the invoice calculation and the user of the shipping service (the 
		invoice or the shipping schedule) must provide callback operations to enable asynchronous 
		notifications to be asynchronously sent ("invoiceCallbackPT" and "shippingCallbackPT" portTypes). 
		</p><div class="exampleInner"><pre>&lt;definitions targetNamespace="http://manufacturing.org/wsdl/purchase"
      xmlns:sns="http://manufacturing.org/xsd/purchase"
      xmlns:pos="http://manufacturing.org/wsdl/purchase"
      xmlns:xsd="http://www.w3.org/2001/XMLSchema"
      xmlns="http://schemas.xmlsoap.org/wsdl/"
      xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"&gt; 

&lt;import namespace="http://manufacturing.org/xsd/purchase"
        location="http://manufacturing.org/xsd/purchase.xsd"/&gt;

&lt;message name="POMessage"&gt;
   &lt;part name="customerInfo" type="sns:customerInfo"/&gt;
   &lt;part name="purchaseOrder" type="sns:purchaseOrder"/&gt;
&lt;/message&gt;
&lt;message name="InvMessage"&gt;
   &lt;part name="IVC" type="sns:Invoice"/&gt;
&lt;/message&gt;
&lt;message name="orderFaultType"&gt;
   &lt;part name="problemInfo" type="xsd:string"/&gt;
&lt;/message&gt;
&lt;message name="shippingRequestMessage"&gt;
   &lt;part name="customerInfo" type="sns:customerInfo"/&gt;
&lt;/message&gt;
&lt;message name="shippingInfoMessage"&gt;
   &lt;part name="shippingInfo" type="sns:shippingInfo"/&gt;
&lt;/message&gt;
&lt;message name="scheduleMessage"&gt;
   &lt;part name="schedule" type="sns:scheduleInfo"/&gt;
&lt;/message&gt;

&lt;!-- portTypes supported by the purchase order process --&gt;

&lt;portType name="purchaseOrderPT"&gt;
   &lt;operation name="sendPurchaseOrder"&gt;
      &lt;input message="pos:POMessage"/&gt;
      &lt;output message="pos:InvMessage"/&gt;
      &lt;fault name="cannotCompleteOrder" 
             message="pos:orderFaultType"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;
&lt;portType name="invoiceCallbackPT"&gt;
   &lt;operation name="sendInvoice"&gt;
      &lt;input message="pos:InvMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;
&lt;portType name="shippingCallbackPT"&gt;
   &lt;operation name="sendSchedule"&gt;
      &lt;input message="pos:scheduleMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;!-- portType supported by the invoice services --&gt;

&lt;portType name="computePricePT"&gt;
   &lt;operation name="initiatePriceCalculation"&gt;
      &lt;input message="pos:POMessage"/&gt;
   &lt;/operation&gt;
   &lt;operation name="sendShippingPrice"&gt;
      &lt;input message="pos:shippingInfoMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;!-- portType supported by the shipping service --&gt;

&lt;portType name="shippingPT"&gt;
   &lt;operation name="requestShipping"&gt;
      &lt;input message="pos:shippingRequestMessage"/&gt;
      &lt;output message="pos:shippingInfoMessage"/&gt;
      &lt;fault name="cannotCompleteOrder" 
             message="pos:orderFaultType"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;!-- portType supported by the production scheduling process --&gt;

&lt;portType name="schedulingPT"&gt;
   &lt;operation name="requestProductionScheduling"&gt;
      &lt;input message="pos:POMessage"/&gt;
   &lt;/operation&gt;
   &lt;operation name="sendShipingSchedule"&gt;
      &lt;input message="pos:scheduleMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;plnk:partnerLinkType name="purchasingLT"&gt;
   &lt;plnk:role name="purchaseService"&gt;
       &lt;plnk:portType name="pos:purchaseOrderPT"/&gt;
   &lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;

&lt;plnk:partnerLinkType name="invoicingLT"&gt;
   &lt;plnk:role name="invoiceService"&gt;
       &lt;plnk:portType name="pos:computePricePT"/&gt;
   &lt;/plnk:role&gt;
   &lt;plnk:role name="invoiceRequester"&gt;
       &lt;plnk:portType name="pos:invoiceCallbackPT"/&gt;
   &lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;

&lt;plnk:partnerLinkType name="shippingLT"&gt;
   &lt;plnk:role name="shippingService"&gt;
       &lt;plnk:portType name="pos:shippingPT"/&gt;
   &lt;/plnk:role&gt;
   &lt;plnk:role name="shippingRequester"&gt;
       &lt;plnk:portType name="pos:shippingCallbackPT"/&gt;
   &lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;

&lt;plnk:partnerLinkType name="schedulingLT"&gt;
   &lt;plnk:role name="schedulingService"&gt;
       &lt;plnk:portType name="pos:schedulingPT"/&gt;
   &lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;

&lt;/definitions&gt;
		</pre></div><p>The business process for the order service is defined next. There are four major sections 
		in this process definition:
		</p><ul><li><p>The &lt;variables&gt; section defines the data variables used by the process, 
			providing their definitions in terms of WSDL message types, XML Schema simple types, or 
			XML Schema elements. Variables allow processes to maintain state data and process history 
			based on messages exchanged.</p></li><li><p>The &lt;partnerLinks&gt; section defines the different parties that interact with 
			the business process in the course of processing the order. The four partnerLinks shown 
			here correspond to the sender of the order (customer), as well as the providers of price 
			(invoicingProvider), shipment (shippingProvider), and manufacturing scheduling services 
			(schedulingProvider). Each partner link is characterized by a partner link type and a 
			role name. This information identifies the functionality that must be provided by the 
			business process and by the partner service for the relationship to succeed, that is, the 
			portTypes that the purchase order process and the partner need to implement.</p></li><li><p>The &lt;faultHandlers&gt; section contains fault handlers defining the activities 
			that must be performed in response to faults resulting from the invocation of the assessment 
			and approval services. In BPEL4WS, all faults, whether internal or resulting from a service 
			invocation, are identified by a qualified name. In particular, each WSDL fault is identified 
			in BPEL4WS by a qualified name formed by the target namespace of the WSDL document in which 
			the relevant portType and fault are defined, and the ncname of the fault. It is important 
			to note, however, that because WSDL 1.1 does not require that fault names be unique within 
			the namespace where the operation is defined, all faults sharing a common name and defined 
			in the same namespace are indistinguishable. In spite of this serious WSDL limitation, 
			BPEL4WS provides a uniform naming model for faults, in the expectation that future versions 
			of WSDL will provide a better fault-naming model.</p></li><li><p>The rest of the process definition contains the description of the normal behavior 
			for handling a purchase request. The major elements of this description are explained in the 
		    section following the process definition.</p></li></ul><div class="exampleInner"><pre>&lt;process name="purchaseOrderProcess" 
         targetNamespace="http://acme.com/ws-bp/purchase"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:lns="http://manufacturing.org/wsdl/purchase"&gt;
   
   &lt;partnerLinks&gt;
      &lt;partnerLink name="purchasing" 
               partnerLinkType="lns:purchasingLT"
               myRole="purchaseService"/&gt;
      &lt;partnerLink name="invoicing" 
               partnerLinkType="lns:invoicingLT"
               myRole="invoiceRequester"
               partnerRole="invoiceService"/&gt;
      &lt;partnerLink name="shipping" 
               partnerLinkType="lns:shippingLT"
               myRole="shippingRequester"
               partnerRole="shippingService"/&gt;
      &lt;partnerLink name="scheduling" 
               partnerLinkType="lns:schedulingLT"
               partnerRole="schedulingService"/&gt;
   &lt;/partnerLinks&gt;

   &lt;variables&gt;
      &lt;variable name="PO" messageType="lns:POMessage"/&gt;
      &lt;variable name="Invoice" 
                 messageType="lns:InvMessage"/&gt;
      &lt;variable name="POFault" 
                 messageType="lns:orderFaultType"/&gt;
      &lt;variable name="shippingRequest" 
                 messageType="lns:shippingRequestMessage"/&gt;
      &lt;variable name="shippingInfo" 
                 messageType="lns:shippingInfoMessage"/&gt;
      &lt;variable name="shippingSchedule" 
                 messageType="lns:scheduleMessage"/&gt;
   &lt;/variables&gt;

   &lt;faultHandlers&gt;
      &lt;catch faultName="lns:cannotCompleteOrder" 
             faultVariable="POFault"&gt;
         &lt;reply   partnerLink="purchasing"
                  portType="lns:purchaseOrderPT" 
                  operation="sendPurchaseOrder"
                  variable="POFault" 
                  faultName="cannotCompleteOrder"/&gt;
      &lt;/catch&gt;
   &lt;/faultHandlers&gt;
 
   &lt;sequence&gt;

      &lt;receive partnerLink="purchasing" 
               portType="lns:purchaseOrderPT" 
               operation="sendPurchaseOrder" 
               variable="PO"&gt;
      &lt;/receive&gt;

      &lt;flow&gt;

         &lt;links&gt;
            &lt;link name="ship-to-invoice"/&gt;
            &lt;link name="ship-to-scheduling"/&gt;
         &lt;/links&gt;

         &lt;sequence&gt;
            &lt;assign&gt;
               &lt;copy&gt;
                  &lt;from variable="PO" part="customerInfo"/&gt;
                  &lt;to variable="shippingRequest" 
                      part="customerInfo"/&gt;
               &lt;/copy&gt;
            &lt;/assign&gt;
   
            &lt;invoke  partnerLink="shipping" 
                     portType="lns:shippingPT" 
                     operation="requestShipping"
                     inputVariable="shippingRequest" 
                     outputVariable="shippingInfo"&gt;
               &lt;source linkName="ship-to-invoice"/&gt;
            &lt;/invoke&gt;

            &lt;receive partnerLink="shipping" 
                     portType="lns:shippingCallbackPT" 
                     operation="sendSchedule"
                     variable="shippingSchedule"&gt;
               &lt;source linkName="ship-to-scheduling"/&gt;
            &lt;/receive&gt;

         &lt;/sequence&gt;

         &lt;sequence&gt;

            &lt;invoke  partnerLink="invoicing" 
                     portType="lns:computePricePT" 
                     operation="initiatePriceCalculation"
                     inputVariable="PO"&gt;
            &lt;/invoke&gt;
            &lt;invoke  partnerLink="invoicing" 
                     portType="lns:computePricePT" 
                     operation="sendShippingPrice"
                     inputVariable="shippingInfo"&gt;
               &lt;target linkName="ship-to-invoice"/&gt;
            &lt;/invoke&gt;

            &lt;receive partnerLink="invoicing" 
                     portType="lns:invoiceCallbackPT" 
                     operation="sendInvoice"
                     variable="Invoice"/&gt;

         &lt;/sequence&gt;

         &lt;sequence&gt;
            &lt;invoke  partnerLink="scheduling" 
                     portType="lns:schedulingPT" 
                     operation="requestProductionScheduling"
                     inputVariable="PO"&gt;
            &lt;/invoke&gt;
            &lt;invoke  partnerLink="scheduling" 
                     portType="lns:schedulingPT" 
                     operation="sendShippingSchedule"
                     inputVariable="shippingSchedule"&gt;
               &lt;target linkName="ship-to-scheduling"/&gt;
            &lt;/invoke&gt;
         &lt;/sequence&gt;
      &lt;/flow&gt;

      &lt;reply partnerLink="purchasing" 
             portType="lns:purchaseOrderPT" 
             operation="sendPurchaseOrder" 
             variable="Invoice"/&gt;
   &lt;/sequence&gt;

&lt;/process&gt;
		</pre></div><p>The structure of the main processing section is defined by the outer &lt;sequence&gt; element, 
		which states that the three activities contained inside are performed in order. The customer 
		request is received (&lt;receive&gt; element), then processed (inside a&lt;flow&gt; section that 
		enables concurrent behavior), and a reply message with the final approval status of the 
		request is sent back to the customer (&lt;reply&gt;). Note that the &lt;receive&gt; and &lt;reply&gt; elements 
		are matched respectively to the &lt;input&gt; and &lt;output&gt; messages of the "sendPurchaseOrder" 
		operation invoked by the customer, while the activities performed by the process between 
		these elements represent the actions taken in response to the customer request, from the 
		time the request is received to the time the response is sent back (reply).
		</p><p>The example makes the implicit assumption that the customer request can be processed 
		in a reasonable amount of time, justifying the requirement that the invoker wait for a 
		synchronous response (because this service is offered as a request-response operation). 
		When that assumption does not hold, the interaction with the customer is better modeled as 
		a pair of asynchronous message exchanges. In that case, the "sendPurchaseOrder" operation is 
		a one-way operation and the asynchronous response is sent by invoking a second one-way operation 
		on a customer "callback" interface. In addition to changing the signature of "sendPurchaseOrder" 
		and defining a new portType to represent the customer callback interface, two modifications 
		need to be made in the preceding example to support an asynchronous response to the customer. 
		First, the partner link type "purchasingLT" that represents the process-customer connection 
		needs to include a second role ("customer") listing the customer callback portType. Second, 
		the &lt;reply&gt; activity in the process needs to be replaced by an &lt;invoke&gt; on the customer 
		callback operation.
		</p><p>The processing taking place inside the &lt;flow&gt; element consists of three &lt;sequence&gt; 
		blocks running concurrently. The synchronization dependencies between activities in the 
		three concurrent sequences are expressed by using "links" to connect them. The links are 
		defined inside the flow and are used to connect a source activity to a target activity. 
		(Note that each activity declares itself as the source or target of a link by using the nested 
		&lt;source&gt; and &lt;target&gt; elements.) In the absence of links, the activities nested 
		directly inside a flow proceed concurrently. In the example, however, the presence of 
		two links introduces control dependencies between the activities performed inside each 
		sequence. For example, while the price calculation can be started immediately after the 
		request is received, shipping price can only be added to the invoice after the shipper 
		information has been obtained; this dependency is represented by the link (named 
		"ship-to-invoice") that connects the first call on the shipping provider ("requestShipping") 
		with sending shipping information to the price calculation service ("sendShippingPrice"). 
		Likewise, shipping scheduling information can only be sent to the manufacturing scheduling 
		service after it has been received from the shipper service; thus the need for the second 
		link ("ship-to-scheduling").
		</p><p>Observe that information is passed between the different activities in an implicit 
		way through the sharing of globally visible data variables. In this example, the control 
		dependencies represented by links are related to corresponding data dependencies, in one 
		case on the availability of the shipper rates and in another on the availability of a 
		shipping schedule. The information is passed from the activity that generates it to the 
		activity that uses it by means of two global data variables ("shippingInfo" and 
		"shippingSchedule").
		</p><p>Certain operations can return faults, as defined in their WSDL definitions. For 
		simplicity, it is assumed here that the two operations return the same fault 
		("cannotCompleteOrder"). When a fault occurs, normal processing is terminated and 
		control is transferred to the corresponding fault handler, as defined in the &lt;faultHandlers&gt; 
		section. In this example the handler uses a &lt;reply&gt; element to return a fault to the 
		customer (note the "faultName" attribute in the &lt;reply&gt; element).
		</p><p>Finally, it is important to observe how an assignment activity is used to transfer 
		information between data variables. The simple assignments shown in this example transfer 
		a message part from a source variable to a message part in a target variable, but more 
		complex forms of assignments are also possible.
		</p></div><div class="div2">
<h3><a name="thestructureofabusinessprocess"></a>6.2. The Structure of a Business Process</h3><p>This section provides a quick summary of the BPEL4WS syntax. It provides only a brief 
		overview; the details of each language construct are described in the rest of this document.
		</p><p>The basic structure of the language is:
		</p><div class="exampleInner"><pre>&lt;process name="ncname" targetNamespace="uri" 
         queryLanguage="anyURI"?
         expressionLanguage="anyURI"?
         suppressJoinFailure="yes|no"?
         enableInstanceCompensation="yes|no"?
         abstractProcess="yes|no"?
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"&gt;

  &lt;partnerLinks&gt;?
    &lt;!-- Note: At least one role must be specified. --&gt;
    &lt;partnerLink name="ncname" partnerLinkType="qname" 
             myRole="ncname"? partnerRole="ncname"?&gt;+
    &lt;/partnerLink&gt;
  &lt;/partnerLinks&gt;

  &lt;partners&gt;?
     &lt;partner name="ncname"&gt;+
      &lt;partnerLink name="ncname"/&gt;+
   &lt;/partner&gt;
  &lt;/partners&gt;

  &lt;variables&gt;?
    &lt;variable name="ncname" messageType="qname"?
                type="qname"? element="qname"?/&gt;+ 
  &lt;/variables&gt;

  &lt;correlationSets&gt;?
    &lt;correlationSet name="ncname" properties="qname-list"/&gt;+
  &lt;/correlationSets&gt;

  &lt;faultHandlers&gt;?
    &lt;!-- Note: There must be at least one fault handler or default. --&gt;
    &lt;catch faultName="qname"? faultVariable="ncname"?&gt;*
      <em>activity</em>
    &lt;/catch&gt;
    &lt;catchAll&gt;?
      <em>activity</em>
    &lt;/catchAll&gt;
  &lt;/faultHandlers&gt;

  &lt;compensationHandler&gt;?
    <em>activity</em>
  &lt;/compensationHandler&gt;

  &lt;eventHandlers&gt;?
    &lt;!-- Note: There must be at least one onMessage or onAlarm handler. --&gt;
    &lt;onMessage partnerLink="ncname" portType="qname"
               operation="ncname" variable="ncname"?&gt;
      &lt;correlations&gt;?
        &lt;correlation set="ncname" initiate="yes|no"?&gt;+
      &lt;correlations&gt;
      <em>activity</em>
    &lt;/onMessage&gt;
    &lt;onAlarm for="duration-expr"? until="deadline-expr"?&gt;*
      <em>activity</em>
    &lt;/onAlarm&gt;
  &lt;/eventHandlers&gt;
    
  <em>activity</em>
&lt;/process&gt;
		</pre></div><p>The top-level attributes are as follows:
		</p><ul><li><p>queryLanguage. This attribute specifies the XML query language used for 
			selection of nodes in assignment, property definition, and other uses. The default 
			for this attribute is XPath 1.0, represented by the URI of the XPath 1.0 specification: 
			<a href="http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/TR/1999/REC-xpath-19991116</a>.</p></li><li><p>expressionLanguage. This attribute specifies the expression language used in 
			the process. The default for this attribute is XPath 1.0, represented by the URI of 
			the XPath 1.0 specification:
			<a href="http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/TR/1999/REC-xpath-19991116</a>.</p></li><li><p>suppressJoinFailure. This attribute determines whether the joinFailure fault 
			will be suppressed for all activities in the process.  The effect of the attribute at 
			the process level can be overridden by an activity using a different value for the 
			attribute. The default for this attribute is "no".</p></li><li><p>enableInstanceCompensation. This attribute determines whether the process 
			instance as a whole can be compensated by platform-specific means. The default for 
			this attribute is "no".</p></li><li><p>abstractProcess. This attribute specifies whether the process being defined 
			is abstract (rather than executable). The default for this attribute is "no".</p></li></ul><p>The token "<em>activity</em>" can be any of the following:
		</p><ul><li><p>&lt;receive&gt;</p></li><li><p>&lt;reply&gt;</p></li><li><p>&lt;invoke&gt;</p></li><li><p>&lt;assign&gt;</p></li><li><p>&lt;throw&gt;</p></li><li><p>&lt;terminate&gt;&gt;</p></li><li><p>&lt;wait&gt;</p></li><li><p>&lt;empty&gt;&gt;</p></li><li><p>&lt;sequence&gt;</p></li><li><p>&lt;switch&gt;</p></li><li><p>&lt;while&gt;</p></li><li><p>&lt;pick&gt;</p></li><li><p>&lt;flow&gt;</p></li><li><p>&lt;scope&gt;&gt;</p></li><li><p>&lt;compensate&gt;</p></li></ul><p>The syntax of each of these elements, except &lt;terminate&gt;, is considered in the following 
		paragraphs.  Although &lt;terminate&gt; is permitted as an interpretation of the token activity, 
		it is only available in executable processes and as such is defined in the section on 
		<a href="#extensionsforexecutableprocesses"><b>14. Extensions for Executable Processes</b></a>.
		</p><p>The &lt;receive&gt; construct allows the business process to do a blocking wait for a 
		matching message to arrive.
		</p><div class="exampleInner"><pre>  &lt;receive partnerLink="ncname" portType="qname" operation="ncname"
           variable="ncname"? createInstance="yes|no"?
           <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
      &lt;correlation set="ncname" initiate="yes|no"?&gt;+
    &lt;/correlations&gt;
  &lt;/receive&gt;
		</pre></div><p>The &lt;reply&gt; construct allows the business process to send a message in reply 
		to a message that was received through a &lt;receive&gt;. The combination of a &lt;receive&gt; 
		and a &lt;reply&gt; forms a request-response operation on the WSDL portType for the process.
		</p><div class="exampleInner"><pre>  &lt;reply partnerLink="ncname" portType="qname" operation="ncname"
         variable="ncname"? faultName="qname"?
         <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
       &lt;correlation set="ncname" initiate="yes|no"?&gt;+
    &lt;/correlations&gt;
  &lt;/reply&gt;
		</pre></div><p>The &lt;invoke&gt; construct allows the business process to invoke a one-way or 
		request-response operation on a portType offered by a partner.
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="ncname" portType="qname" operation="ncname"
          inputVariable="ncname"? outputVariable="ncname"?
          <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
       &lt;correlation set="ncname" initiate="yes|no"? 
                    pattern="in|out|out-in"/&gt;+
    &lt;/correlations&gt;
    &lt;catch faultName="qname" faultVariable="ncname"?&gt;*
      <em>activity</em>
    &lt;/catch&gt;
    &lt;catchAll&gt;?
      <em>activity</em>
    &lt;/catchAll&gt;
    &lt;compensationHandler&gt;?
      <em>activity</em>
    &lt;/compensationHandler&gt;
  &lt;/invoke&gt;
		</pre></div><p>The &lt;assign&gt; construct can be used to update the values of variables with new data. 
		An &lt;assign&gt; construct can contain any number of elementary assignments. The syntax 
		of the assignment activity is:
		</p><div class="exampleInner"><pre>  &lt;assign <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;copy&gt;+
      from-spec
      to-spec
    &lt;/copy&gt;
  &lt;/assign&gt;
		</pre></div><p>The &lt;throw&gt; construct generates a fault from inside the business process.
		</p><div class="exampleInner"><pre>  &lt;throw faultName="qname" faultVariable="ncname"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/throw&gt;
		</pre></div><p>The &lt;wait&gt; construct allows you to wait for a given time period or until a certain 
		time has passed. Exactly one of the expiration criteria must be specified.
		</p><div class="exampleInner"><pre>  &lt;wait (for="duration-expr" | until="deadline-expr") <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/wait&gt;
		</pre></div><p>The &lt;empty&gt; construct allows you to insert a "no-op" instruction into a business 
		process. This is useful for synchronization of concurrent activities, for instance.
		</p><div class="exampleInner"><pre>  &lt;empty <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/empty&gt;
		</pre></div><p>The &lt;sequence&gt; construct allows you to define a collection of activities to be 
		performed sequentially in lexical order.
		</p><div class="exampleInner"><pre>  &lt;sequence <em>standard-attributes</em>&gt;
    <em>standard-elements</em><em>activity</em>+
  &lt;/sequence&gt;
		</pre></div><p>The &lt;switch&gt; construct allows you to select exactly one branch of activity 
		from a set of choices.
		</p><div class="exampleInner"><pre>  &lt;switch <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;case condition="bool-expr"&gt;+
      <em>activity</em>
    &lt;/case&gt;
    &lt;otherwise&gt;?
      <em>activity</em>
    &lt;/otherwise&gt;
  &lt;/switch&gt;
		</pre></div><p>The &lt;while&gt; construct allows you to indicate that an activity is to be repeated 
		until a certain success criteria has been met.
		</p><div class="exampleInner"><pre>  &lt;while condition="bool-expr" <em>standard-attributes</em>&gt;
     <em>standard-elements</em><em>activity</em>
  &lt;/while&gt;
		</pre></div><p>The &lt;pick&gt; construct allows you to block and wait for a suitable message to 
		arrive or for a time-out alarm to go off. When one of these triggers occurs, the associated 
		activity is performed and the pick completes.
		</p><div class="exampleInner"><pre>  &lt;pick createInstance="yes|no"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;onMessage partnerLink="ncname" portType="qname"
               operation="ncname" variable="ncname"?&gt;+
      &lt;correlations&gt;?
         &lt;correlation set="ncname" initiate="yes|no"?&gt;+
      &lt;/correlations&gt;
      <em>activity</em>
    &lt;/onMessage&gt;
    &lt;onAlarm (for="duration-expr" | until="deadline-expr")&gt;*
      <em>activity</em>
    &lt;/onAlarm&gt;
  &lt;/pick&gt;
		</pre></div><p>The &lt;flow&gt; construct allows you to specify one or more activities to be performed 
		concurrently. Links can be used within concurrent activities to define arbitrary control 
		structures.
		</p><div class="exampleInner"><pre>  &lt;flow <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;links&gt;?
      &lt;link name="ncname"&gt;+
    &lt;/links&gt;

    <em>activity</em>+
  &lt;/flow&gt;
		</pre></div><p>The &lt;scope&gt; construct allows you to define a nested activity with its own 
		associated variables, fault handlers, and compensation handler.
		</p><div class="exampleInner"><pre>&lt;scope variableAccessSerializable="yes|no" <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;variables&gt;?
      ... see above under &lt;process&gt; for syntax ...
    &lt;/variables&gt;
    &lt;correlationSets&gt;?
      ... see above under &lt;process&gt; for syntax ...
    &lt;/correlationSets&gt;
    &lt;faultHandlers&gt;?
      ... see above under &lt;process&gt; for syntax ...
    &lt;/faultHandlers&gt;
    &lt;compensationHandler&gt;?
      ... see above under &lt;process&gt; for syntax ...
    &lt;/compensationHandler&gt;
    &lt;eventHandlers&gt;?
      ...
    &lt;/eventHandlers&gt;
    <em>activity</em>
  &lt;/scope&gt;
		</pre></div><p>The &lt;compensate&gt; construct is used to invoke compensation on an inner scope that 
		has already completed normally. This construct can be invoked only from within a fault 
		handler or another compensation handler.
		</p><div class="exampleInner"><pre>  &lt;compensate scope="ncname"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/compensate&gt;
		</pre></div><p>Note that the "<em>standard-attributes</em>" referred to above are:
		</p><div class="exampleInner"><pre>  name="ncname"?
  joinCondition="bool-expr"?
  suppressJoinFailure="yes|no"?
		</pre></div><p>where the default values are as follows:
		</p><ul><li><p>name. No default value (that is, unnamed)</p></li><li><p>joinCondition. The logical OR of the liveness status of all links that are targeted at this <em>activity</em></p></li><li><p>suppressJoinFailure. No</p></li></ul><p>and that the "<em>standard-elements</em>" referred to above are:
		</p><div class="exampleInner"><pre>  &lt;target linkName="ncname"/&gt;*
  &lt;source linkName="ncname" transitionCondition="bool-expr"?/&gt;*
		</pre></div><p>where the default value of the "transitionCondition" attribute is "true()", the 
		truth-value function from the default expression language XPath 1.0.
		</p></div><div class="div2">
<h3><a name="languageextensibility"></a>6.3. Language Extensibility</h3><p>BPEL4WS contains constructs that are generally sufficient for expressing abstract and 
		executable business processes. In some cases, however, it might be necessary to "extend" 
		the BPEL4WS language with additional constructs from other XML namespaces.
		</p><p>BPEL4WS supports extensibility by allowing namespace-qualified attributes to appear 
		on any BPEL4WS element and by allowing elements from other namespaces to appear within 
		BPEL4WS defined elements. This is allowed in the XML Schema specifications for BPEL4WS.
		</p><p>Extensions MUST NOT change the semantics of any element or attribute from the BPEL4WS 
		namespace. 
		</p></div><div class="div2">
<h3><a name="thelifecycleofabusinessprocess"></a>6.4. The Lifecycle of a Business Process</h3><p>As noted in the introduction, the interaction model that is directly supported by WSDL 
		is essentially a stateless client-server model of synchronous or uncorrelated asynchronous 
		interactions. BPEL4WS, builds on WSDL by assuming that all external interactions of the 
		business process occur through Web Service operations. However, BPEL4WS business processes 
		represent stateful long-running interactions in which each interaction has a beginning, 
		defined behavior during its lifetime, and an end. For example, in a supply chain, a seller's 
		business process might offer a service that begins an interaction by accepting a purchase 
		order through an input message, and then returns an acknowledgement to the buyer if the 
		order can be fulfilled. It might later send further messages to the buyer, such as shipping 
		notices and invoices. The seller's business process remembers the state of each such purchase 
		order interaction separately from other similar interactions. This is necessary because a buyer 
		might be carrying on many simultaneous purchase processes with the same seller. In short, a 
		BPEL4WS business process definition can be thought of as a template for creating business 
		process instances.
		</p><p>The creation of a process instance in BPEL4WS is always implicit; activities that 
		receive messages (that is, <code>receive</code> activities and <code>pick</code> activities) 
		can be annotated to indicate that the occurrence of that activity causes a new instance of 
		the business process to be created. This is done by setting the <code>createInstance</code> 
		attribute of such an activity to "<code>yes</code>". When a message is received by such an 
		activity, an instance of the business process is created if it does not already exist 
		(see <a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a> and <a href="#pick"><b>12.4. Pick</b></a>).
		</p><p>To be instantiated, each business process must contain at least one such "start activity." 
		This must be an initial activity in the sense that there is no basic activity that logically 
		precedes it in the behavior of the process.
		</p><p>If more than one start activity is enabled concurrently, then all such activities must 
		use at least one correlation set and must use the same correlation sets (see 
		<a href="#correlation"><b>10. Correlation</b></a> and the <a href="#multiplestartactivities"><b>16.3. Multiple Start Activities</b></a> 
		example).
		</p><p>If exactly one start activity is expected to instantiate the process, the use of 
		correlation sets is unconstrained. This includes a <code>pick</code> with multiple 
		<code>onMessage</code> branches; each such branch can use different correlation sets or 
		no correlation sets.
		</p><p>A business process instance is terminated in one of the following ways:
		</p><ul><li><p>When the activity that defines the behavior of the process as a whole completes. 
			In this case the termination is normal.</p></li><li><p>When a fault reaches the process scope, and is either handled or not handled. 
			In this case the termination is considered abnormal even if the fault is handled and 
			the fault handler does not rethrow any fault. A compensation handler is never installed 
			for a scope that terminates abnormally.</p></li><li><p>When a process instance is explicitly terminated by a terminate activity 
			(see <a href="#terminatingaserviceinstance"><b>14.6. Terminating a Service Instance</b></a>). In this case the 
			termination is abnormal.</p></li><li><p>If a compensation handler is specified for the business process as a whole 
			(see <a href="#compensationhandlers"><b>13.3. Compensation Handlers</b></a>), a business process instance can 
			be compensated <em>after normal completion</em> by platform-specific means. 
			This functionality is enabled by setting the <code>enableInstanceCompensation</code> 
			attribute of the <code>process</code> to "<code>yes</code>". </p></li></ul></div></div><div class="div1">
<h2><a name="partnerlinktypespartnerlinksandendpointreferences"></a>7. Partner Link Types, Partner Links, and Endpoint References</h2><p>A very important, if not the most important, use case for BPEL4WS will be in describing 
	cross-enterprise business interactions in which the business processes of each enterprise 
	interact through Web Service interfaces with the processes of other enterprises. An important 
	requirement for realistic modeling of business processing in this environment is the ability to 
	model the required relationship with a partner process. WSDL already describes the functionality 
	of a service provided by a partner, at both the abstract and concrete levels. The relationship 
	of a business process to a partner is typically peer-to-peer, requiring a two-way dependency at 
	the service level. In other words, a partner represents both a consumer of a service provided by 
	the business process and a provider of a service to the business process. This is especially the 
	case when the interactions are based on asynchronous messaging rather than on remote procedure 
	calls. The notion of Partner links is used to directly model peer-to-peer conversational partner 
	relationships.  Partner links define the shape of a relationship with a partner by defining the 
	message and port types used in the interactions in both directions.  However, the actual partner 
	service may be dynamically determined within the process.  BPEL4WS uses a notion of endpoint 
	reference <a href="#ref16">[WS-Addressing]</a> to represent the dynamic data required to describe a partner 
	service endpoint.
	</p><p>It is important to emphasize that the notions of partner link and endpoint reference 
	used here are preliminary.  The specification for these concepts as they relate to Web 
	Services is still evolving, and we expect normative definitions for them to emerge in future.  
	The BPEL4WS specification will be updated to conform to the expected future standards.
	</p><div class="div2">
<h3><a name="partnerlinktypes"></a>7.1. Partner Link Types</h3><p>A partner link type characterizes the conversational relationship between two services 
		by defining the "roles" played by each of the services in the conversation and specifying 
		the portType provided by each service to receive messages within the context of the 
		conversation. The following example illustrates the basic syntax of a partner link type 
		declaration:
		</p><div class="exampleInner"><pre>&lt;partnerLinkType name="BuyerSellerLink"
        xmlns="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"&gt;
  &lt;role name="Buyer"&gt;
    &lt;portType name="buy:BuyerPortType"/&gt;
  &lt;/role&gt;
  &lt;role name="Seller"&gt;
    &lt;portType name="sell:SellerPortType"/&gt;
  &lt;/role&gt;
&lt;/partnerLinkType&gt;
		</pre></div><p>Each role specifies exactly one WSDL portType.
		</p><p>In the common case, portTypes of the two roles originate from separate namespaces. 
		However, in some cases, both roles of a partner link type can be defined in terms of 
		portTypes from the same namespace. The latter situation occurs for partner link types 
		that define "callback" relationships between services.
		</p><p>The partner link type definition can be a separate artifact independent of either 
		service's WSDL document. Alternatively, the partner link type definition can be placed 
		within the WSDL document defining the portTypes from which the different roles are defined.
		</p><p>The extensibility mechanism of WSDL 1.1 is used to define partnerLinkType as a new 
		definition type to be placed as an immediate child element of a &lt;wsdl:definitions&gt; element 
		in all cases. This allows reuse of the WSDL target namespace specification and, more 
		importantly, its import mechanism to import portTypes. For cases where a partnerLinkType 
		declaration is linking the portTypes of two different services, the partnerLinkType declaration 
		can be placed in a separate WSDL document (with its own targetNamespace).
		</p><p>The syntax for defining a partnerLinkType is:
		</p><div class="exampleInner"><pre>&lt;definitions name="ncname" targetNamespace="uri"
     xmlns="http://schemas.xmlsoap.org/wsdl/"
     xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"&gt;
  ...
  &lt;plnk:partnerLinkType name="ncname"&gt;
    &lt;plnk:role name="ncname"&gt;
      &lt;plnk:portType name="qname"/&gt;
    &lt;/plnk:role&gt;
    &lt;plnk:role name="ncname"&gt;?
      &lt;plnk:portType name="qname"/&gt;
    &lt;/plnk:role&gt;
  &lt;/plnk:partnerLinkType&gt;
  ...
&lt;/definitions&gt;
		</pre></div><p>This defines a partner link type in the namespace indicated by the value of the 
		"targetNamespace" attribute of the WSDL document element. The portTypes identified within 
		roles are referenced by using QNames as for all top-level WSDL definitions.
		</p><p>Note that in some cases it can be meaningful to define a partner link type containing 
		exactly one role instead of two. That defines a partner linking scenario where one service 
		expresses a willingness to link with any other service, without placing any requirements on 
		the other service.
		</p><p>Examples of partnerLinkType declarations are found in various business process examples 
		in this specification.
		</p></div><div class="div2">
<h3><a name="partnerlinks"></a>7.2. Partner Links</h3><p>The services with which a business process interacts are modeled as partner links in 
		BPEL4WS. Each partner link is characterized by a partnerLinkType. More than one partner 
		link can be characterized by the same partnerLinkType. For example, a certain procurement 
		process might use more than one vendor for its transactions, but might use the same 
		partnerLinkType for all vendors. 
		</p><div class="exampleInner"><pre>  &lt;partnerLinks&gt;
    &lt;partnerLink name="ncname" partnerLinkType="qname" 
             myRole="ncname"? partnerRole="ncname"?&gt;+
    &lt;/partnerLink&gt;
  &lt;/partnerLinks&gt;
		</pre></div><p>Each partnerLink is named, and this name is used for all service interactions via that 
		partnerLink. This is critical, for example, in correlating responses to different partnerLinks 
		for simultaneous requests of the same kind (see 
		<a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a> and 
		<a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>).
		</p><p>The role of the business process itself is indicated by the attribute <code>myRole</code> 
		and the role of the partner is indicated by the attribute <code>partnerRole</code>. In the 
		degenerate case where a partnerLinkType has only one role, one of these attributes is omitted 
		as appropriate.
		</p><p>Note that the partnerLink declarations specify the <em>static shape</em> of the 
		relationships that the BPEL4WS process will employ in its behavior. Before operations on a 
		partner's service can be invoked via a partnerLink, the binding and communication data for 
		the partner service must be available. The relevant information about a partner service can 
		be set as part of business process deployment. This is outside the scope of BPEL4WS. However, 
		it is also possible to select and assign actual partner services dynamically, and BPEL4WS 
		provides the mechanisms to do so via assignment of endpoint references. In fact, because 
		the partners are likely to be stateful, the service endpoint information needs to be extended 
		with instance-specific information. BPEL4WS allows the endpoint references implicitly present 
		in partnerLinks to be both extracted and assigned dynamically, and also to be set more than once. 
		See <a href="#assignment"><b>9.3. Assignment</b></a> for the mechanisms used for dynamic assignment of 
		endpoint references to partner services.
		</p></div><div class="div2">
<h3><a name="businesspartners"></a>7.3. Business Partners</h3><p>While a partner link represents a conversational relationship between two partner processes, 
		relationships with a business partner in general require more than a single conversational 
		relationship to be established. To represent the capabilities required from a business 
		partner, BPEL4WS uses the <code>partner</code> element. A partner is defined as a subset 
		of the partner links of the process, as shown in the example below.
		</p><div class="exampleInner"><pre> 
&lt;partner name="SellerShipper"
        xmlns="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"&gt;
  &lt;partnerLink name="Seller"/&gt;
  &lt;partnerLink name="Shipper"/&gt;
&lt;/partner&gt;
		</pre></div><p>Partner definitions are optional and need not cover all the partner links defined 
		in the process. From the process perspective a partner definition introduces a constraint 
		on the functionality that a business partner is required to provide. In the example above, 
		the partner definition states that the same business partner ("SellerShipper") is required 
		to provide the services associated with the the roles of seller and shipper. Partner 
		definitions MUST NOT overlap, that is, a partner link MUST NOT appear in more than one 
		partner definition.
		</p><p>The syntax for partner definitions is given below:
		</p><div class="exampleInner"><pre>&lt;partners&gt;
  &lt;partner name="ncname"&gt;+
    &lt;partnerLink name="ncname"/&gt;+
  &lt;/partner&gt;
&lt;/partners&gt;
		</pre></div></div><div class="div2">
<h3><a name="endpointreferences"></a>7.4. Endpoint References</h3><p>WSDL makes an important distinction between portTypes and ports. PortTypes define abstract 
		functionality by using abstract messages. Ports provide actual access information, including 
		communication endpoints and (by using extension elements) other deployment-related information 
		such as public keys for encryption. Bindings provide the glue between the two. While the user 
		of a service must be statically dependent on the abstract interface defined by portTypes, 
		some of the information contained in port definitions can typically be discovered and used 
		dynamically.
		</p><p>The fundamental use of endpoint references is to serve as the mechanism for dynamic 
		communication of port-specific data for services. An endpoint reference makes it possible 
		in BPEL4WS to dynamically select a provider for a particular type of service and to invoke 
		their operations. BPEL4WS provides a general mechanism for correlating messages to stateful 
		<em>instances</em> of a service, and therefore endpoint references that carry 
		instance-neutral port information are often sufficient. However, in general it is necessary 
		to carry additional instance-identification tokens in the endpoint reference itself.
		</p><p>BPEL4WS uses the notion of endpoint reference defined in <a href="#ref16">[WS-Addressing]</a>.  Every 
		partner role in a partnerLink in a BPEL4WS process instance is assigned a unique endpoint 
		reference in the course of the deployment of the process or dynamically by an activity 
		within the process.
		</p></div></div><div class="div1">
<h2><a name="messageproperties"></a>8. Message Properties</h2><div class="div2">
<h3><a name="motivation"></a>8.1. Motivation</h3><p>The data in a message consists conceptually of two parts: application data and 
		protocol-relevant data, where the protocols can be <em>business</em> protocols or 
		<em>infrastructure</em> protocols providing higher quality of service. An example of 
		business protocol data is the correlation tokens that are used in correlation sets 
		(see <a href="#correlation"><b>10. Correlation</b></a>). Examples of infrastructure protocols are security, 
		transaction, and reliable messaging protocols. The business protocol data is usually found 
		embedded in the application-visible message parts, whereas the infrastructure protocols 
		almost always add <em>implicit</em> extra parts to the message types to represent protocol headers 
		that are separate from application data. Such implicit parts are often called <em>message 
		context</em> because they relate to security context, transaction context, and other similar 
		middleware context of the interaction. Business processes might need to gain access to 
		and manipulate both kinds of protocol-relevant data. The notion of message properties is 
		defined as a general way of naming and representing distinguished data elements within a 
		message, whether in application-visible data or in message context. For a full accounting 
		of the service description aspects of infrastructure protocols, it is necessary to define 
		notions of service policies, endpoint properties, and message context. This work is outside 
		the scope of BPEL4WS. Message properties are defined here in a sufficiently general way to 
		cover message context consisting of implicit parts, but the use in this specification 
		focuses on properties embedded in application-visible data that is used in the definition 
		of business protocols and abstract business processes.
		</p></div><div class="div2">
<h3><a name="definingproperties"></a>8.2. Defining Properties</h3><p>A property definition creates a globally unique name and associates it with an XML Schema 
		simple type. The intent is not to create a new type. The intent is to create a name that has 
		greater significance than the type itself. For example, a sequence number can be an integer, 
		but the integer type does not convey this significance, whereas a globally named sequence-number 
		property does. Properties can occur anywhere in a message, including in the message context.
		</p><p>A typical use for a property in BPEL4WS is to name a token for correlation of service 
		instances with messages. For example, a social security number might be used to identify an 
		individual taxpayer in a long-running multiparty business process regarding a tax matter. A 
		social security number can appear in many different message types, but in the context of a 
		tax-related process it has a specific significance as a taxpayer ID. Therefore a global name 
		is given to this use of the type by defining a property, as in the following example:
		</p><div class="exampleInner"><pre>&lt;definitions name="properties"
      targetNamespace="http://example.com/properties.wsdl"
      xmlns:tns="http://example.com/properties.wsdl"
      xmlns:txtyp="http://example.com/taxTypes.xsd"
      xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
      xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;

    &lt;!-- define a correlation property --&gt;
    &lt;bpws:property name="taxpayerNumber"
                               type="txtyp:SSN"/&gt;
    ...
&lt;/wsdl:definitions&gt;
		</pre></div><p>In correlation, the property name must have global significance to be of any use. Properties 
		such as price, risk, response latency, and so on, which are used in conditional behavior in 
		a business process, have similar global and public significance. It is likely that they will 
		be mapped to multiple messages, and therefore they need to be globally named as in the case 
		of correlation properties. Such properties are essential, especially in abstract processes.
		</p><p>The WSDL extensibility mechanism is used to define properties so that the target namespace 
		and other useful aspects of WSDL are available. The BPEL4WS standard namespace, 
		"<code>http://schemas.xmlsoap.org/ws/2003/03/business-process/</code>", is used for property 
		definitions. The syntax for a property definition is a new kind of WSDL definition as follows:
		</p><div class="exampleInner"><pre>&lt;wsdl:definitions name="ncname"
   xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"&gt;
    &lt;bpws:property name="ncname" type="qname"/&gt;
    ...
&lt;/wsdl:definitions&gt;
		</pre></div><p>Properties used in business protocols are typically embedded in application-visible 
		message data. The notion of aliasing is introduced to map a global property to a field in 
		a specific message part. The property name becomes an alias for the message part and 
		location, and can be used as such in 
		<a href="#expressions"><b>9.1. Expressions</b></a> and <a href="#assignment"><b>9.3. Assignment</b></a> in abstract 
		business processes.
		</p><div class="exampleInner"><pre>&lt;definitions name="properties"
         targetNamespace="http://example.com/properties.wsdl"
         xmlns:tns="http://example.com/properties.wsdl"
         xmlns:txtyp="http://example.com/taxTypes.xsd"
         xmlns:txmsg="http://example.com/taxMessages.wsdl"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;

    &lt;!-- define a correlation property --&gt;
    &lt;bpws:property name="taxpayerNumber" type="txtype:SSN"/&gt;
     ...
    &lt;bpws:propertyAlias propertyName="tns:taxpayerNumber"   
       messageType="txmsg:taxpayerInfo" part="identification" 
       query="/socialsecnumber"/&gt;
    &lt;/bpws:propertyAlias&gt;
&lt;/definitions&gt;
		</pre></div><p>The <code>bpws:propertyAlias</code> defines a globally named property 
		<code>tns:taxpayerNumber</code> as an alias for a location in the <code>identification</code> part 
		of the message type <code>txmsg:taxpayerInfo</code>.
		</p><p>The syntax for a propertyAlias definition is:
		</p><div class="exampleInner"><pre>&lt;definitions name="ncname"
          ...
      xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"&gt;
 
    &lt;bpws:propertyAlias propertyName="qname" 
            messageType="qname" part="ncname" query="queryString"/&gt;
    ...
&lt;/wsdl:definitions&gt;
		</pre></div><p>The interpretation of the <code>message</code>, <code>part</code>, and <code>query</code> 
		attributes is the same as in the corresponding <em>from-spec</em> in copy assignments 
		(see <a href="#assignment"><b>9.3. Assignment</b></a>).
		</p></div></div><div class="div1">
<h2><a name="datahandling"></a>9. Data Handling</h2><p>Business processes model stateful interactions. The state involved consists of messages 
	received and sent as well as other relevant data such as time-out values. The maintenance of 
	the state of a business process requires the use of state variables, which are called 
	<em>variables</em> in BPEL4WS.  Furthermore, the data from the state needs to be extracted 
	and combined in interesting ways to control the behavior of the process, which requires data 
	expressions. Finally, state update requires a notion of assignment. BPEL4WS provides these 
	features for XML data types and WSDL message types. The XML family of standards in these 
	areas is still evolving, and using the process-level attributes for query and expression 
	languages provides for the incorporation of future standards.
	</p><p>The extensions required for abstract and executable processes are concentrated in the 
	data-handling feature set. Executable processes are permitted to use the full power of data 
	selection and assignment but are not permitted to use nondeterministic values. Abstract 
	processes are restricted to limited manipulation of values contained in message properties 
	but are permitted to use nondeterministic values to reflect the consequences of hidden 
	private behavior. Detailed differences are specified in the following sections.
	</p><div class="div2">
<h3><a name="expressions"></a>9.1. Expressions</h3><p>BPEL4WS uses several types of expressions. The kinds of expressions used are as follows 
		(relevant usage contexts are listed in parentheses):
		</p><ul><li><p>Boolean-valued expressions (transition conditions, join conditions, while condition, 
			and switch cases)</p></li><li><p>Deadline-valued expressions ("until" attribute of onAlarm and wait)</p></li><li><p>Duration-valued expressions ("for" attribute of onAlarm and wait)</p></li><li><p>General expressions (assignment)</p></li></ul><p>BPEL4WS provides an extensible mechanism for the language used in these expressions. 
		The language is specified by the <code>expressionLanguage</code> attribute of the 
		<code>process</code> element. Compliant implementations of the current version of 
		BPEL4WS MUST support the use of XPath 1.0 as the expression language. XPath 1.0 is indicated 
		by the default value of the <code>expressionLanguage</code> attribute, which is:
		</p><p><a href="http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/TR/1999/REC-xpath-19991116</a></p><p>Given an expression language, it must be possible to query data from variables, to extract 
		property values, and to query the status of links from within expressions. This specification 
		defines those functions for XPath 1.0 only, and it is expected that other expression-language 
		bindings will provide equivalent functionality. The rest of this section is specific to 
		XPath 1.0.
		</p><p>BPEL4WS introduces several extension functions to XPath's built-in functions to enable 
		XPath 1.0 expressions to access information from the process. The extensions are defined 
		in the standard BPEL4WS namespace 
		"<code>http://schemas.xmlsoap.org/ws/2003/03/business-process/</code>". The prefix 
		"<code>bpws:</code>" is associated with this namespace.
		</p><p>Any qualified names used within XPath expressions are resolved by using namespace 
		declarations currently in scope in the BPEL4WS document at the location of the expression.
		</p><p>The following functions are defined by this specification:
		</p><div class="exampleInner"><pre>bpws:getVariableProperty ('variableName', 'propertyName')
		</pre></div><p>This function extracts global property values from variables. The first argument names 
		the source variable for the data and the second is the qualified name (QName) of the global 
		property to select from that variable (see <a href="#messageproperties"><b>8. Message Properties</b></a>). If the given 
		property does not appear in any of the parts of the variable's message type, then the semantics of 
		the process is undefined.  The return value of this function is a node set containing the single 
		node representing the property. If the given property definition selects a node set of a size 
		other than one, then the semantics of the process is undefined.
		</p><div class="exampleInner"><pre>bpws:getLinkStatus ('linkName') 
		</pre></div><p>This function returns a Boolean indicating the status of the link (see 
		<a href="#linksemantics"><b>12.5.1. Link Semantics</b></a>). If the status of the link is positive the value 
		is true, and if the status is negative the value is false. This function MUST NOT be used 
		anywhere except in a join condition. The linkName argument MUST refer to the name of an 
		incoming link for the activity associated with the join condition. These restrictions MUST 
		be statically enforced.
		</p><p>These BPEL4WS-defined extension functions are available for use within all XPath 
		1.0 expressions.
		</p><p>The syntax of XPath 1.0 expressions for BPEL4WS is considered in the following paragraphs.
		</p><div class="div3">
<h4><a name="booleanexpressions"></a>9.1.1. Boolean Expressions</h4><p>These are expressions that conform to the XPath 1.0 
			<a href="http://www.w3.org/TR/xpath.html#NT-Expr">Expr</a>  
			production where the evaluation results in Boolean values.
			</p></div><div class="div3">
<h4><a name="deadlinevaluedexpressions"></a>9.1.2. Deadline-Valued Expressions</h4><p>These are expressions that conform to the XPath 1.0
			<a href="http://www.w3.org/TR/xpath.html#NT-Expr">Expr</a> production where 
			the evaluation results in values that are of the XML Schema types 
			<em><a href="http://www.w3.org/TR/xmlschema-2/#dateTime">dateTime</a></em> or 
			<em><a href="http://www.w3.org/TR/xmlschema-2/#date">date</a></em>. Note that 
			XPath 1.0 is not XML Schema aware. As such, none of 
			the built-in functions of XPath 1.0 are capable of producing or manipulating dateTime 
			or date values. However, it is possible to write a constant (literal) that conforms 
			to XML Schema definitions and use that as a deadline value or to extract a field from 
			a variable (part) of one of these types and use that as a deadline value. XPath 1.0 
			will treat that literal as a string literal, but the result can be interpreted as a 
			<a href="http://www.w3.org/TR/xmlschema-2/#dateTime-lexical-repr">lexical representation</a> 
			of a dateTime or date value.
			</p></div><div class="div3">
<h4><a name="durationvaluedexpressions"></a>9.1.3. Duration-Valued Expressions</h4><p>These are expressions that conform to the XPath 1.0 
			<a href="http://www.w3.org/TR/xpath.html#NT-Expr">Expr</a> production where the 
			evaluation results in values that are of the XML Schema type 
			<em><a href="http://www.w3.org/TR/xmlschema-2/#duration">duration</a></em>. 
			The preceding discussion about XPath 1.0's XML Schema unawareness applies here as well. 
			</p></div><div class="div3">
<h4><a name="generalexpressions"></a>9.1.4. General Expressions</h4><p>These are expressions that conform to the XPath 1.0 
			<a href="http://www.w3.org/TR/xpath.html#NT-Expr">Expr</a> production where 
			the evaluation results in any XPath value type (string, number, or Boolean).
			</p><p>Expressions with operators are restricted as follows:
			</p><ul><li><p>All numeric values including arbitrary constants are permitted with the 
				equality or relational operators (&lt;, &lt;=, =, !=, &gt;=, &gt;).</p></li><li><p>Values of integral (short, int, long, unsignedShort, and so on) type including 
				constants are permitted in numeric expressions, provided that only integer arithmetic 
				is performed. In practice, this means that division is disallowed. It is difficult to 
				enforce this restriction in XPath 1.0 because XPath 1.0 lacks integral support for 
				types. The restriction should be taken as a statement of intent that will be enforced 
				in the future when expression languages with more refined type systems become available. 
				</p></li><li><p>Only equality operators (=, !=) are permitted when used with values of string 
				type including constants.</p></li></ul><p>These restrictions reflect XPath 1.0 syntax and semantics. Future alternative standards 
			in this space are expected to provide stronger type systems and therefore support more 
			nuanced constraints. The restrictions are motivated by the fact that XPath general 
			expressions are meant to be used to perform business protocol-related computation such 
			as retry loops, line-item counts, and so on, that must be transparent in the process 
			definition. They are not meant to provide arbitrary computation. This is the motivation 
			for the constraint that numerical expressions deal only with integer computation, and for 
			disallowing arbitrary string manipulation through expressions.
			</p></div></div><div class="div2">
<h3><a name="variables"></a>9.2. Variables</h3><p>Business processes specify stateful interactions involving the exchange of messages 
		between partners. The state of a business process includes the messages that are exchanged 
		as well as intermediate data used in business logic and in composing messages sent to 
		partners.
		</p><p>Variables provide the means for holding messages that constitute the state of a business 
		process. The messages held are often those that have been received from partners or are to 
		be sent to partners. Variables can also hold data that are needed for holding state related 
		to the process and never exchanged with partners.
		</p><p>The type of each variable may be a WSDL message type, an XML Schema simple type or an 
		XML Schema element. The syntax of the <code>variables</code> declaration is:
		</p><div class="exampleInner"><pre>  &lt;variables&gt;
    &lt;variable name="ncname" messageType="qname"?
                type="qname"? element="qname"?/&gt;+
  &lt;/variables&gt;
		</pre></div><p>The name of a variable should be unique within its own scope. If a local variable has 
		the same name and same messageType/type/element as a variable defined in an enclosing scope, 
		the local variable will be used in local assignments and/or getVariableProperty functions. 
		It is not permitted to have variables with same name but different messageType/type/element 
		within an enclosing scope hierarchy. The behavior of such variables is not defined.
		</p><p>The <code>messageType</code>, <code>type</code> or <code>element</code> attributes are 
		used to specify the type of a variable. Exactly one of these attributes must be used. 
		Attribute <code>messageType</code> refers to a WSDL message type definition. Attribute 
		type refers to an XML Schema simple type. Attribute element refers to an XML Schema element. 
		An XML Schema complex type must be associated with an element to be used by a BPEL4WS 
		variable. 
		</p><p>An example of a variable declaration using a message type declared in a WSDL document with 
		the targetNamespace "http://example.com/orders":
		</p><div class="exampleInner"><pre>  &lt;variable   xmlns:ORD="<em>http://example.com/orders</em>"
               name="orderDetails" messageType="ORD:orderDetails"/&gt;
		</pre></div><p>Variables associated with message types can be specified as input or output variables 
		for invoke, receive, and reply activities (see <a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a> 
		and <a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>). When an invoke operation returns 
		a fault message, this causes a fault in the current scope. The fault variable in the corresponding 
		fault handler is initialized with the fault message received (see <a href="#scopes"><b>13. Scopes</b></a> 
		and <a href="#faulthandlers"><b>13.4. Fault Handlers</b></a>).
		</p><p>Each variable is declared within a scope and is said to belong to that scope.  Variables 
		that belong to the global process scope are called global variables.  Variables may also 
		belong to other, non-global scopes, and such variables are called local variables.   Each 
		variable is visible only in the scope in which it is defined and in all scopes nested within 
		the scope it belongs to.  Thus, global variables are visible throughout the process.  It is 
		possible to "hide" a variable in an outer scope by declaring a variable with an identical 
		name in an inner scope.  These rules are exactly analogous to those in programming languages 
		with lexical scoping of variables.
		</p><p>A global variable is in an uninitialized state at the beginning of a process. A local 
		variable is in an uninitialized state at the start of the scope it belongs to.  Note that 
		non-global scopes in general start and complete their behavior more than once in the lifetime 
		of the process instance they belong to.  Variables can be initialized by a variety of means 
		including assignment and receiving a message. Variables can be partially initialized with 
		property assignment or when some but not all parts in the message type of the variable are 
		assigned values.
		</p></div><div class="div2">
<h3><a name="assignment"></a>9.3. Assignment</h3><p>Copying data from one variable to another is a common task within a business process. 
		The <em>assign</em> activity can be used to copy data from one variable to another, as 
		well as to construct and insert new data using expressions.  The use of expressions is 
		primarily motivated by the need to perform simple computation (such as incrementing sequence 
		numbers) that is required for describing business protocol behavior. Expressions operate on 
		message selections, properties, and literal constants to produce a new value for a variable 
		property or selection.  Finally, this activity can also be used to copy endpoint references 
		to and from partner links.
		</p><p>The <em>assign</em> activity contains one or more elementary assignments.
		</p><div class="exampleInner"><pre>  &lt;assign <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;copy&gt;+
      from-spec
      to-spec
    &lt;/copy&gt;
  &lt;/assign&gt;
		</pre></div><p>The assign activity copies a type-compatible value from the source ("from-spec") to 
		the destination ("to-spec"). The <em>from-spec</em> MUST be one of the following forms 
		except for the opaque form available in abstract processes:
		</p><div class="exampleInner"><pre>&lt;from variable="ncname" part="ncname"?/&gt;
&lt;from partnerLink="ncname" endpointReference="myRole|partnerRole"/&gt;
&lt;from variable="ncname" property="qname"/&gt;
&lt;from expression="general-expr"/&gt;
&lt;from&gt; ... literal value ... &lt;/from&gt;
		</pre></div><p>The <em>to-spec</em> MUST be one of the following forms:
		</p><div class="exampleInner"><pre>&lt;to variable="ncname" part="ncname"?/&gt;
&lt;to partnerLink="ncname"/&gt;
&lt;to variable="ncname" property="qname"/&gt;
		</pre></div><p>In the first <em>from-spec</em> and <em>to-spec</em> variants the variable attribute 
		provides the name of a variable. If the type of the variable is a WSDL messge type  the optional 
		part attribute MAY be used to provide the name of a part within that variable. When the variable 
		is defined using XML Schema simple type or element, the part attribute MUST NOT be used.
		</p><p>The second <em>from-spec</em> and <em>to-spec</em> variants allow dynamic manipulation 
		of the endpoint references associated with partner links. The value of the partnerLink 
		attribute is the name of a partnerLink declared in the process. In the case of from-specs, 
		the role must also be specified because a process might need to communicate an endpoint 
		reference corresponding to either its own role or the partner's role within the partnerLink. 
		The value "<em>myRole</em>" means that the endpoint reference of the process with respect 
		to that partnerLink is the source, while the value "<em>partnerRole</em>" means that the 
		partner's endpoint reference for the partnerLink is the source. For the to-spec, the assignment 
		is only possible to the partnerRole, hence there is no need to specify the role. The type of 
		the value used in partnerLink-style from/to-specs is always an endpoint reference 
		(see <a href="#partnerlinktypespartnerlinksandendpointreferences"><b>7. Partner Link Types, Partner Links, and Endpoint References</b></a>).
		</p><p>The third <em>from-spec</em> and <em>to-spec</em> variants allow explicit 
		manipulation of message properties (see <a href="#messageproperties"><b>8. Message Properties</b></a>) occurring in 
		variables. The property forms are especially useful for abstract processes, because they 
		provide a way to clearly define how distinguished data elements in messages are being used.
		</p><p>The fourth ("expression") <em>from-spec</em> variant allows processes to perform 
		simple computations on properties and variables (for example, increment a sequence number).
		</p><p>The fifth <em>from-spec</em> variant allows a literal value to be given as the 
		source value to assign to a destination. The type of the literal value MUST be the type 
		of the destination (to-spec). The type of the literal value MAY be optionally indicated 
		inline with the value by using XML Schema's instance type mechanism (<em>xsi:type</em>).
		</p><div class="div3">
<h4><a name="typecompatibilityinassignment"></a>9.3.1. Type Compatibility in Assignment</h4><p>For an assignment to be valid, the data referred to by the from and to specifications 
			MUST be of compatible types. The following points make this precise:
			</p><ul><li><p>The from-spec is a variable of a WSDL message type and the to-spec is a 
				variable of  a WSDL message type.  In this case both variables MUST be of the same 
				message type, where two message types are said to be equal if their qualified names 
				are the same.</p></li><li><p>The from-spec is a variable of a WSDL message type and the to-spec is not, 
				or <em>vice versa</em>. This is not legal because parts of variables, selections 
				of variable parts, or endpoint references cannot be assigned to/from variables of 
				WSDL message types directly.</p></li><li><p>In all other cases, the types of the source and destination are XML Schema 
				types or elements, and the constraint is that the source value MUST possess the 
				element or type  associated with the destination. Note that this does not require 
				the types associated with the source and destination to be the same. In particular, 
				the source type MAY be a subtype of the destination type.  In the case of variables 
				defined by reference to an element, moreover, both the source and the target MUST 
				be the same element.</p></li></ul><p>The semantics of a process in which any of the matching constraints above is violated 
			is undefined.
			</p></div><div class="div3">
<h4><a name="assignmentexample"></a>9.3.2. Assignment Example</h4><p>The example assumes the following complex type definition in the namespace 
			"http://tempuri.org/bpws/example":
			</p><div class="exampleInner"><pre>&lt;complexType name="tAddress"&gt;
  &lt;sequence&gt;
    &lt;element name="number" type="xsd:int"/&gt;
    &lt;element name="street" type="xsd:string"/&gt;
    &lt;element name="city" type="xsd:string"/&gt;
    &lt;element name="phone"&gt;
      &lt;complexType&gt;
        &lt;sequence&gt;
          &lt;element name="areacode" type="xsd:int"/&gt;
          &lt;element name="exchange" type="xsd:int"/&gt;
          &lt;element name="number" type="xsd:int"/&gt;
        &lt;/sequence&gt;
      &lt;/complexType&gt;
    &lt;/element&gt;
  &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;element name = "address" type = "tAddress"/&gt;
			</pre></div><p>Assume that the following WSDL message definition exists for the same target namespace:
			</p><div class="exampleInner"><pre>&lt;message name="person" xmlns:x="http://tempuri.org/bpws/example"&gt;
  &lt;part name="full-name" type="xsd:string"/&gt;
  &lt;part name="address" element="x:address"/&gt;
&lt;/message&gt;
			</pre></div><p>Also assume the following BPEL4WS variable declarations:
			</p><div class="exampleInner"><pre>&lt;variable name="c1" messageType="x:person"/&gt;
&lt;variable name="c2" messageType="x:person"/&gt;
&lt;variable name="c3" element="x:address"/&gt;
			</pre></div><p>The example illustrates copying one variable to another as well as copying a 
			variable part to a variable of compatible element type:
			</p><div class="exampleInner"><pre>&lt;assign&gt;
  &lt;copy&gt;
    &lt;from variable="c1"/&gt;
    &lt;to variable="c2"/&gt;
  &lt;/copy&gt;
  &lt;copy&gt;
    &lt;from variable="c1" part = "address"/&gt;
    &lt;to variable="c3"/&gt;
  &lt;/copy&gt;
&lt;/assign&gt;
			</pre></div></div></div></div><div class="div1">
<h2><a name="correlation"></a>10. Correlation</h2><p>The information provided so far suggests that the target for messages that are delivered 
	to a business process service is the WSDL port of the recipient service. This is an illusion 
	because, by their very nature, stateful business processes are <em>instantiated</em> to act in accordance 
	with the history of an extended interaction. Therefore, messages sent to such processes need 
	to be delivered not only to the correct destination port, but also to the correct <em>instance</em> of 
	the business process that provides the port. The infrastructure hosting the process must do 
	this in a generic manner, to avoid burdening every process implementation with the need to 
	implement a custom mechanism for instance routing. Messages, which create a new business process 
	instance, are a special case, as described in <a href="#thelifecycleofabusinessprocess"><b>6.4. The Lifecycle of a Business Process</b></a>.
	</p><p>In the object-oriented world, such stateful interactions are mediated by <em>object references</em>, 
	which intrinsically provide the ability to reach a specific object (instance) with the right state 
	and history for the interaction. This works reasonably well in tightly coupled implementations 
	where a dependency on the structure of the implementation is normal. In the loosely coupled world 
	of Web Services, the use of such references would create a fragile web of implementation dependencies 
	that would not survive the independent evolution of business process implementation details at each 
	business partner. In this world, the answer is to rely on the business data and communication 
	protocol headers that define the wire-level contract between partners and to avoid the use of 
	implementation-specific tokens for instance routing whenever possible.
	</p><p>Consider the usual supply-chain situation where a buyer sends a purchase order to a 
	seller. Suppose that the buyer and seller have a stable business relationship and are statically 
	configured to send documents related to the purchasing interaction to the URLs associated with 
	the relevant WSDL service ports. The seller needs to asynchronously return an acknowledgement for 
	the order, and the acknowledgement must be routed to the correct business process instance at the 
	buyer. The obvious and standard mechanism to do this is to carry a business token in the order 
	message (such as a purchase order number) that is copied into the acknowledgement for correlation. 
	The token can be in the message envelope in a header or in the business document (purchase order) 
	itself. In either case, the exact location and type of the token in the relevant messages is fixed 
	and instance independent. Only the value of the token is instance dependent. Therefore, the structure 
	and position of the correlation tokens in each message can be expressed declaratively in the business 
	process description. The BPEL4WS notion of correlation set, described in the following section, 
	provides this feature. The declarative information allows a BPEL4WS-compliant infrastructure to 
	use correlation tokens to provide instance routing automatically.
	</p><p>The declarative specification of correlation relies on declarative properties of messages. 
	A property is simply a "field" within a message identified by a query-by default the query language 
	is XPath 1.0. This is only possible when the type of the message part or binding element is described 
	by using an XML Schema. The use of correlation tokens and endpoint references is restricted to 
	message parts described in this way. To be clear, the actual wire format of such types can still 
	be non-XML, for example, EDI flat files, based on different bindings for port types.
	</p><div class="div2">
<h3><a name="messagecorrelation"></a>10.1. Message Correlation</h3><p>During its lifetime, a business process instance typically holds one or more conversations 
		with partners involved in its work. Conversations may be based on sophisticated transport 
		infrastructure that correlates the messages involved in a conversation by using some form 
		of conversation identity and routes them automatically to the correct service instance without 
		the need for any annotation within the business process. However, in many cases correlated 
		conversations involve more than two parties or use lightweight transport infrastructure with 
		correlation tokens embedded directly in the application data being exchanged. In such cases, 
		it is often necessary to provide additional application-level mechanisms to match messages 
		and conversations with the business process instances for which they are intended.
		</p><p>Correlation patterns can become quite complex. The use of a particular set of correlation 
		tokens does not, in general, span the entire interaction between a service instance and a 
		partner (instance), but spans a part of the interaction. Correlated exchanges may nest and 
		overlap, and messages may carry several sets of correlation tokens. For example, a buyer 
		might start a correlated exchange with a seller by sending a purchase order (PO) and using 
		a PO number embedded in the PO document as the correlation token. The PO number is used in 
		the PO acknowledgement by the seller. The seller might later send an invoice that carries the 
		PO number, to correlate it with the PO, and also carries an invoice number so that future 
		payment-related messages need to carry only the invoice number as the correlation token. The 
		invoice message thus carries two separate correlation tokens and participates in two overlapping 
		correlated exchanges.
		</p><p>BPEL4WS addresses correlation scenarios by providing a declarative mechanism to specify 
		correlated groups of operations within a service instance. A set of correlation tokens is 
		defined as a set of properties shared by all messages in the correlated group. Such a set 
		of properties is called a <em>correlation set</em>.
		</p><p>Correlation sets are declared within scopes and associated with them in a manner that 
		is analogous to variable declarations.  Each correlation set is declared within a scope and 
		is said to belong to that scope.  Correlation sets that belong to the global process scope 
		are called global correlation sets.  Correlation sets may also belong to other, non-global 
		scopes, and such correlation sets are called local correlation sets.   Each correlation set 
		is only visible in the scope in which it is defined and in all scopes nested within the scope 
		it belongs to.  Thus, global correlation sets are visible throughout the process.  It is 
		possible to "hide" a correlation set in an outer scope by declaring a correlation set with 
		an identical name in an inner scope.
		</p><p>A global correlation set is in an uninitiated state at the beginning of a process. A 
		local correlation set is in an uninitiated state at the start of the scope it belongs to.  
		Note that non-global scopes in general start and complete their behavior more than once in 
		the lifetime of the process instance they belong to.
		</p><p>Correlation sets resemble late-bound constants rather than variables in their semantics.  
		The binding of a correlation set is triggered by a specially marked message send or receive 
		operation.  A correlation set can be initiated only once during the lifetime of the scope it 
		belongs to.  Thus, a global correlation set can only be initiated at most once during the 
		lifetime of the process instance.  Its value, once initiated, can be thought of as an alias 
		for the identity of the business process instance.  A local correlation set is available for 
		binding each time the corresponding scope starts, but once initiated must retain its value 
		until the scope completes.
		</p><p>In multiparty business protocols, each participant process in a correlated message 
		exchange acts either as the initiator or as a follower of the exchange. The initiator 
		process sends the first message (as part of an operation invocation) that starts the 
		conversation, and therefore defines the values of the properties in the correlation set 
		that tag the conversation. All other participants are followers that bind their correlation 
		sets in the conversation by receiving an incoming message that provides the values of the 
		properties in the correlation set. Both initiator and followers must mark the first activity 
		in their respective groups as the activity that binds the correlation set.
		</p></div><div class="div2">
<h3><a name="definingandusingcorrelationsets"></a>10.2. Defining and Using Correlation Sets</h3><p>The examples in this section show correlation being used on almost every messaging 
		activity (receive, reply, and invoke). This is because BPEL4WS does not assume the use 
		of any sophisticated conversational transport protocols for messaging. In cases where 
		such protocols are used, the explicit use of correlation in BPEL4WS can be reduced to 
		those activities that establish the conversational connections.
		</p><p>Each correlation set in BPEL4WS is a named group of properties that, taken together, 
		serve to define a way of identifying an application-level conversation within a business 
		protocol instance. A given message can carry multiple correlation sets. After a correlation 
		set is initiated, the values of the properties for a correlation set must be identical for 
		all the messages in all the operations that carry the correlation set and occur within the 
		corresponding scope until its completion.  The semantics of a process in which this consistency 
		constraint is violated is undefined.  Similarly undefined is the semantics of a process in 
		which an activity with the initiate attribute set to no attempts to use a correlation set that 
		has not been previously initiated.
		</p><p>As the following examples illustrate, a correlation set is initiated when the activity 
		within which it is used applies the attribute <code>initiate="yes"</code> to the set.
		</p><div class="exampleInner"><pre>  &lt;correlationSets&gt;?
    &lt;correlationSet name="ncname" properties="qname-list"/&gt;+
  &lt;/correlationSets&gt;
		</pre></div><p>Following is an extended example of correlation. It begins by defining four message 
		properties: <code>customerID</code>, <code>orderNumber</code>, <code>vendorID</code> and 
		<code>invoiceNumber</code>. All of these properties are defined as part of the 
		"<code>http://example.com/supplyCorrelation.wsdl</code>" namespace defined by the document.
		</p><div class="exampleInner"><pre>&lt;definitions name="properties"
    targetNamespace="http://example.com/supplyCorrelation.wsdl"
    xmlns:tns="http://example.com/supplyCorrelation.wsdl"
    xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;

    &lt;!-- define correlation properties --&gt;
    &lt;bpws:property name="customerID" type="xsd:string"/&gt;
    &lt;bpws:property name="orderNumber" type="xsd:int"/&gt;
    &lt;bpws:property name="vendorID" type="xsd:string"/&gt;
    &lt;bpws:property name="invoiceNumber" type="xsd:int"/&gt;
&lt;/definitions&gt;
		</pre></div><p>Note that these properties are global names with known (simple) XMLSchema types. 
		They are abstract in the sense that their occurrence in messages needs to be separately 
		specified (see <a href="#messageproperties"><b>8. Message Properties</b></a>). The example continues by defining 
		purchase order and invoice messages and by using the concept of aliasing to map the abstract 
		properties to fields within the message data identified by selection.
		</p><div class="exampleInner"><pre>&lt;definitions name="correlatedMessages"
    targetNamespace="http://example.com/supplyMessages.wsdl"
    xmlns:tns="http://example.com/supplyMessages.wsdl"
    xmlns:cor="http://example.com/supplyCorrelation.wsdl"
    xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;
    &lt;!-define schema types for PO and invoice information --&gt;
    &lt;types&gt;
       &lt;xsd:schema&gt;
          &lt;xsd:complexType name="PurchaseOrder"&gt;
             &lt;xsd:element name="CID" type="xsd:string"/&gt;
             &lt;xsd:element name="order" type="xsd:int"/&gt;
             ...
          &lt;/xsd:complexType&gt;
          &lt;xsd:complexType name="PurchaseOrderResponse"&gt;
             &lt;xsd:element name="CID" type="xsd:string"/&gt;
             &lt;xsd:element name="order" type="xsd:int"/&gt;
             ...
          &lt;/xsd:complexType&gt;
    
              &lt;xsd:complexType name="PurchaseOrderReject"&gt;
             &lt;xsd:element name="CID" type="xsd:string"/&gt;
             &lt;xsd:element name="order" type="xsd:int"/&gt;
             &lt;xsd:element name="reason" type="xsd:string"/&gt;
             ...
          &lt;/xsd:complexType&gt;
          &lt;xsd:complexType name="Invoice"&gt;
             &lt;xsd:element name="VID" type="xsd:string"/&gt;
             &lt;xsd:element name="invNum" type="xsd:int"/&gt;
          &lt;/xsd:complexType&gt;
       &lt;/xsd:schema&gt;
    &lt;/types&gt;
    &lt;message name="POMessage"&gt;
        &lt;part name="PO" type="tns:PurchaseOrder"/&gt;
    &lt;/message&gt;
    &lt;message name="POResponse"&gt;
        &lt;part name="RSP" type="tns:PurchaseOrderResponse"/&gt;
    &lt;/message&gt;
    &lt;message name="POReject"&gt;
        &lt;part name="RJCT" type="tns:PurchaseOrderReject"/&gt;
    &lt;/message&gt;
    &lt;message name="InvMessage"&gt;
        &lt;part name="IVC" type="tns:Invoice"/&gt;
    &lt;/message&gt;
    &lt;bpws:propertyAlias propertyName="cor:customerID"
                  messageType="tns:POMessage" part="PO"
                  query="/PO/CID"/&gt;
    &lt;bpws:propertyAlias propertyName="cor:orderNumber"
                  messageType="tns:POMessage" part="PO"
                  query="/PO/Order"/&gt;
    &lt;bpws:propertyAlias propertyName="cor:vendorID"
                  messageType="tns:InvMessage" part="IVC"
                  query="/IVC/VID"/&gt;
    &lt;bpws:propertyAlias propertyName="cor:invoiceNumber"
                  messageType="tns:InvMessage" part="IVC"
                  query="/IVC/InvNum"/&gt;
  ...
&lt;/definitions&gt;
		</pre></div><p>Finally, the portType used is defined, in a separate WSDL document.
		</p><div class="exampleInner"><pre>&lt;definitions name="purchasingPortType"
    targetNamespace="http://example.com/puchasing.wsdl"
    xmlns:smsg="http://example.com/supplyMessages.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;

&lt;portType name="PurchasingPT"&gt;
	&lt;operation name="SyncPurchase"&gt;
		&lt;input message="smsg:POMessage"/&gt;
		&lt;output message="smsg:POResponse"/&gt;
		&lt;fault name="tns:RejectPO" message="smsg:POReject"/&gt;
	&lt;/operation&gt;
	&lt;operation name="AsyncPurchase"&gt;
		&lt;input message="smsg:POMessage"/&gt;
	&lt;/operation&gt;
&lt;/portType&gt;
&lt;portType name="BuyerPT"&gt;
	&lt;operation name="AsyncPurchaseResponse"&gt;
		&lt;input message="smsg:POResponse"/&gt;
		&lt;fault name="tns:RejectPO" message="smsg:POReject"/&gt;
	&lt;/operation&gt;
	&lt;operation name="AsyncPurchaseReject"&gt;
		&lt;input message="smsg:POReject"/&gt;
	&lt;/operation&gt;
&lt;/portType&gt;
&lt;/definitions&gt;
		&lt;/eg&gt;
		&lt;p&gt;Both the properties and their mapping to purchase order and invoice messages will be 
		used in the following correlation examples.
		&lt;/p&gt;
		&lt;eg&gt;
  &lt;correlationSets 
         xmlns:cor="http://example.com/supplyCorrelation.wsdl"&gt;
      &lt;!-- Order numbers are particular to a customer, 
           this set is carried in application data --&gt;
    &lt;correlationSet name="PurchaseOrder"
              properties="cor:customerID cor:orderNumber"/&gt;
 
      &lt;!-- Invoice numbers are particular to a vendor, 
           this set is carried in application data --&gt;
    &lt;correlationSet name="Invoice"
              properties="cor:vendorID cor:invoiceNumber"/&gt;
  &lt;/correlationSets&gt;
		</pre></div><p>Correlation set names are used in <code>invoke</code>, <code>receive</code>, and 
		<code>reply</code> activities (see <a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a> 
		and <a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>), in the onMessage branches of 
		pick activities, and in the onMessage variant of event handlers (see <a href="#pick"><b>12.4. Pick</b></a> 
		and <a href="#messageevents"><b>13.5.1. Message Events</b></a>).  These sets are used to indicate which 
		correlation sets (i.e., the corresponding property sets) occur in the messages being sent and 
		received. The <code>initiate</code> attribute is used to indicate whether the set is being 
		initiated. When the attribute is set to "<code>yes</code>" the set is initiated with the 
		values of the properties occurring in the message being sent or received. Finally, in the case 
		of invoke, when the operation invoked is synchronous request/response, a <code>pattern</code> 
		attribute is used to indicate whether the correlation applies to the outbound (request) 
		message, the inbound (response) message, or both. These ideas are explained in more detail in 
		the context of the use of correlation in the rest of this example.
		</p><p>A message can carry the tokens of one or more correlation sets. The first example shows 
		an interaction in which a purchase order is received in a one-way inbound request and a 
		confirmation including an invoice is sent in the asynchronous response. The 
		<code>PurchaseOrder</code> correlationSet is used in both activities so that the asynchronous 
		response can be correlated to the request at the buyer. The receive activity initiates the 
		<code>PurchaseOrder</code> correlationSet. The buyer is therefore the initiator and the 
		receiving business process is a follower for this correlationSet. The invoke activity sending 
		the asynchronous response also initiates a new correlationSet Invoice. The business process 
		is the initiator of this correlated exchange and the buyer is a follower. The response message 
		is thus a part of two separate conversations, and forms the bridge between them.
		</p><p>In the following, the prefix SP: represents the namespace 
		"<code>http://example.com/puchasing.wsdl</code>".
		</p><div class="exampleInner"><pre>  &lt;receive partnerLink="Buyer" portType="SP:PurchasingPT" 
           operation="AsyncPurchase" 
           variable="PO"&gt;
     &lt;correlations&gt;
       &lt;correlation set="PurchaseOrder" initiate="yes"&gt;
     &lt;/correlations&gt;
  &lt;/receive&gt;
 
  &lt;invoke partnerLink="Buyer" portType="SP:BuyerPT" 
         operation="AsyncPurchaseResponse" inputVariable="POResponse"&gt;
     &lt;correlations&gt;
       &lt;correlation set="PurchaseOrder" initiate="no" pattern="out"&gt;
       &lt;correlation set="Invoice" initiate="yes" pattern="out"&gt;
     &lt;/correlations&gt;
  &lt;/invoke&gt;
		</pre></div><p>Alternatively, the response might have been a rejection (such as an "out-of-stock" message), 
		which in this case terminates the conversation correlated by the correlationSet 
		<code>PurchaseOrder</code> without starting a new one correlated with <code>Invoice</code>. Note that the 
		<code>initiate</code> attribute is missing. It therefore has the default value of 
		"<code>no</code>".
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="Buyer" portType="SP:BuyerPT" 
         operation="AsyncPurchaseReject" inputVariable="POReject"&gt;
     &lt;correlations&gt;
       &lt;correlation set="PurchaseOrder" pattern="out"&gt;
     &lt;/correlations&gt;
  &lt;/invoke&gt;
		</pre></div><p>The use of correlation with synchronous Web Service invocation is illustrated by the 
		alternative synchronous purchasing operation used by an invoke activity used in the buyer's 
		business process.
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="Seller" portType="SP:PurchasingPT" operation="SyncPurchase" 
           inputVariable="sendPO" 
           outputVariable="getResponse"&gt;
     &lt;correlations&gt;
       &lt;correlation set="PurchaseOrder" initiate="yes" 
                    pattern="out"&gt;
       &lt;correlation set="Invoice" initiate="yes" 
                    pattern="in"&gt;
     &lt;/correlations&gt;
    &lt;catch faultName="SP:RejectPO" faultVariable="POReject"&gt;
      &lt;!-- handle the fault --&gt;
    &lt;/catch&gt;
  &lt;/invoke&gt;
		</pre></div><p>Note that an invoke consists of two messages: an outgoing request message and an incoming 
		reply message. The correlation sets applicable to each message must be separately considered 
		because they can be different. In this case the <code>PurchaseOrder</code> correlation 
		applies to the outgoing request that initiates it, while the <code>Invoice</code> correlation 
		applies to the incoming reply and is initiated by the reply. Because the 
		<code>PurchaseOrder</code> correlation is initiated by an outgoing message, the buyer 
		is the initiator of that correlation but a follower of the <code>Invoice</code> correlation 
		because the values of the correlation properties for Invoice are initiated by the seller in 
		the reply received by the buyer.
		</p></div></div><div class="div1">
<h2><a name="basicactivities"></a>11. Basic Activities</h2><div class="div2">
<h3><a name="standardattributesforeachactivity"></a>11.1. Standard Attributes for Each Activity</h3><p>Each activity has optional standard attributes: a name, a join condition, and an indicator 
		whether a join fault should be suppressed if it occurs. A join condition is used to specify 
		requirements about concurrent paths reaching at an activity. See <a href="#flow"><b>12.5. Flow</b></a> 
		for a full discussion of the last two attributes. The default value of 
		<code>suppressJoinFailure</code> is <code>no</code>.
		</p><div class="exampleInner"><pre>name="ncname"?
joinCondition="bool-expr"?
suppressJoinFailure="yes|no"?&gt; 
		</pre></div><p>The value of the joinCondition attribute is a Boolean-valued expression in the expression 
		language indicated for this document (see <a href="#expressions"><b>9.1. Expressions</b></a>). The default 
		value of the join condition for the default expression language XPath is the logical OR of 
		the link status of all incoming links of this activity.
		</p></div><div class="div2">
<h3><a name="standardelementsforeachactivity"></a>11.2. Standard Elements for Each Activity</h3><p>Each BPEL4WS activity has optional nested standard elements &lt;source&gt; and &lt;target&gt;. 
		The use of these elements is required for establishing synchronization relationships through 
		links (see <a href="#flow"><b>12.5. Flow</b></a>). Each link is defined independently and given a name. 
		The link name is used as value of the linkName attribute of the &lt;source&gt; element. An activity 
		MAY declare itself to be the <em>source</em> of one or more links by including one or 
		more &lt;source&gt; elements. Each &lt;source&gt; element MUST use a distinct link name. Similarly, an 
		activity MAY declare itself to be the <em>target</em> of one or more links by including 
		one or more &lt;target&gt; elements.  Each &lt;source&gt; element associated with a given activity MUST 
		use a link name distinct from all other &lt;source&gt; elements at that activity. Each &lt;target&gt; 
		element associated with a given activity MUST use a link name distinct from all other &lt;target&gt; 
		elements at that activity.   Each &lt;source&gt; element MAY optionally specify a transition condition 
		that functions as a guard for following this specified link (see <a href="#flow"><b>12.5. Flow</b></a>). 
		If the transition condition is omitted, it is deemed to be present with the constant value true.
		</p><div class="exampleInner"><pre>&lt;source linkName="ncname" transitionCondition="bool-expr"?/&gt;*
&lt;target linkName="ncname"/&gt;*
		</pre></div></div><div class="div2">
<h3><a name="invokingwebserviceoperations"></a>11.3. Invoking Web Service Operations</h3><p>Web Services provided by partners (see 
		<a href="#partnerlinktypespartnerlinksandendpointreferences"><b>7. Partner Link Types, Partner Links, and Endpoint References</b></a>) can be used to 
		perform work in a BPEL4WS business process. Invoking an operation on such a service is a basic 
		activity. Recall that such an operation can be a synchronous request/response or an asynchronous 
		one-way operation. BPEL4WS uses the same basic syntax for both with some additional options for 
		the synchronous case.
		</p><p>An asynchronous invocation requires only the input variable of the operation because it 
		does not expect a response as part of the operation (see 
		<a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>). A synchronous invocation requires both 
		an input variable and an output variable. One or more correlation sets can be specified to 
		correlate the business process instance with a stateful service at the partner's side (see 
		<a href="#correlation"><b>10. Correlation</b></a>).  However, these attributes are both syntactically optional 
		since they are absolutely required only in executable processes.
		</p><p>In the case of a synchronous invocation, the operation might return a WSDL fault message. 
		This results in a BPEL4WS fault. Such a fault can be caught locally by the activity, and in 
		this case the specified activity will be performed. If a fault is not caught locally by the 
		activity it is thrown to the scope that encloses the activity (see 
		<a href="#scopes"><b>13. Scopes</b></a> and <a href="#faulthandlers"><b>13.4. Fault Handlers</b></a>).
		</p><p>Note that a WSDL fault is identified in BPEL4WS by a qualified name formed by the target 
		namespace of the corresponding portType and the fault name. This uniform naming mechanism must 
		be followed even though it does not accurately match WSDL's fault-naming model. Because WSDL 
		does not require that fault names be unique within the namespace where the service operation 
		is defined, all faults sharing a common name and defined in the same namespace are 
		indistinguishable in BPEL4WS. In WSDL 1.1 it is necessary to specify a portType name, an 
		operation name, and the fault name to uniquely identify a fault. This limits the ability to 
		use fault-handling mechanisms to deal with invocation faults. This is an important shortcoming 
		of the WSDL fault model that will be removed in future versions of WSDL.
		</p><p>Finally, an activity can be associated with another activity that acts as its compensation 
		action. This compensation handler can be invoked either explicitly or by the default compensation 
		handler of the enclosing scope (see specref ref="13scopes"/&gt; and 
		<a href="#compensationhandlers"><b>13.3. Compensation Handlers</b></a>).
		</p><p>Semantically, the specification of local fault and/or compensation handlers is equivalent 
		to the presence of an implicit scope immediately enclosing the activity and providing those 
		handlers. The name of such an implicit scope is always the same as the name of the activity 
		it encloses.
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="ncname" portType="qname" operation="ncname"
          inputVariable="ncname"? outputVariable="ncname"?
          <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
       &lt;correlation set="ncname" initiate="yes|no"? 
                    pattern="in|out|out-in"/&gt;+
    &lt;/correlations&gt;
    &lt;catch faultName="qname" faultVariable="ncname"?&gt;*
      <em>activity</em>
    &lt;/catch&gt;
    &lt;catchAll&gt;?
      <em>activity</em>
    &lt;/catchAll&gt;
    &lt;compensationHandler&gt;?
      <em>activity</em>
    &lt;/compensationHandler&gt;
  &lt;/invoke&gt;
		</pre></div><p>See <a href="#correlation"><b>10. Correlation</b></a> for an explanation of the correlation semantics. The 
		following example shows an invocation with a nested compensation handler. Other examples 
		are shown throughout the specification.
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
          operation="SyncPurchase" 
          inputVariable="sendPO" 
          outputVariable="getResponse"&gt;
    &lt;compensationHandler&gt;
        &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
                operation="CancelPurchase" 
                inputVariable="getResponse"
                outputVariable="getConfirmation"&gt;
    &lt;/compensationHandler&gt;
  &lt;/invoke&gt;
		</pre></div></div><div class="div2">
<h3><a name="providingwebserviceoperations"></a>11.4. Providing Web Service Operations</h3><p>A business process provides services to its partners through receive activities and 
		corresponding reply activities. A receive activity specifies the partner link it expects 
		to receive from, and the port type and operation that it expects the partner to invoke.  
		In addition, it may specify a variable that is to be used to receive the message data received.  
		However, this attribute is syntactically optional since it is absolutely required only in 
		executable processes.
		</p><p>In addition, receive activities play a role in the lifecycle of a business process. The 
		only way to instantiate a business process in BPEL4WS is to annotate a <code>receive</code> 
		activity with the <code>createInstance</code> attribute set to "<code>yes</code>" (see 
		<a href="#pick"><b>12.4. Pick</b></a> for a variant). The default value of this attribute is "<code>no</code>". 
		A <code>receive</code> activity annotated in this way MUST be an initial activity in the 
		process, that is, the only other basic activities may potentially be performed prior to or 
		simultaneously with such a <code>receive</code> activity MUST be similarly annotated 
		<code>receive</code> activities.
		</p><p>It is permissible to have the <code>createInstance</code> attribute set to "<code>yes</code>" 
		for a <em>set</em> of concurrent initial activities. In this case the intent is to express 
		the possibility that any one of a set of <em>required</em> inbound messages can create 
		the process instance because the order in which these messages arrive cannot be predicted. 
		All such <code>receive</code> activities MUST use the same correlation sets (see 
		<a href="#correlation"><b>10. Correlation</b></a>). Compliant implementations MUST ensure that only one of the 
		inbound messages carrying the same correlation set tokens actually instantiates the business 
		process (usually the first one to arrive, but this is implementation dependent). The other 
		incoming messages in the concurrent initial set MUST be delivered to the corresponding receive 
		activities in the already created instance.
		</p><p>A business process instance MUST NOT simultaneously enable two or more <code>receive</code> 
		activities for the same partnerLink, portType, operation and correlation set(s). Note that 
		<code>receive</code> is a blocking activity in the sense that it will not complete until a 
		matching message is received by the process instance. The semantics of a process in which two 
		or more <code>receive</code> actions for the same partnerLink, portType, operation and 
		correlation set(s) may be simultaneously enabled is undefined.  For the purposes of this 
		constraint, an <code>onMessage</code> clause in a <code>pick</code> and an onMessage event 
		handler are equivalent to a <code>receive</code> (see <a href="#pick"><b>12.4. Pick</b></a> and 
		<a href="#messageevents"><b>13.5.1. Message Events</b></a>).
		</p><div class="exampleInner"><pre>&lt;receive partnerLink="ncname" portType="qname" operation="ncname"
           variable="ncname"? createInstance="yes|no"?
           <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
       &lt;correlation set="ncname" initiate="yes|no"?&gt;+
    &lt;/correlations&gt;
  &lt;/receive&gt;
		</pre></div><p>A <code>reply</code> activity is used to send a response to a request previously 
		accepted through a <code>receive</code> activity. Such responses are only meaningful for 
		synchronous interactions. An asynchronous response is always sent by invoking the 
		corresponding one-way operation on the partner link.  A <code>reply</code> activity may specify 
		a variable that contains the message data to be sent in reply.  However, this attribute 
		is syntactically optional since it is absolutely required only in executable processes.
		</p><p>The correlation between a request and the corresponding reply is based on the constraint 
		that more than one outstanding synchronous request from a specific partner link for a particular 
		portType, operation and correlation set(s) MUST NOT be outstanding simultaneously.  The semantics 
		of a process in which this constraint is violated is undefined.  For the purposes of this 
		constraint, an <code>onMessage</code> clause in a <code>pick</code> is equivalent to a 
		<code>receive</code> (see <a href="#pick"><b>12.4. Pick</b></a>).   Moreover, a <code>reply</code> 
		activity must always be preceded by a <code>receive</code> activity for the same partner 
		link, portType and (request/response) operation, such that no reply has been sent for that 
		<code>receive</code> activity.  The semantics of a process in which this constraint is 
		violated is undefined.
		</p><div class="exampleInner"><pre>  &lt;reply partnerLink="ncname" portType="qname" operation="ncname"
         variable="ncname"? faultName="qname"?
         <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;correlations&gt;?
       &lt;correlation set="ncname" initiate="yes|no"?&gt;+
    &lt;/correlations&gt;
  &lt;/reply&gt;
		</pre></div><p>Note that the <code>&lt;reply&gt;</code> activity corresponding to a given request has 
		two potential forms.  If the response to the request is normal, the <code>faultName</code> 
		attribute is not used and the <code>variable</code> attribute, when present, will indicate a 
		variable of the normal response message type.  If, on the other hand, the response indicates 
		a fault, the <code>faultName</code> attribute is used and the <code>variable</code> attribute, 
		when present, will indicate a variable of the message type for the corresponding fault.
		</p></div><div class="div2">
<h3><a name="updatingvariablecontents"></a>11.5. Updating Variable Contents</h3><p>Variable update occurs through the assignment activity, which is described in 
		<a href="#assignment"><b>9.3. Assignment</b></a>.
		</p></div><div class="div2">
<h3><a name="signalingfaults"></a>11.6. Signaling Faults</h3><p>The <code>throw</code> activity can be used when a business process needs to signal an 
		internal fault explicitly. Every fault is required to have a globally unique QName. The 
		throw activity is required to provide such a name for the fault and can optionally provide 
		a variable of data that provides further information about the fault. A fault handler can use 
		such data to analyze and handle the fault and also to populate any fault messages that need to 
		be sent to other services.
		</p><p>BPEL4WS does not require fault names to be defined prior to their use in a throw element. 
		An application or process-specific fault name can be directly used by using an appropriate 
		QName as the value of the faultName attribute and providing a variable with the fault data 
		if required. This provides a very lightweight mechanism to introduce application-specific 
		faults.
		</p><div class="exampleInner"><pre>  &lt;throw faultName="qname" faultVariable="ncname"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/throw&gt;
		</pre></div><p>A simple example of a throw activity that does not provide a variable of fault data is:
		</p><div class="exampleInner"><pre>&lt;throw xmlns:FLT="http://example.com/faults" faultName="FLT:OutOfStock"/&gt;
		</pre></div></div><div class="div2">
<h3><a name="waiting"></a>11.7. Waiting</h3><p>The <code>wait</code> activity allows a business process to specify a delay for a certain 
		period of time or until a certain deadline is reached (see <a href="#expressions"><b>9.1. Expressions</b></a> 
		for the grammar of duration expressions and deadline expressions).
		</p><div class="exampleInner"><pre> 
  &lt;wait (for="duration-expr" | until="deadline-expr") <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/wait&gt;
		</pre></div><p>A typical use of this activity is to invoke an operation at a certain time (in this 
		case a constant, but more typically an expression dependent on process state):
		</p><div class="exampleInner"><pre> 
&lt;sequence&gt;
  &lt;wait until="'2002-12-24T18:00+01:00'"/&gt;
 
  &lt;invoke partnerLink="CallServer" portType="AutomaticPhoneCall" 
          operation="TextToSpeech" 
          inputVariable="seasonalGreeting"&gt;
  &lt;/invoke&gt;
&lt;/sequence&gt;
		</pre></div></div><div class="div2">
<h3><a name="doingnothing"></a>11.8. Doing Nothing</h3><p>There is often a need to use an activity that does nothing, for example when a fault 
		needs to be caught and suppressed. The empty activity is used for this purpose. The syntax 
		is obvious and minimal.
		</p><div class="exampleInner"><pre>  &lt;empty <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/empty&gt;
		</pre></div></div></div><div class="div1">
<h2><a name="structuredactivities"></a>12. Structured Activities</h2><p>Structured activities prescribe the order in which a collection of activities take place. 
	They describe how a business process is created by composing the basic activities it performs 
	into structures that express the control patterns, data flow, handling of faults and external 
	events, and coordination of message exchanges between process instances involved in a business 
	protocol.
	</p><p>The structured activities of BPEL4WS include:
	</p><ul><li><p>Ordinary sequential control between activities is provided by 
		<code>sequence</code>, <code>switch</code>, and <code>while</code>.</p></li><li><p>Concurrency and synchronization between activities is provided by <code>flow</code>.</p></li><li><p>Nondeterministic choice based on external events is provided by <code>pick</code>.</p></li></ul><p>Structured activities can be used recursively in the usual way. A key point to understand is 
	that structured activities can be nested and combined in arbitrary ways. This provides a somewhat 
	unusual but very attractive free blending of the graph-like and program-like control regimes that 
	have traditionally been seen as alternatives rather than orthogonal composable features. A simple 
	example of such blended usage is found in the <a href="#initialexample"><b>6.1. Initial Example</b></a>.
	</p><p>It is important to emphasize that the word <em>activity</em> is used throughout the 
	following to include both basic and structured activities.
	</p><div class="div2">
<h3><a name="sequence"></a>12.1. Sequence</h3><p>A <code>sequence</code> activity contains one or more activities that are performed 
		sequentially, in the order in which they are listed within the <code>&lt;sequence&gt;</code> 
		element, that is, in lexical order. The <code>sequence</code> activity completes when the 
		final activity in the sequence has completed.
		</p><div class="exampleInner"><pre>  &lt;sequence <em>standard-attributes</em>&gt;
    <em>standard-elements</em><em>activity</em>+
  &lt;/sequence&gt;
		</pre></div><p>Example:
		</p><div class="exampleInner"><pre>&lt;sequence&gt;
  &lt;flow&gt;
    ...
  &lt;/flow&gt;
  &lt;scope&gt;
    ...
  &lt;/scope&gt;
  &lt;pick&gt;
    ...
  &lt;/pick&gt;
&lt;/sequence&gt;
		</pre></div></div><div class="div2">
<h3><a name="switch"></a>12.2. Switch</h3><p>The <code>switch</code> structured activity supports conditional behavior in a pattern 
		that occurs quite often. The activity consists of an ordered list of one or more conditional 
		branches defined by <code>case</code> elements, followed optionally by an <code>otherwise</code> 
		branch. The <code>case</code> branches of the <code>switch</code> are considered in the order 
		in which they appear. The first branch whose condition holds true is taken and provides 
		the activity performed for the switch. If no branch with a condition is taken, then the 
		<code>otherwise</code> branch is taken. If the <code>otherwise</code> branch is not 
		explicitly specified, then an <code>otherwise</code> branch with an <code>empty</code> 
		activity is deemed to be present. The <code>switch</code> activity is complete when the 
		activity of the selected branch completes.
		</p><div class="exampleInner"><pre> 
  &lt;switch <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;case condition="bool-expr"&gt;+
      <em>activity</em>
    &lt;/case&gt;
    &lt;otherwise&gt;?
      <em>activity</em>
    &lt;/otherwise&gt;
  &lt;/switch&gt;
		</pre></div><p>Example:
		</p><div class="exampleInner"><pre>&lt;switch xmlns:inventory="http://supply-chain.org/inventory" 
        xmlns:FLT="http://example.com/faults"&gt;
  &lt;case condition= "bpws:getVariableProperty(stockResult,level) &gt; 100"&gt;
    &lt;flow&gt;
       &lt;!-- perform fulfillment work --&gt;
    &lt;/flow&gt;
  &lt;/case&gt;
  &lt;case condition="bpws:getVariableProperty(stockResult,level) &gt;= 0"&gt;
    &lt;throw faultName="FLT:OutOfStock" 
           variable="RestockEstimate"/&gt;
  &lt;/case&gt;
  &lt;otherwise&gt;
    &lt;throw faultName="FLT:ItemDiscontinued"/&gt;
  &lt;/otherwise&gt;
&lt;/switch&gt;
		</pre></div></div><div class="div2">
<h3><a name="while"></a>12.3. While</h3><p>The <code>while</code> activity supports repeated performance of a specified iterative 
		activity. The iterative activity is performed until the given Boolean <code>while</code> condition no 
		longer holds true.
		</p><div class="exampleInner"><pre>  &lt;while condition="bool-expr" <em>standard-attributes</em>&gt;
     <em>standard-elements</em><em>activity</em>
  &lt;/while&gt;
		</pre></div><p>Example:
		</p><div class="exampleInner"><pre>    ...
&lt;variable name="orderDetails" type="xsd:integer"/&gt;
    ...
&lt;while condition=
           "bpws:getVariableData(orderDetails) &gt; 100"&gt;
  &lt;scope&gt;
    ...
  &lt;/scope&gt;
&lt;/while&gt;
		</pre></div></div><div class="div2">
<h3><a name="pick"></a>12.4. Pick</h3><p>The <code>pick</code> activity awaits the occurrence of one of a set of events and then 
		performs the activity associated with the event that occurred. The occurrence of the events 
		is often mutually exclusive (the process will either receive an acceptance message or a 
		rejection message, but not both). If more than one of the events occurs, then the selection 
		of the activity to perform depends on which event occurred first. If the events occur almost 
		simultaneously, there is a race and the choice of activity to be performed is dependent on both 
		timing and implementation.
		</p><p>The form of <code>pick</code> is a set of branches of the form event/activity, and exactly 
		one of the branches will be selected based on the occurrence of the event associated with it 
		before any others. Note that after the pick activity has accepted an event for handling, the 
		other events are no longer accepted by that pick. The possible events are the arrival of some 
		message in the form of the invocation of an inbound one-way or request/response operation, or 
		an "alarm" based on a timer (in the sense of an <em>alarm clock</em>).
		</p><p>A special form of <code>pick</code> is used when the creation of an instance of the 
		business process could occur as a result of receiving one of a set of possible messages. 
		In this case, the <code>pick</code> itself has a <code>createInstance</code> attribute with 
		a value of <code>yes</code> (the default value of the attribute is <code>no</code>). In such 
		a case, the events in the <code>pick</code> must all be inbound messages and each of those 
		is equivalent to a <code>receive</code> with the attribute "<code>createInstance=yes</code>". 
		No alarms are permitted for this special case.
		</p><p>Each pick activity MUST include at least one <code>onMessage</code> event. The semantics 
		of the onMessage event is identical to a receive activity regarding the optional nature of 
		the variable attribute and the constraint regarding simultaneous enablement of conflicting 
		receive actions.  For the latter, recall that the semantics of a process in which two or 
		more <code>receive</code> actions for the same partner link, portType, operation and 
		correlation set(s) may be simultaneously enabled is undefined (see 
		<a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>).  Enablement of each <code>onMessage</code> 
		handler is equivalent to enablement of the corresponding <code>receive</code> activity for the 
		purposes of this constraint. 
		</p><div class="exampleInner"><pre>  &lt;pick createInstance="yes|no"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;onMessage partnerLink="ncname" portType="qname"
               operation="ncname" variable="ncname"?&gt;+
      &lt;correlations&gt;?
         &lt;correlation set="ncname" initiate="yes|no"?&gt;+
      &lt;/correlations&gt;
      <em>activity</em>
    &lt;/onMessage&gt;
    &lt;onAlarm (for="duration-expr" | until="deadline-expr")&gt;*
      <em>activity</em>
    &lt;/onAlarm&gt;
  &lt;/pick&gt;
		</pre></div><p>The pick activity completes when one of the branches is triggered by the occurrence of 
		its associated event and the corresponding activity completes. The following example shows 
		a typical usage of pick. Such a pick activity can occur in a loop that is accepting line items 
		for a large order, but a completion action is enabled as an alternative event.
		</p><div class="exampleInner"><pre>&lt;pick&gt;
  &lt;onMessage partnerLink="buyer"
                portType="orderEntry"
                operation="inputLineItem"
                variable="lineItem"&gt;
        &lt;!-- activity to add line item to order --&gt;
  &lt;/onMessage&gt;
  &lt;onMessage partnerLink="buyer"
                portType="orderEntry"
                operation="orderComplete"
                variable="completionDetail"&gt;
        &lt;!-- activity to perform order completion --&gt;
   &lt;/onMessage&gt;

   &lt;!-- set an alarm to go after 3 days and 10 hours --&gt;
   &lt;onAlarm for="'P3DT10H'"&gt;
        &lt;!-- handle timeout for order completion  --&gt;
   &lt;/onAlarm&gt;
&lt;/pick&gt;
		</pre></div></div><div class="div2">
<h3><a name="flow"></a>12.5. Flow</h3><p>The flow construct provides concurrency and synchronization. The grammar for flow is:
		</p><div class="exampleInner"><pre>  &lt;flow <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;links&gt;?
      &lt;link name="ncname"&gt;+
    &lt;/links&gt;
    <em>activity</em>+
  &lt;/flow&gt;
		</pre></div><p>The <em>standard attributes</em> and <em>standard elements</em> for activities 
		nested within a <code>flow</code> are especially significant because the standard attributes 
		and elements primarily exist to provide <code>flow</code>-related semantics to activities.
		</p><p>The most fundamental semantic effect of grouping a set of activities in a <code>flow</code> 
		is to enable concurrency. A <code>flow</code> completes when all of the activities in the 
		flow have completed. Completion of an activity in a flow includes the possibility that 
		it will be skipped if its enabling condition turns out to be false (see 
		<a href="#deadpatheliminationdpe"><b>12.5.2. Dead-Path-Elimination (DPE)</b></a>). Thus the simplest use of <code>flow</code> 
		is equivalent to a nested concurrency construct. In the following example, the two invoke 
		activities are enabled to start concurrently as soon as the <code>flow</code> is started. The 
		completion of the <code>flow</code> occurs after both the seller and the shipper respond 
		(assuming the invoke operations were synchronous request/response). The bank is invoked only 
		after the <code>flow</code> completes.
		</p><div class="exampleInner"><pre>  &lt;sequence&gt;
    &lt;flow&gt;
       &lt;invoke partnerLink="Seller" .../&gt;
       &lt;invoke partnerLink="Shipper" .../&gt;
    &lt;/flow&gt;
    &lt;invoke partnerLink="Bank" .../&gt;
  &lt;/sequence&gt;
		</pre></div><p>More generally, a flow activity creates a set of concurrent activities directly nested 
		within it. It further enables expression of synchronization dependencies between activities 
		that are nested directly or indirectly within it. The <code>link</code> construct is used to 
		express these synchronization dependencies. A link has a name and all the links of a flow 
		activity MUST be defined separately within the flow activity. The standard <code>source</code> 
		and <code>target</code> elements of an activity are used to link two activities. The source 
		of the link MUST specify a <code>source</code> element specifying the link's name and the 
		target of the link MUST specify a <code>target</code> element specifying the link's name. 
		The source activity MAY also specify a transition condition through the 
		<code>transitionCondition</code> attribute of the source element. If the 
		<code>transitionCondition</code> attribute is omitted, it is deemed to be present with a value of 
		"<code>true</code>". Every link declared within a flow activity MUST have exactly one 
		activity within the flow as its source and exactly one activity within the flow as its 
		target. The source and target of a link MAY be nested arbitrarily deeply within the (structured) 
		activities that are directly nested within the flow, except for the boundary-crossing 
		restrictions.
		</p><p>The following example shows that links can cross the boundaries of structured activities. 
		There is a link named "CtoD" that starts at activity C in sequence Y and ends at activity D, 
		which is directly nested in the enclosing flow. The example further illustrates that sequence 
		X must be performed prior to sequence Y because X is the source of the link named "XtoY" that 
		is targeted at sequence Y.
		</p><div class="exampleInner"><pre>  &lt;flow&gt;
    &lt;links&gt;
      &lt;link name="XtoY"/&gt;
      &lt;link name="CtoD"/&gt;
    &lt;/links&gt;
    &lt;sequence name="X"&gt;
       &lt;source linkName="XtoY"/&gt;
       &lt;invoke name="A" .../&gt;
       &lt;invoke name="B" .../&gt;
    &lt;/sequence&gt;
    &lt;sequence name"Y"&gt;
       &lt;target linkName="XtoY"/&gt;
       &lt;receive name="C" ...&gt;
         &lt;source linkName="CtoD"/&gt;
       &lt;/receive&gt;
       &lt;invoke name="E" .../&gt;
    &lt;/sequence&gt;
    &lt;invoke partnerLink="D" ...&gt;
      &lt;target linkName="CtoD"/&gt;
    &lt;/invoke&gt;
  &lt;/flow&gt;
		</pre></div><p>In general, a link is said to <em>cross the boundary</em> of a syntactic construct if 
		the source activity for the link is nested within the construct but the target activity is 
		not, or <em>vice versa</em>, if the target activity for the link is nested within the 
		construct but the source activity is not.
		</p><p>A link MUST NOT cross the boundary of a while activity, a serializable scope, an event 
		handler or a compensation handler (see <a href="#scopes"><b>13. Scopes</b></a> for the specification of event, 
		fault and compensation handlers). In addition, a link that crosses a fault-handler boundary MUST 
		be outbound, that is, it MUST have its source activity within the fault handler and its target 
		activity within a scope that encloses the scope associated with the fault handler. Finally, a 
		link MUST NOT create a control cycle, that is, the source activity must not have the target 
		activity as a logically preceding activity, where an activity A logically precedes an activity 
		B if the initiation of B semantically requires the completion of A. Therefore, directed graphs 
		created by links are always acyclic.
		</p><div class="div3">
<h4><a name="linksemantics"></a>12.5.1. Link Semantics</h4><p>In the rest of this section, the links for which activity A is the source will be 
			referred to as A's <em>outgoing</em> links, and the links for which activity A is the 
			target will be referred to as A's <em>incoming</em> links. If activity X is the target 
			of a link that has activity Y as the source, X has a <em>synchronization dependency</em> 
			on Y.
			</p><p>Every activity that is the target of a link has an implicit or explicit 
			<code>joinCondition</code> attribute associated with it. This applies even when an 
			activity has exactly one incoming link. If the explicit <code>joinCondition</code> is 
			missing, the implicit condition requires the status of <em>at least one</em> incoming 
			link to be positive (see below for an explanation of link status). A join condition is a 
			Boolean expression (see <a href="#expressions"><b>9.1. Expressions</b></a>). The expression for a join 
			condition for an activity MUST be constructed using <em>only</em> Boolean operators 
			and the <code>bpws:getLinkStatus</code> function (see <a href="#expressions"><b>9.1. Expressions</b></a>) 
			applied to incoming links at the activity.
			</p><p>Without considering links, the semantics of business processes, scopes, and structured 
			activities determine when a given activity is ready to start. For example, the second 
			activity in a sequence is ready to start as soon as the first activity completes. An activity 
			that defines the behavior of a branch in a switch is ready to start if and when that branch 
			is chosen. Similarly, an activity nested directly within a flow is ready to start as soon 
			as the flow itself starts, because flow is fundamentally a concurrency construct.
			</p><p>If an activity that is ready to start in this sense has incoming links, then it does 
			not start until the status of all its incoming links has been determined and the (implicit 
			or explicit) join condition associated with the activity has been evaluated. The precise 
			semantics of link status evaluation are as follows:
			</p><p>When activity A completes, the following steps are performed to determine the effect 
			of the synchronization links on other activities:
			</p><ul><li><p>Determine the <em>status</em> of all outgoing links for A. The status 
				will be either <em>positive</em> or <em>negative</em>. To determine the status 
				for each link its <code>transitionCondition</code> is evaluated. Note that the evaluation 
				is carried out with the actual values of the variables referenced in the transition 
				condition expression. If some of the variables are modified in a concurrent behavior 
				path, the result of the transition condition evaluation may depend nondeterministically 
				on the timing of behavior among concurrent activities.  If the value is <code>true</code> 
				the status is positive, otherwise it is negative. </p></li><li><p>For each activity B that has a synchronization dependency on A, check whether: 
				</p><ul><li><p>B is ready to start (except for its dependency on incoming links) in the sense described above.</p></li><li><p>The status of all incoming links for B has been determined. </p></li></ul></li><li><p>If both these conditions are true, then evaluate the join condition for B. 
				If the join condition evaluates to false, a standard <code>bpws:joinFailure</code> fault 
				is thrown, otherwise activity B is started. </p></li></ul><p>If, during the performance of structured activity S, the semantics of S dictate that 
			activity X nested within S will not be performed as part of the behavior of S, then the 
			status of all outgoing links from X is set to negative. An example is an activity within 
			a branch that is not taken in a switch activity, or activities that were not completed 
			in a scope in which processing was halted due to a fault, including a 
			<code>bpws:joinFailure</code> (see <a href="#scopes"><b>13. Scopes</b></a> and 
			<a href="#compensationhandlers"><b>13.3. Compensation Handlers</b></a>).
			</p><p>Note that in general multiple target activities will be enabled based on the 
			completion of an activity with multiple outgoing links; because of this, such an 
			activity is often called a fork activity. 
			</p></div><div class="div3">
<h4><a name="deadpatheliminationdpe"></a>12.5.2. Dead-Path-Elimination (DPE)</h4><p>In cases where the control flow is largely defined by networks of links, the normal 
			interpretation of a false join condition for activity A is that A should not be performed, 
			rather than that a fault has occurred. Moreover, there is a need to propagate the 
			consequences of this decision by assigning a negative status to the outgoing links for 
			A. BPEL4WS makes it easy to express these semantics by using an attribute 
			<code>suppressJoinFailure</code> on an activity. A value of "<code>yes</code>" for this 
			attribute has the effect of suppressing the <code>bpws:joinFailure</code> fault for the 
			activity and all nested activities, except where the effect is overridden by using the 
			<code>suppressJoinFailure</code> attribute with a value of "<code>no</code>" in a nested 
			activity. Suppressing the <code>bpws:joinFailure</code> is equivalent to the fault being 
			logically caught by a special default handler attached to an implicit scope that 
			immediately encloses just the activity with the join condition. The default handler 
			behavior is an <code>empty</code> activity, that is, the handler suppresses the fault 
			and does nothing about it. However, because the activity with the join condition was not 
			performed, its outgoing links are automatically assigned a negative status according to 
			the rules of <a href="#linksemantics"><b>12.5.1. Link Semantics</b></a>. Thus within an activity with the 
			value of the <code>suppressJoinFailure</code> attribute set to "<code>yes</code>", the 
			semantics of a join condition that evaluates to false are to skip the associated activity 
			and to set the status of all outgoing links from that activity to negative. This is called 
			dead-path-elimination because in a graph-like interpretation of networks of links with 
			transition conditions, these semantics have the effect of propagating negative link status 
			transitively along entire paths formed by consecutive links until a join condition is 
			reached that evaluates to true.
			</p><p>Note that the <em>name</em> of the implicit scope (created to suppress the 
			<code>bpws:joinFailure</code>) that immediately encloses an activity with a join condition 
			is exactly the same as the name of the activity itself. In case this is an invoke activity 
			(see <a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a>) with an inlined fault or 
			compensation handler, the implicit scope for the fault and compensation handlers is 
			<em>merged</em> with the implicit scope described here, which adds an additional 
			fault handler for the <code>bpws:joinFailure</code>.
			</p><p>The default value of the <code>suppressJoinFailure</code> attribute is "<code>no</code>". 
			This is to avoid unexpected behavior in simple use cases where complex graphs are not 
			involved and links without transition conditions are used for synchronization. The designers 
			of such use cases are likely to be naive about link semantics and are likely to be surprised 
			by the consequences of a default interpretation that suppresses a well-defined fault. For 
			example, consider the interpretation of the <a href="#initialexample"><b>6.1. Initial Example</b></a> with the 
			<code>suppressJoinFailure</code> attribute set to "<code>yes</code>". Suppose further that 
			the invocations of the <code>shippingProvider</code> are enclosed in a scope that 
			provides a fault handler (see <a href="#scopes"><b>13. Scopes</b></a> and 
			<a href="#faulthandlers"><b>13.4. Fault Handlers</b></a>). If one of these invocations were to fault, the 
			status of the outgoing link from the invocation would be negative, and the (implicit) 
			join condition at the target of the link would be false, but the resulting 
			<code>bpws:joinFailure</code> would be implicitly suppressed and the target activity 
			would be <em>silently</em> skipped within the sequence instead of causing the expected 
			fault.
			</p><p>If universal suppression of the <code>bpws:joinFailure</code> is desired, it is easy 
			to achieve by using the <code>suppressJoinFailure</code> attribute with a value of 
			"<code>yes</code>" in the overall <code>process</code> element at the root of the 
			business process definition.
			</p></div><div class="div3">
<h4><a name="flowgraphexample"></a>12.5.3. Flow Graph Example</h4><p>In the following example, the activities with the names <code>getBuyerInformation</code>, 
			<code>getSellerInformation</code>, <code>settleTrade</code>, <code>confirmBuyer</code>, and 
			<code>confirmSeller</code> are nodes of a graph defined through the flow activity. The 
			following links are defined:
			</p><ul><li><p>The link named <code>buyToSettle</code> starts at <code>getBuyerInformation</code> 
				(specified through the corresponding <code>source</code> element nested in 
				<code>getBuyerInformation</code>) and ends at <code>settleTrade</code> (specified 
				through the corresponding <code>target</code> element nested in <code>settleTrade</code>). 
				</p></li><li><p>The link named <code>sellToSettle</code> starts at <code>getSellerInformation</code> 
				and ends at <code>settleTrade</code>. 
				</p></li><li><p>The link named <code>toBuyConfirm</code> starts at <code>settleTrade</code> and 
				ends at <code>confirmBuyer</code>.
				</p></li><li><p>The link named <code>toSellConfirm</code> starts at <code>settleTrade</code> and 
				ends at <code>confirmSeller</code>.
				</p></li></ul><p>Based on the graph structure defined by the flow, the activities 
			<code>getBuyerInformation</code> and <code>getSellerInformation</code> can run 
			concurrently. The <code>settleTrade</code> activity is not performed before both of these 
			activities are completed. After <code>settleTrade</code> completes the two activities, 
			<code>confirmBuyer</code> and <code>confirmSeller</code> are performed concurrently again.
			</p><div class="exampleInner"><pre>&lt;flow suppressJoinFailure="yes"&gt;
  &lt;links&gt;
    &lt;link name="buyToSettle"/&gt;
    &lt;link name="sellToSettle"/&gt;
    &lt;link name="toBuyConfirm"/&gt;
    &lt;link name="toSellConfirm"/&gt;
  &lt;/links&gt;
  &lt;receive name="getBuyerInformation"&gt;
    &lt;source linkName="buyToSettle"/&gt;
   &lt;/receive&gt;
   &lt;receive name="getSellerInformation"&gt;
    &lt;source linkName="sellToSettle"/&gt;
   &lt;/receive&gt;
   &lt;invoke name="settleTrade" 
           joinCondition="bpws:getLinkStatus('buyToSettle') and
                          bpws:getLinkStatus('sellToSettle')"&gt;
    &lt;target linkName="getBuyerInformation"/&gt;
    &lt;target linkName="getSellerInformation"/&gt;
    &lt;source linkName="toBuyConfirm"/&gt;
     &lt;source linkName="toSellConfirm"/&gt;
   &lt;/invoke&gt;
  &lt;reply name="confirmBuyer"&gt;
    &lt;target linkName="toBuyConfirm"/&gt;
  &lt;/reply&gt;
  &lt;reply name="confirmSeller"&gt;
    &lt;target linkName="toSellConfirm"/&gt;
  &lt;/reply&gt; 
&lt;/flow&gt;
			</pre></div></div><div class="div3">
<h4><a name="linksandstructuredactivities"></a>12.5.4. Links and Structured Activities</h4><p>Links can cross the boundaries of structured activities. When this happens, care must 
			be taken to ensure the intended behavior of the business process. The following example 
			illustrates the behavior when links target activities within structured constructs.
			</p><p>The following flow is intended to perform the sequence of activities A, B, and C. 
			Activity B has a synchronization dependency on the two activities X and Y outside of the 
			sequence, that is, B is a target of links from X and Y. The join condition at B is missing, 
			and therefore implicitly assumed to be the default, which is the disjunction of the status 
			of the links targeted to B. The condition is therefore true if at least one of the incoming 
			links has a positive status. In this case that condition reduces to the Boolean condition 
			P(X,B) OR P(Y,B) based on the transition conditions on the links.
			</p><p>In the flow, the sequence S and the two receive activities X and Y are all concurrently 
			enabled to start when the flow starts. Within S, after activity A is completed, B cannot 
			start until the status of its incoming links from X and Y is determined and the implicit 
			join condition is evaluated. When activities X and Y complete, the join condition for B is 
			evaluated. 
			</p><p>Suppose that the expression P(X,B) OR P(Y,B) evaluates to false. In this case, the 
			standard fault <code>bpws:joinFailure</code> will be thrown, because the environmental 
			attribute <code>suppressJoinFailure</code> is set to "<code>no</code>". Thus the behavior 
			of the flow is interrupted and neither B nor C will be performed. 
			</p><p>If, on the other hand, the environmental attribute <code>suppressJoinFailure</code> is 
			set to "<code>yes</code>", then B will be skipped but C will be performed because the 
			<code>bpws:joinFailure</code> will be suppressed by the implicit scope associated with B.
			</p><div class="exampleInner"><pre>&lt;flow suppressJoinFailure="no"&gt;
  &lt;links&gt;
    &lt;link name="XtoB"/&gt;
    &lt;link name="YtoB"/&gt;
  &lt;/links&gt;

  &lt;sequence name="S"&gt;
    &lt;receive name="A" ...&gt;
      ...
    &lt;/receive&gt;
    &lt;receive name="B" ...&gt;
      &lt;target linkName="XtoB"/&gt;
      &lt;target linkName="YtoB"/&gt;
      ...
    &lt;/receive&gt;
    &lt;receive name="C" ...&gt;
      ...
    &lt;/receive&gt;
  &lt;/sequence&gt;

  &lt;receive name="X" ...&gt;
    &lt;source linkName="XtoB" transitionCondition="P(X,B)"/&gt;
    ...
  &lt;/receive&gt;
  &lt;receive name="Y" ...&gt;
    &lt;source linkName="YtoB" transitionCondition="P(Y,B)"/&gt;
    ...
   &lt;/receive&gt;
&lt;/flow&gt;
			</pre></div><p>Finally, assume that the preceding flow is slightly rewritten by linking A, B, and 
			C through links (with transition conditions with constant truth-value of "true") instead 
			of putting them into a sequence. Now, B and thus C will always be performed. Because the 
			join condition is a disjunction and the transition condition of link AtoB is the constant 
			"true", the join condition will always evaluate to "true", independent from the values 
			of P(X,B) and P(Y,B).
			</p><div class="exampleInner"><pre>&lt;flow suppressJoinFailure="no"&gt;
  &lt;links&gt;
    &lt;link name="AtoB"/&gt;
    &lt;link name="BtoC"/&gt;
    &lt;link name="XtoB"/&gt;
    &lt;link name="YtoB"/&gt;
  &lt;/links&gt;
  &lt;receive name="A"&gt;
    &lt;source linkName="AtoB"/&gt;
   &lt;/receive&gt;
   &lt;receive name="B"&gt;
    &lt;target linkName="AtoB"/&gt;
    &lt;target linkName="XtoB"/&gt;
    &lt;target linkName="YtoB"/&gt;
    &lt;source linkName="BtoC"/&gt;
   &lt;/receive&gt;
  &lt;receive name="C"&gt;
    &lt;target linkName="BtoC"/&gt;
  &lt;/receive&gt;
  &lt;receive name="X"&gt;
    &lt;source linkName="XtoB" transitionCondition="P(X,B)"/&gt;
   &lt;/receive&gt;
  &lt;receive name="Y"&gt;
    &lt;source linkName="YtoB" transitionCondition="P(Y,B)"/&gt;
   &lt;/receive&gt;
&lt;/flow&gt;
			</pre></div></div></div></div><div class="div1">
<h2><a name="scopes"></a>13. Scopes</h2><p>The behavior context for each activity is provided by a <code>scope</code>. A <code>scope</code> 
	can provide fault handlers, event handlers, a compensation handler, data variables, and correlation 
	sets.
	</p><p>All scope elements are syntactically optional and some have default semantics when omitted. 
	The syntax and semantics of scopes are explained in detail below.
	</p><div class="exampleInner"><pre>&lt;scope variableAccessSerializable="yes|no" <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
    &lt;variables&gt;?
      ...
    &lt;/variables&gt;
    &lt;correlationSets&gt;?
      ... 
    &lt;/correlationSets&gt;
    &lt;faultHandlers&gt;?
      ...
    &lt;/faultHandlers&gt;
    &lt;compensationHandler&gt;?
      ...
    &lt;/compensationHandler&gt;
    &lt;eventHandlers&gt;?
      ...
    &lt;/eventHandlers&gt;
    <em>activity</em>
  &lt;/scope&gt;
	</pre></div><p>Each scope has a primary activity that defines its normal behavior. The primary activity can 
	be a complex structured activity, with many nested activities within it to arbitrary depth. The 
	scope is shared by all the nested activities. In the following example, the scope has a primary 
	flow activity, which contains two concurrent invoke activities. Either of the invoke activities 
	can receive one or more types of fault responses. The fault handlers for the scope are shared by 
	both invoke activities and can be used to catch the faults caused by the possible fault responses.
	</p><div class="exampleInner"><pre>  &lt;scope&gt;
    &lt;faultHandlers&gt;?
      ...
    &lt;/faultHandlers&gt;
    &lt;flow&gt;
       &lt;invoke partnerLink="Seller" portType="Sell:Purchasing" 
               operation="SyncPurchase" 
               inputVariable="sendPO" 
               outputVariable="getResponse"/&gt;
       &lt;invoke partnerLink="Shipper" 
               portType="Ship:TransportOrders" 
               operation="OrderShipment" 
               inputVariable="sendShipOrder" 
               outputVariable="shipAck"/&gt;
    &lt;/flow&gt;
  &lt;/scope&gt;
	</pre></div><div class="div2">
<h3><a name="datahandling2"></a>13.1. Data Handling</h3><p>A scope can have defined variables that live only within the scope.  For further information 
		see the chapter about <a href="#datahandling"><b>9. Data Handling</b></a>.
		</p></div><div class="div2">
<h3><a name="errorhandlinginbusinessprocesses"></a>13.2. Error Handling in Business Processes</h3><p>Business processes are often of long duration and use asynchronous messages for communication. 
		They also manipulate sensitive business data in back-end databases and line-of-business applications. 
		Error handling in this environment is both difficult and business critical. The use of ACID 
		transactions is usually limited to local updates because of trust issues and because locks and 
		isolation cannot be maintained for the long periods during which technical and business errors 
		and fault conditions can occur in a business process instance. As a result, the overall business 
		transaction can fail or be cancelled after many ACID transactions have been committed during its 
		progress, and the partial work done must be undone as best as possible. Error handling in business 
		processes therefore relies heavily on the well-known concept of <em>compensation</em>, that 
		is, application-specific activities that attempt to reverse the effects of a previous activity 
		that was carried out as part of a larger unit of work that is being abandoned. There is a long 
		history of work in this area regarding the use of <a href="#ref10">[Sagas]</a> and <a href="#ref11">[Open Nested Transactions]</a>. 
		BPEL4WS provides a variant of such a compensation 
		protocol by providing the ability for flexible control of the reversal. BPEL4WS achieves 
		this by providing the ability to define fault handling and compensation in an 
		application-specific manner, resulting in a feature called Long-Running (Business) Transactions 
		(LRTs).
		</p><p>It is important to understand that the notion of LRT described here is meant to be used 
		purely within a platform-specific implementation. There is no prescribed requirement that the 
		business process be distributed or span multiple vendors and platforms. For such environments, 
		it is expected that the WS-Transaction specification <a href="#ref12">[WS-Transaction]</a> would be utilized to register 
		participants interested in the reversal notifications provided by the LRT implementation. 
		See <a href="#appendixc"><b>20.3. Appendix C - Coordination Protocol</b></a> for a detailed model of BPEL4WS LRTs based on WS-Transaction concepts.
		</p><p>Additionally, it is important to understand that the notion of LRT described here is purely 
		local and occurs within a single business process instance. There is no distributed coordination 
		regarding an agreed-upon outcome among multiple-participant services. The achievement of 
		distributed agreement is an orthogonal problem outside the scope of BPEL4WS, to be solved by 
		using the protocols described in the WS-Transaction specification. The need to compose 
		WS-transaction with BPEL4WS is recognized.
		</p><p>As an example of an LRT, consider the planning and fulfillment of a travel itinerary. This 
		can be viewed as an LRT in which individual service reservations can use nested transactions 
		within the scope of the overall LRT. If the itinerary is cancelled, the reservation transactions 
		must be compensated for by cancellation transactions, and the corresponding payment transactions 
		must be compensated accordingly. For ACID transactions in databases the transaction coordinator(s) 
		and the resources that they control know all of the uncommitted updates and the order in which they 
		must be reversed, and they are in full control of such reversal. In the case of business transactions, 
		the compensation behavior is itself a part of the business logic and protocol, and must be explicitly 
		specified. For example, there might be penalties or fees applied for cancellation of an airline 
		reservation depending on the class of ticket and the timing. If a payroll advance has been given 
		to pay for the travel, the reservation must be successfully cancelled before the payroll advance 
		for it can be reversed in the form of a payroll deduction. This means the compensation actions might 
		need to run in the same order as the original transactions, which is not the standard or default in 
		most transaction systems. Using activity scopes as the definition of logical units of work, the LRT 
		feature of BPEL4WS addresses these requirements.
		</p></div><div class="div2">
<h3><a name="compensationhandlers"></a>13.3. Compensation Handlers</h3><p>Scopes can delineate a part of the behavior that is meant to be reversible in an 
		application-defined way by a compensation handler. Scopes with compensation and fault 
		handlers can be nested without constraint to arbitrary depth.
		</p><div class="div3">
<h4><a name="definingacompensationhandler"></a>13.3.1. Defining a Compensation Handler</h4><p>A compensation handler in the current version of BPEL4WS is simply a wrapper for a 
			compensation activity as shown below. It is recognized that in many scenarios the 
			compensation handler needs to receive data about the current state of the world and 
			return data regarding the results of the compensation.
			</p><div class="exampleInner"><pre>  &lt;compensationHandler&gt;?
    <em>activity</em>
  &lt;/compensationHandler&gt;
			</pre></div><p>As explained in <a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a>, there is a special 
			shortcut for the invoke activity to inline a compensation handler rather than explicitly 
			using an immediately enclosing scope. For example:
			</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
          operation="SyncPurchase" 
          inputVariable="sendPO" 
          outputVariable="getResponse"&gt;
    &lt;correlations&gt;
       &lt;correlation set="PurchaseOrder" initiate="yes" 
                    pattern="out"/&gt;
    &lt;/correlations&gt;

    &lt;compensationHandler&gt;
        &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
                operation="CancelPurchase" 
                inputVariable="getResponse"
                outputVariable="getConfirmation"&gt;
          &lt;correlations&gt;
              &lt;correlation set="PurchaseOrder" pattern="out"/&gt;
          &lt;/correlations&gt;
        &lt;/invoke&gt;
    &lt;/compensationHandler&gt;
  &lt;/invoke&gt;
			</pre></div><p>In this example, the original invoke activity makes a purchase and in case that 
			purchase needs to be compensated, the <code>compensationHandler</code> invokes a cancellation 
			operation at the same port of the same partnerLink, using the response to the purchase request 
			as the input.
			</p><p>In standard syntax (without the invoke shortcut) this example would be equivalently 
			expressed as follows:
			</p><div class="exampleInner"><pre>  &lt;scope&gt;
    &lt;compensationHandler&gt;
        &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
                operation="CancelPurchase" 
                inputVariable="getResponse"
                outputVariable="getConfirmation"&gt;
           &lt;correlations&gt;
              &lt;correlation set="PurchaseOrder" pattern="out"/&gt;
           &lt;/correlations&gt;
        &lt;/invoke&gt;
    &lt;/compensationHandler&gt;
    &lt;invoke partnerLink="Seller" portType="SP:Purchasing" 
            operation="SyncPurchase" 
            inputVariable="sendPO" 
            outputVariable="getResponse"&gt;
       &lt;correlations&gt;
          &lt;correlation set="PurchaseOrder" initiate="yes" 
                       pattern="out"/&gt;
       &lt;/correlations&gt;
    &lt;/invoke&gt;
  &lt;/scope&gt;
			</pre></div><p>Note that the variable <code>getResponse</code> can be reused later for other purposes 
			before compensation is invoked. But the compensation handler needs the specific response to 
			the <code>invoke</code> operation that is being reversed. BPEL4WS semantics state that the 
			compensation handler, if invoked, will see a frozen snapshot of all variables, as they were 
			when the scope being compensated was completed. In other words, if the compensation handler 
			shown here is used, the contents of <code>getResponse</code> that it will see and use are 
			exactly the contents at the time of the completion of the invoke activity it compensates. 
			This also means that compensation handlers cannot update live data in the variables that 
			the business process is using. They live entirely in a snapshot world. A compensation handler, 
			once installed, can be thought of as a completely self-contained action that is not affected 
			by, and does not affect, the global state of the business process instance. It can only 
			affect external entities.
			</p><p>It is not realistic to expect compensation activities to always be oblivious to the 
			current state of the world. In fact, compensation both affects and is affected by the current 
			state. However, the shape of the world within which compensation is run is difficult to 
			anticipate. It is therefore necessary to allow the two-way interaction between compensation 
			activities and the live world to take place in a tightly controlled manner. In the future, 
			BPEL4WS will add input and output parameters to compensation handlers for this purpose.
			</p><p>As stated in <a href="#thelifecycleofabusinessprocess"><b>6.4. The Lifecycle of a Business Process</b></a>, if a compensation 
			handler is specified for the business process as a whole, a business process instance can 
			be compensated <em>after normal completion</em> by platform-specific means. This 
			functionality is enabled by setting the <code>enableInstanceCompensation</code> attribute 
			of the<code>process</code> to "<code>yes</code>".
			</p></div><div class="div3">
<h4><a name="invokingacompensationhandler"></a>13.3.2. Invoking a Compensation Handler</h4><p>The compensation handler can be invoked by using the <code>compensate</code> activity, 
			which names the scope for which the compensation is to be performed, that is, the scope 
			whose compensation handler is to be invoked. A compensation handler for a scope is available 
			for invocation only when the scope completes normally. Invoking a compensation handler that 
			has not been installed is equivalent to the empty activity (it is a no-op)-this ensures that 
			fault handlers do not have to rely on state to determine which nested scopes have completed 
			successfully.  The semantics of a process in which an installed compensation handler is 
			invoked more than once is undefined.
			</p><p>Note that in case an invoke activity has a compensation handler defined inline, the name 
			of the activity is the name of the scope to be used in the <code>compensate</code> activity.
			</p><div class="exampleInner"><pre>  &lt;compensate scope="ncname"? <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/compensate&gt;
			</pre></div><p>The ability to explicitly invoke the <code>compensate</code> activity is the 
			underpinning of the application-controlled error-handling framework of BPEL4WS. This 
			activity can be used only in the following parts of a business process:
			</p><ul><li><p>In a fault handler of the scope that immediately encloses the scope for which compensation is to be performed. </p></li><li><p>In the compensation handler of the scope that immediately encloses the scope for which compensation is to be performed. </p></li></ul><p>Example:
			</p><div class="exampleInner"><pre>&lt;compensate scope="RecordPayment"/&gt;
			</pre></div><p>If a scope being compensated by name was nested in a loop, the instances of the 
			compensation handlers in the successive iterations are invoked in reverse order.
			</p><p>If the compensation handler for a scope is absent, the default compensation handler 
			invokes the compensation handlers for the immediately enclosed scopes in the reverse order 
			of the completion of those scopes.
			</p><p>The <code>&lt;compensate/&gt;</code> form, in which the scope name is omitted in a 
			<code>compensate</code> activity, causes this default behavior to be invoked explicitly. 
			This is useful when an enclosing fault or compensation handler needs to perform additional 
			work, such as updating variables or sending external notifications, in addition to performing 
			default compensation for inner scopes. Note that the <code>&lt;compensate/&gt;</code> activity 
			in a fault or compensation handler attached to scope S causes the default-order invocation 
			of compensation handlers for completed scopes directly nested within S. The use of this 
			activity can be mixed with any other user-specified behavior except the explicit invocation 
			of <code>&lt;compensate scope="Sx"/&gt;</code> for scope Sx nested directly within S. 
			Explicit invocation of compensation for such a scope nested within S disables the availability 
			of default-order compensation, as expected.
			</p></div></div><div class="div2">
<h3><a name="faulthandlers"></a>13.4. Fault Handlers</h3><p>Fault handling in a business process can be thought of as a mode switch from the normal 
		processing in a scope.  Fault handling in BPEL4WS is always treated as "reverse work" in that 
		its sole aim is to undo the partial and unsuccessful work of a scope in which a fault has 
		occurred.  The completion of the activity of a fault handler, even when it does not rethrow 
		the fault handled, is never considered successful completion of the attached scope and compensation 
		is never enabled for a scope that has had an associated fault handler invoked.
		</p><p>The optional fault handlers attached to a scope provide a way to define a set of custom 
		fault-handling activities, syntactically defined as <code>catch</code> activities. Each 
		<code>catch</code> activity is defined to intercept a specific kind of fault, defined by a 
		globally unique fault QName and a variable for the data associated with the fault.  If the 
		fault name is missing, then the catch will intercept all faults with the right type of fault 
		data. The fault variable is specified using the faultVariable attribute in a catch handler.  
		The variable is deemed to be declared by virtue of being used as the value of this attribute 
		and is local to the fault handler.  It is not visible or usable outside the fault handler in 
		which it is declared.  The fault variable is optional because a fault might not have additional 
		data associated with it.
		</p><p>A fault response to an invoke activity is one source of faults, with obvious name and 
		data aspects based on the definition of the fault in the WSDL operation. A programmatic 
		<code>throw</code> activity is another source, again with explicitly given name and data.   
		The core concepts and exexutable pattern extensions of BPEL4WS define several standard faults 
		with their names and data, and there might be other platform-specific faults such as 
		communication failures that can occur in a business process instance. A catchAll clause 
		can be added to catch any fault not caught by a more specific catch handler.
		</p><div class="exampleInner"><pre>  &lt;faultHandlers&gt;?
    &lt;!-- there must be at least one fault handler or default --&gt;
    &lt;catch faultName="qname"? faultVariable="ncname"?&gt;*
      activity
    &lt;/catch&gt;
    &lt;catchAll&gt;?
      activity
    &lt;/catchAll&gt;
  &lt;/faultHandlers&gt;
		</pre></div><p>Because of the flexibility allowed in expressing the faults that a <code>catch</code> activity 
		can handle, it is possible for a fault to match more than one fault handler. The following rules 
		are used to select the <code>catch</code> activity that will process a fault:
		</p><ol type="1"><li><p>If the fault has no associated fault data, a <code>catch</code> activity that 
			specifies a matching <code>faultName</code> value will be selected if present. 
			Otherwise, the default <code>catchAll</code> handler is selected if present. 
			</p></li><li><p>If the fault has associated fault data, a <code>catch</code> activity specifying 
			a matching <code>faultName</code> value <em>and</em> a <code>faultVariable</code> whose 
			type (WSDL message type) matches the type of the fault's data will be selected if present. 
			Otherwise, a <code>catch</code> activity with no specified <code>faultName</code> and with 
			a <code>faultVariable</code> whose type matches the type of the fault data will be 
			selected if present. Otherwise, the default <code>catchAll</code> handler is selected 
			if present.
			</p></li></ol><p>If no <code>catch</code> or <code>catchall</code> is selected, the fault is not caught 
		by the current scope and is rethrown to the immediately enclosing scope (see 
		<a href="#implicitfaultandcompensationhandlers"><b>13.4.1. Implicit Fault and Compensation Handlers</b></a> for a more complete 
		description of the default fault and compensation handling behavior).  If the fault occurs 
		in (or is rethrown to) the global process scope, and there is no matching fault handler for 
		the fault at the global level, the process terminates abnormally, as though a terminate 
		activity had been performed.
		</p><p>Consider the following example:
		</p><div class="exampleInner"><pre>&lt;faulthandlers&gt;
	&lt;catch faultName="x:foo"&gt;
         &lt;empty/&gt;
      &lt;/catch&gt;
	&lt;catch faultVariable="bar"&gt;
         &lt;empty/&gt;
      &lt;/catch&gt;
	&lt;catch faultName="x:foo" faultVariable="bar"&gt;
         &lt;empty/&gt;
      &lt;/catch&gt;
	&lt;catchAll&gt;
         &lt;empty/&gt;
      &lt;/catchAll&gt;
&lt;/faulthandlers&gt;
		</pre></div><p>Assume that a fault named "x:foo" is thrown. The first <code>catch</code> will be selected 
		if the fault carries no fault data. If there is fault data associated with the fault, the 
		third <code>catch</code> will be selected if and only if the type of the fault's data matches 
		the type of variable "bar", otherwise the default <code>catchall</code> handler will be selected. 
		Finally, a fault with a fault variable whose type matches the type of "bar" and whose name 
		is not "x:foo" will be processed by the second <code>catch</code>. All other faults will be 
		processed by the default <code>catchall</code> handler.
		</p><p>Although the use of compensation can be a key aspect of the behavior of fault handlers, 
		each handler performs an arbitrary activity, which can even be <code>&lt;empty/&gt;</code>. 
		When a fault handler is present, it is in charge of handling the fault. It might rethrow the 
		same fault or a different one, or it might handle the fault by performing cleanup and allowing 
		normal processing to continue in the enclosing scope.
		</p><p>A scope in which a fault occurred is considered to have ended abnormally, whether or not the 
		fault was caught and handled without rethrow by a fault handler. A compensation handler is never 
		installed for a scope in which a fault occurred.
		</p><p>When a fault handler for scope S handles a fault that occurred in S without rethrowing, 
		links that have S as the source will be subject to regular evaluation of status after the fault 
		has been handled, because processing in the enclosing scope is meant to be continued.
		</p><p>As explained in <a href="#invokingwebserviceoperations"><b>11.3. Invoking Web Service Operations</b></a>, there is a special 
		shortcut for the invoke activity to inline fault handlers rather than explicitly using an 
		immediately enclosing scope. For example:
		</p><div class="exampleInner"><pre>  &lt;invoke partnerLink="Seller" 
          portType="SP:Purchasing" 
          operation="SyncPurchase" 
          inputVariable="sendPO" 
          outputVariable="getResponse"&gt;
    &lt;catch faultName="SP:POFault" faultVariable="POFault"&gt;
      &lt;!-- handle the fault --&gt;
    &lt;/catch&gt;
  &lt;/invoke&gt;
		</pre></div><p>In this example, the original <code>invoke</code> makes a purchase and a fault handler 
		is inlined to handle the case where the purchase request results in a fault response. In 
		standard syntax (without the invoke shortcut), this example would be equivalently expressed 
		as follows:
		</p><div class="exampleInner"><pre>&lt;scope&gt;
  &lt;faultHandlers&gt;
    &lt;catch faultName="SP:POFault" faultVariable="POFault"&gt;
      &lt;!-- handle the fault --&gt;
    &lt;/catch&gt;
  &lt;/faultHandlers&gt;
  &lt;invoke partnerLink="Seller" 
          portType="SP:Purchasing" 
          operation="SyncPurchase" 
          inputVariable="sendPO" 
          outputVariable="getResponse"&gt;
  &lt;/invoke&gt;
&lt;/scope&gt;
		</pre></div><p>The compensation handler for scope C becomes available for invocation by the fault and 
		compensation handlers for its immediately enclosing scope exactly when scope C completes 
		normally. A fault handler for scope C is available for invocation exactly when C has 
		commenced but has not been completed. If the scope faults before completion, then the appropriate 
		fault handler gets control and all other fault handlers are uninstalled. It is never possible 
		to run more than one fault handler for the same scope under any circumstances.
		</p><p>Note that availability also applies to <a href="#implicitfaultandcompensationhandlers"><b>13.4.1. Implicit Fault and Compensation Handlers</b></a>.
		</p><p>The behavior of a fault handler for scope C begins by implicitly terminating all activities 
		that are currently active and directly enclosed within C (see 
		<a href="#semanticsofactivitytermination"><b>13.4.2. Semantics of Activity Termination</b></a>). The termination of these 
		activities occurs before the specific behavior of a fault handler is started. This also 
		applies to the implicit fault handlers described below.  The activity of a fault handler 
		is deemed to occur in the scope to which the fault handler is attached.
		</p><div class="div3">
<h4><a name="implicitfaultandcompensationhandlers"></a>13.4.1. Implicit Fault and Compensation Handlers</h4><p>Because the visibility of scope names and therefore of compensation handlers is 
			limited to the next enclosing scope, the ability to compensate a scope would be lost 
			if the enclosing scope did not have a compensation handler or was missing a fault handler 
			for some fault. Because many faults are not programmatic or the result of operation 
			invocation, it is not reasonable to expect an explicit handler for every fault in every 
			scope. BPEL4WS therefore provides default compensation and fault handlers when these are 
			missing. The behavior of these implicit handlers is to run available compensation handlers 
			in the reverse order of completion of the corresponding scopes. This is defined in more 
			precise terms below.
			</p><p>Whenever a fault handler (for any fault) or the compensation handler is missing for 
			any given scope, they are implicitly created with the following behavior:
			</p><p><em>Fault handler:</em></p><ul><li><p>Run
all available compensation handlers for immediately enclosed scopes in
the reverse order of completion of the corresponding scopes. </p></li><li><p>Rethrow the fault to the next enclosing scope.</p></li></ul><p><em>Compensation handler:</em></p><ul><li><p>Run all available compensation handlers for immediately enclosed 
				scopes in the reverse order of completion of the corresponding scopes.
				</p></li></ul></div><div class="div3">
<h4><a name="semanticsofactivitytermination"></a>13.4.2. Semantics of Activity Termination</h4><p>As stated above, the behavior of a fault handler for scope C begins by implicitly 
			terminating all activities directly enclosed within C that are currently active. The 
			following paragraphs define what this means for all BPEL4WS activity types.
			</p><p>The <em>assign</em> activities are sufficiently short-lived that they are allowed 
			to complete rather than being interrupted when termination is forced. The evaluation of 
			expressions when already started is also allowed to complete. Each <em>wait</em>, 
			<em>receive</em>, <em>reply</em> and <em>invoke</em> activity is interrupted 
			and terminated prematurely.  When a synchronous <em>invoke</em> activity (corresponding 
			to a request/reply operation) is interrupted and terminated prematurely, the response 
			(if received) for such a terminated activity is silently discarded.  The notion of 
			termination does not apply to <em>empty</em>, <em>terminate</em>, and <em>throw</em>.
			</p><p>All structured activity behavior is interrupted. The iteration of <em>while</em> is 
			interrupted and termination is applied to the loop body activity. If <em>switch</em> 
			has selected a branch, then the termination is applied to the activity of the selected 
			branch. The same applies to <em>pick</em>. If either of these activities has not yet 
			selected a branch, then the <em>switch</em> and the <em>pick</em> are terminated 
			immediately. The <em>sequence</em> and <em>flow</em> constructs are terminated by 
			terminating their behavior and applying termination to all nested activities currently 
			active within them.
			</p><p>Scopes provide the ability to control the semantics of forced termination to some degree. 
			When the activity being terminated is in fact a scope, the behavior of the scope is 
			interrupted and the fault handler for the standard <em>bpws:forcedTermination</em> fault is run. 
			Note that this applies only if the scope is in normal processing mode. If the scope has 
			already experienced an internal fault and invoked a fault handler, then as stated above, 
			all other fault handlers including the handler for <em>bpws:forcedTermination</em> are 
			uninstalled, and the forced termination has no effect. The already active fault handler is 
			allowed to complete.
			</p><p>The fault handler for the <em>bpws:forcedTermination</em> fault is designed like 
			other fault handlers, but this fault handler cannot rethrow any fault. Even if an uncaught 
			fault occurs during its behavior, it is not rethrown to the next enclosing scope. This is 
			because the enclosing scope has already faulted, which is what is causing the forced 
			termination of the nested scope.
			</p><p>In other respects this is a normal fault handler. Its behavior begins by implicitly 
			(recursively) terminating all activities directly enclosed within its associated scope 
			that are currently active. It can invoke compensate activities. And when it is missing, 
			it is provided by using the same implicit behavior that is used for all other implicit 
			fault handlers.
			</p><p>Note that forced termination of nested scopes occurs in innermost-first order as a 
			result of the rule (quoted above) that the behavior of any fault handler begins by 
			implicitly (recursively) terminating all activities directly enclosed within its associated 
			scope that are currently active.
			</p></div><div class="div3">
<h4><a name="handlingfaultsthatoccurinsidefaultandcompensationhandlers"></a>13.4.3. Handling Faults That Occur Inside Fault and Compensation Handlers</h4><p>Compensation handlers are always invoked directly or indirectly as part of the 
			processing of some fault handler E. The behavior of a compensation handler invoked 
			by E can cause a fault to be thrown. Such a fault, if uncaught by scopes within the 
			chain of compensation handlers invoked by E, is treated as being a fault within E.
			</p><p>If a fault occurs in a fault handler E for a scope C, the fault can be caught 
			through the use of a scope <em>within</em> E. If the fault is not caught by a scope within E, 
			it is immediately thrown to the parent scope of C and the behavior of E terminates 
			prematurely. In effect, no distinction is made between faults that E rethrows 
			deliberately and faults that occur as undesired faults in E.
			</p></div></div><div class="div2">
<h3><a name="eventhandlers"></a>13.5. Event Handlers</h3><p>The whole process as well as each scope can be associated with a set of event handlers 
		that are invoked concurrently if the corresponding event occurs. The actions taken within 
		an event handler can be any type of activity, such as sequence or flow, but invocation of 
		compensation handlers using the &lt;compensate/&gt; activity is not permitted.  As stated earlier, 
		the &lt;compensate/&gt; activity can only be used in fault and compensation handlers. There are 
		two types of events. First, events can be incoming messages that correspond to a request/response 
		or one-way operation in WSDL. For instance, a status query is likely to be a request/response 
		operation, whereas a cancellation may be a oneway operation.  Second, events can be alarms, 
		that go off after user-set times. The grammar for the set of event handlers associated with 
		a scope or process is
		</p><div class="exampleInner"><pre>  &lt;eventHandlers&gt;?
    &lt;!-- there must be at least one onMessage or 
         onAlarm handler --&gt;
    &lt;onMessage partnerLink="ncname" portType="qname" 
               operation="ncname"
               variable="ncname"?&gt;*
 
      &lt;correlations&gt;?
          &lt;correlation set="ncname" initiate="yes|no"&gt;+
      &lt;/correlations&gt;
      activity
    &lt;/onMessage&gt;
    &lt;onAlarm for="duration-expr"? until="deadline-expr"?&gt;*
      activity
    &lt;/onAlarm&gt;
  &lt;/eventHandlers&gt;
		</pre></div><p>It is important to emphasize that event handlers are considered a part of the normal 
		behavior of the scope, unlike fault and compensation handlers.
		</p><div class="div3">
<h4><a name="messageevents"></a>13.5.1. Message Events</h4><p>The <em>onMessage</em> tag indicates that the event specified is an event that 
			waits for a message to arrive.  The interpretation of this tag and its attributes is 
			very similar to a receive activity.  The <em>partnerLink</em> attribute defines the 
			partner link on which the request is expected to arrive; the partnerLink must be defined 
			in the <em>partnerLinks</em> section. The <em>portType</em> and <em>operation</em> 
			attributes define the appropriate port type and operation that is invoked by the partner in order 
			to cause the event. The variable attribute identifies the variable which contains the 
			message received from the partner.  Note that the operation may be either an asynchronous 
			(oneway) or a synchronous (request/response) operation.  In the latter case the event 
			handler is expected to use a <em>reply</em> activity to send the response.   The usage 
			and interpretation of correlation is exactly the same as for receive activities. It should 
			also be noted that an event cannot create a process instance.
			</p><p>The semantics of the onMessage event is identical to a receive activity regarding the 
			optional nature of the variable attribute and the constraint regarding simultaneous 
			enablement of conflicting receive actions.  For the latter, recall that the semantics 
			of a process in which two or more <em>receive</em> actions for the same partner link, 
			portType, operation and correlation set(s) may be simultaneously enabled is undefined 
			(see <a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>).  Enablement of each 
			<em>onMessage</em> event handler is equivalent to enablement of the corresponding 
			<em>receive</em> activity for the purposes of this constraint.
			</p><p>As specified in the grammar above, event handlers for message events are not permitted 
			to carry the createInstance attribute.  A business process instance cannot be created by 
			a message event.  This is because the event handler cannot be enabled until the instance 
			is created. 
			</p><p>When the message constituting an event arrives, the activity specified in the 
			corresponding handler is carried out.  The key point to understand is that the business 
			process is enabled to receive such messages concurrently with the normal activity of the 
			scope to which the event handler is attached.  This allows such events to occur (or not 
			occur) at arbitrary times and an arbitrary number of times while the corresponding scope 
			(which may be the entire business process instance) is active.
			</p><p>The following example shows the usage of an event handler to support the termination 
			of a process instance through an external message.  Alternatively, the event handler could 
			throw a fault to cause the ongoing work to be undone and compensated.
			</p><div class="exampleInner"><pre>&lt;process name="orderCar"&gt;
  ... 
  &lt;eventHandlers&gt;
     &lt;onMessage partnerLink="buyer"
                portType="car"
                operation="cancel"
                variable="cancelDetails"&gt;
       &lt;terminate/&gt;
     &lt;/onMessage&gt;
     ...
  &lt;/eventHandlers&gt;
  ...
&lt;/process&gt;
			</pre></div><p>In this example, if the buyer invokes the cancel operation on the port type car, 
			the <em>terminate</em> activity is carried out, which results in immediate termination 
			of the process instance without the ongoing work being undone and compensated.  And this 
			event is attached to the global process scope and is therefore available during the lifetime 
			of the entire business process instance.
			</p></div><div class="div3">
<h4><a name="alarmevents"></a>13.5.2. Alarm events</h4><p>The <em>onAlarm</em> tag marks a timeout event. The for attribute specifies the 
			duration after which the event will be signaled.  The clock for the duration starts at 
			the point in time when the associated scope starts.  The alternative until attribute 
			specifies the specific point in time when the alarm will be fired.  Exactly one of these 
			two attributes must occur in any <em>onAlarm</em> event.
			</p></div><div class="div3">
<h4><a name="enablementofevents"></a>13.5.3. Enablement of Events</h4><p>The event handlers associated with a scope are enabled when the associated scope starts.
			</p><p>If the event handler is associated with the global process scope, the event 
			handler is enabled as soon as the process instance is created. The process instance 
			is created when the first <em>receive</em> activity that provides for the creation 
			of a process instance (indicated via the <em>createInstance</em> attribute set to 
			<em>yes</em>) has received and processed the corresponding message. This allows 
			the alarm time for a global alarm event to be specified using the data provided within 
			the message that creates a process instance, as shown in the following example:
			</p><div class="exampleInner"><pre>&lt;wsdl:definitions 
    targetNamespace="http://www.example.com/wsdl/exmple" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    ...&gt;
     &lt;wsdl:message name="orderDetails"&gt;
        &lt;part name="processDuration" 
              type="xsd:duration"/&gt;
     &lt;/wsdl:message&gt;
&lt;/wsdl:definitions&gt;
			</pre></div><p>The message type above is used in
			</p><div class="exampleInner"><pre>&lt;process name="orderCar"
     xmlns:def="http://www.example.com/wsdl/example" ...&gt;
  ...
  &lt;eventHandlers&gt;
     &lt;onAlarm for=
        "bpws:getVariableData(orderDetails,processDuration)"
     &gt;
       ...
     &lt;/onAlarm&gt;
     ...
  &lt;/eventHandlers&gt;
  ...
  &lt;variable name="orderDetails" messageType="def:orderDetails"/&gt;
  &lt;/variable&gt;
  ...
  &lt;receive name="getOrder"
           partnerLink="buyer"
           portType="car"
           operation="order"
           variable="orderDetails"
           createInstance="yes"/&gt;
  ...
&lt;/process&gt;
			</pre></div><p>The <em>onAlarm</em> tag specifies a timer event that is fired when the duration 
			specified in the <em>processDuration</em> field in the <em>orderDetails</em> 
			variable is exceeded. The value of the field is provided via the <em>getOrder</em> 
			activity that receives message containing the order details and causes the creation of 
			a process instance for that order.
			</p><p><em>13.5.4.1 ALARM EVENTS</em></p><p>The counting of time for an alarm event with a duration starts when the enclosing 
			event handler is activated. An alarm event goes off when the specified time or duration 
			has been reached. An alarm event is carried out at most once while the corresponding scope 
			is active. The event is disabled for the rest of the activity of the corresponding scope 
			after it has occurred and the specified processing has been carried out.
			</p><p><em>13.5.4.2 MESSAGE EVENTS</em></p><p>A message event occurs when the appropriate message is received on the specified partner 
			link using the specified port type and operation.  When such an event occurs, the 
			corresponding activity is carried out.  However, the event remains enabled, even for 
			concurrent use.  Thus a particular message event can occur multiple times while the 
			corresponding scope is active.   See below for concurrency considerations.   
			</p></div><div class="div3">
<h4><a name="disablementofevents"></a>13.5.4. Disablement of Events</h4><p>All event handlers associated with a scope are disabled when the normal processing 
			of the scope is complete.  The already dispatched event handlers are allowed to complete.  
			The completion of the scope as a whole is delayed until all active event handlers have 
			completed.
			</p></div><div class="div3">
<h4><a name="faulthandlingconsiderations"></a>13.5.5. Fault Handling Considerations</h4><p>As we stated above, event handlers are considered a part of the normal processing 
			of the scope, i.e., active event handlers are concurrent activities within the scope.  
			Faults within event handlers are therefore faults within the associated scope.  Moreover, 
			if a fault occurs within a scope, the behavior of the fault handler begins by implicitly 
			terminating all activities directly enclosed within the scope that are currently active.  
			This includes the activities within currently active event handlers.
			</p></div><div class="div3">
<h4><a name="concurrencyconsiderations"></a>13.5.6. Concurrency Considerations</h4><p>Multiple message and alarm events can occur concurrently and they are treated as 
			concurrent activities even if they are request/response events representing the same 
			partner link, port type, operation and correlation sets.  The constraint that there 
			can be at most one outstanding synchronous request on a given partner link at a given 
			port type and operation applies here as well (see 
			<a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>).  Concurrent invocation of event 
			handlers necessarily relies heavily on the use of serializable scoping to ensure consistent 
			access to shared variables.
			</p></div></div><div class="div2">
<h3><a name="serializablescopes"></a>13.6. Serializable Scopes</h3><p>When the <em>variableAccessSerializable</em> attribute is set to "<em>yes</em>", the 
		scope provides concurrency control in governing access to shared variables. Such a scope is 
		called a <em>serializable scope</em>. Serializable scopes must not be nested. A scope 
		marked with <em>variableAccessSerializable="yes"</em> must be a leaf scope.
		</p><p>Suppose two concurrent serializable scopes, S1 and S2, access a common set of variables 
		(external to them) for read or write operations. The semantics of serializability ensure 
		that the results of their behavior would be no different if all conflicting activities 
		(read/write and write/write activities) on any shared variable were conceptually reordered 
		in such a way that either all activities within S1 are completed before those in S2 or 
		<em>vice versa</em>. The actual mechanisms used to ensure serializability are 
		implementation dependent.
		</p><p>The use of error handling features in a serializable scope is governed by the following rules:
		</p><ul><li><p>The
fault handlers for a serializable scope share the serializability
domain of the associated scope, that is, in case a fault occurs in a
serializable scope, the behavior of the fault handler is considered
part of the serializable behavior (in commonly used implementation
terms, locks are not released when making the transition to the fault
handler). This is because the repair of the fault needs a shared
isolation environment to provide predictable behavior. </p></li><li><p>The compensation handler for a serializable scope does not share the serializability domain of the associated scope.</p></li><li><p>For
a serializable scope with a compensation handler, the creation of the
state snapshot for compensation is part of the serializable behavior.
In other words, it is always possible to reorder behavior steps as if
the scope had sufficiently exclusive access to the shared variables all
the way to completion, including the creation of the snapshot.</p></li></ul><p>It is useful to note that the semantics of serializable scopes are very similar to the 
		standard isolation level "serializable" used in database transactions.
		</p></div></div><div class="div1">
<h2><a name="extensionsforexecutableprocesses"></a>14. Extensions for Executable Processes</h2><p>In this section we define the essential extensions required for the use of BPEL4WS to define 
	executable processes.  The extensions are grouped by the core concepts to which they apply.
	</p><div class="div2">
<h3><a name="expressions2"></a>14.1. Expressions</h3><p>These extensions refer to the <a href="#expressions"><b>9.1. Expressions</b></a> feature of BPEL4WS.
		</p><p>The first extension defines a standard fault for errorneous use of the XPath 1.0 function 
		defined for extracting global property values from variables.
		</p><div class="exampleInner"><pre>bpws:getVariableProperty ('variableName', 'propertyName') 
		</pre></div><p>The first argument names the source variable for the data and the second is the qualified 
		name (QName) of the global property to select from that variable (see 
		<a href="#messageproperties"><b>8. Message Properties</b></a>). If the given property does not appear in any of 
		the parts of the variable's message type or the given property definition selects a node 
		set of a size other than one, then the standard fault <em>bpws:selectionFailure</em> MUST 
		be thrown by a compliant implementation.
		</p><p>The second extension defines an additional XPath 1.0 function usable only in executable 
		processes.  This function extracts arbitrary values from variables.
		</p><div class="exampleInner"><pre>bpws:getVariableData ('variableName', 'partName'?, 'locationPath'?)
		</pre></div><p>The first argument names the source variable for the data, the second and third arguments 
		are optional. When present, the second names the part to select from that variable, and the 
		third optional argument, when present, provides an absolute location path (with '/' meaning 
		the root of the document fragment representing the entire part) to identify the root of a 
		subtree within the document fragment representing the part.
		</p><p>When only the first argument is present, the function extracts the value of the variable, 
		which in this case must be defined using an XML Schema simple type or element.  Otherwise, 
		the return value of this function is a node set containing the single node representing 
		either an entire part of a message type(if the second argument is present and the third 
		argument is absent) or the result of the selection based on the locationPath (if both 
		optional arguments are present). If the given locationPath selects a node set of a size 
		other than one during execution, then the standard fault <em>bpws:selectionFailure</em> 
		MUST be thrown by a compliant implementation.
		</p></div><div class="div2">
<h3><a name="variables2"></a>14.2. Variables</h3><p>These extensions apply to the <a href="#variables"><b>9.2. Variables</b></a> feature of BPEL4WS.
		</p><p>An attempt during process execution to use any part of a variable before it is 
		initialized MUST result in the standard <code>bpws:uninitializedVariable</code> fault.
		</p></div><div class="div2">
<h3><a name="assignment2"></a>14.3. Assignment</h3><p>These extensions apply to the <a href="#assignment"><b>9.3. Assignment</b></a> feature of BPEL4WS.
		</p><p>The first extension adds an additional assignment form.
		</p><p>In the first <em>from-spec</em> and <em>to-spec</em> variants of assignment, an 
		optional query attribute may be used in executable processes, yielding the forms
		</p><div class="exampleInner"><pre>&lt;from variable="ncname" part="ncname"? query="queryString"?/&gt;
&lt;to variable="ncname" part="ncname"? query="queryString"?/&gt;
		</pre></div><p>The value of the query attribute is a query string to identify a single value within a 
		source or target variable part. BPEL4WS provides an extensible mechanism for the language 
		used in these queries. The language is specified by the attribute "queryLanguage" of the 
		&lt;process&gt; element. Compliant implementations of the current version of BPEL4WS MUST support 
		the use of XPath 1.0 as the query language. XPath 1.0 is indicated by the default value of 
		the queryLanguage attribute, which is:
		</p><div class="exampleInner"><pre>	http://www.w3.org/TR/1999/REC-xpath-19991116
		</pre></div><p>For XPath 1.0, the value of the query attribute MUST be an absolute 
		<em><a href="http://www.w3.org/TR/xpath.html#NT-LocationPath">locationPath</a></em> (with '/' 
		meaning the root of the document fragment representing the entire part). It is used to 
		identify the root of a subtree within the document fragment representing the part. The 
		location path MUST select exactly one node. If the location path selects zero nodes or more 
		than one node during execution, then the standard fault <code>bpws:selectionFailure</code> 
		MUST be thrown by a compliant implementation.
		</p><p>The second extension defines a standard fault for violation of type matching constraints. 
		If any of the matching constraints defined in the section 
		<a href="#typecompatibilityinassignment"><b>9.3.1. Type Compatibility in Assignment</b></a> is violated during execution, the 
		standard fault <code>bpws:mismatchedAssignmentFailure</code> MUST be thrown by a compliant 
		implementation.
		</p><p>The second extension defines the behavior of assignment in the presence of failure 
		during execution.  An important characteristic of assignment in BPEL4WS is that assignment 
		activities are <em>atomic</em>. If there is any fault during the execution of an 
		assignment activity, the destination variables are left unchanged as they were at the 
		start of the activity. This applies regardless of the number of assignment elements 
		within the overall assignment activity.
		</p></div><div class="div2">
<h3><a name="correlation2"></a>14.4. Correlation</h3><p>After a correlation set is initiated, the values of the properties for a correlation 
		set must be identical for all the messages in all the operations that carry the correlation 
		set and occur within the corresponding scope until its completion.  If at execution time 
		this constraint is violated, the standard fault <code>bpws:correlationViolation</code> MUST 
		be thrown by a compliant implementation. The same fault MUST be thrown if an activity with the 
		<code>initiate</code> attribute set to <code>no</code> attempts to use a correlation set that 
		has not been previously initiated.
		</p></div><div class="div2">
<h3><a name="webserviceoperations"></a>14.5. Web Service Operations</h3><p>The first extension defines a standard fault for the case where multiple conflicting 
		receive activities create ambiguity about message delivery.
		</p><p>If during the execution of a business process instance, two or more <code>receive</code> 
		activities for the same partner link, portType, operation and correlation set(s) are in 
		fact simultaneously enabled, then the standard fault <code>bpws:conflictingReceive</code> 
		MUST be thrown by a compliant implementation.
		</p><p>The second extension defines a standard fault for the case where multiple outstanding 
		synchronous requests create an ambiguity about response correlation.
		</p><p>If more than one outstanding synchronous request on a specific partner link for a 
		particular portType, operation and correlation set(s) is outstanding simultaneously 
		during the execution of a business process instance, then the standard fault 
		<code>bpws:conflictingRequest</code> MUST be thrown by a compliant implementation. Note 
		that this is semantically different from the <code>bpws:conflictingReceive</code>, because 
		it is possible to create the <code>conflictingRequest</code> by consecutively receiving the 
		same request on a specific partner link for a particular portType, operation and correlation 
		set(s).  If a <code>reply</code> activity is being carried out during the execution of a 
		business process instance and no synchronous request is outstanding for the specified 
		partnerLink, portType, operation and correlation set(s), then the standard fault 
		<code>bpws:invalidReply</code> MUST be thrown by a compliant implementation.
		</p><p>The third extension specifies that the <code>inputVariable</code> attribute for 
		<code>invoke</code> and the <code>variable</code> attribute for <code>receive</code> and 
		<code>reply</code> activities are not optional in executable processes.  In addition, the 
		<code>outputVariable</code> attribute is not optional for invoke when the operation 
		concerned is a request/response operation.
		</p></div><div class="div2">
<h3><a name="terminatingaserviceinstance"></a>14.6. Terminating a Service Instance</h3><p>The <code>terminate</code> activity can be used to immediately terminate the behavior of 
		a business process instance within which the <code>terminate</code> activity is performed. 
		All currently running activities MUST be terminated as soon as possible without any fault 
		handling or compensation behavior.
		</p><div class="exampleInner"><pre>  &lt;terminate <em>standard-attributes</em>&gt;
    <em>standard-elements</em>
  &lt;/terminate&gt;
		</pre></div></div><div class="div2">
<h3><a name="compensation"></a>14.7. Compensation</h3><p>If an installed compensation handler is invoked more than once during the execution of 
		a process instance, a compliant implementation MUST throw the standard 
		<code>bpws:repeatedCompensation</code> fault.
		</p></div><div class="div2">
<h3><a name="eventhandlers2"></a>14.8. Event Handlers</h3><p>This extension explains the relationship of <code>onMessage</code> event handlers to the 
		standard fault extension in <a href="#webserviceoperations"><b>14.5. Web Service Operations</b></a> for multiple 
		conflicting receive activities create ambiguity about message delivery.
		</p><p>Enablement of an <code>onMessage</code> event handler is equivalent to enablement of a 
		<code>receive</code> activity for the semantics of the occurrence of the 
		<code>bpws:conflictingReceiveFault</code> fault (see 
		<a href="#providingwebserviceoperations"><b>11.4. Providing Web Service Operations</b></a>).
		</p><p>The <code>inputVariable</code> attribute for <code>omMessage</code> handlers is not optional 
		in executable processes.  In addition, the <code>outputVariable</code> attribute is not 
		optional for <code>invoke</code> when the operation concerned is a request/response operation.
		</p></div></div><div class="div1">
<h2><a name="extensionsforbusinessprotocols"></a>15. Extensions for Business Protocols</h2><p>There are two extensions for the business protocol usage pattern.
	</p><div class="div2">
<h3><a name="variables3"></a>15.1. Variables</h3><p>This extension clarifies the rules regarding variable initialization in abstract processes.  
		Unlike executable processes, variables in abstract processes do not need to be fully 
		initialized before being used since some computation is left implicit in abstract processes.  
		However, since message properties are meant to represent "transparent," i.e., protocol relevant 
		data, BPEL4WS requires that all message properties in a message must be initialized before the 
		message can be used, for example before the variable of the message is used as the 
		<code>inputVariable</code> in a Web Service operation invocation.
		</p><p>In many cases, the level of abstraction appropriate in abstract processes makes it 
		unnecessary to use message variables in web service interaction activities, when the 
		intent is to simply constrain the sequencing of such activities, and the actual message data 
		is not relevant. To simplify these common cases it is permissible, in abstract processes, 
		to omit the variable reference attributes from the &lt;invoke/&gt;, &lt;receive/&gt;, and 
		&lt;reply/&gt; activities. The meaning of such an omission must be stated clearly. If no variable 
		is specified for an incoming message, then the abstract process may not refer subsequently to 
		the message or its properties (if any). If the variable reference is omitted for an outgoing 
		message, then any properties of the message are considered to have been initialized through 
		opaque assignment, as described in the following section.
		</p><p>When variable references are omitted, correlation set references may be interpreted 
		as follows:
		</p><ol type="1"><li><p>For an incoming message which initializes a correlation set (initiator case), 
			the correlation set is deemed to be initialized.</p></li><li><p>For an outgoing message which initializes a correlation set (initiator case), 
			the correlation tokens (which are message properties) are initialized through implicit 
			opaque assignment as described above.</p></li><li><p>For an outgoing message which references but does not initialize a correlation 
			set (follower case), the proper initialization of the message properties is implicit. In 
			this case, the already initialized correlation set itself provides the token values for 
			the outgoing message.</p></li></ol><p>Note that it is not possible to mix the variable-using and variable-less web service 
		interaction styles freely. If a correlation set is initialized by rule 1 or 2 above, then 
		outgoing messages in the same correlated exchange must also refrain from referencing a message 
		variable. This restriction applies because it is not possible to initialize the properties of 
		the outgoing messages from the correlation set alone.
		</p></div><div class="div2">
<h3><a name="assignment3"></a>15.2. Assignment</h3><p>This extension adds a special form of assignment to abstract processes to permit the 
		modeling of the non-deterministic effects of private computation on external protocol 
		behavior.
		</p><p>Abstract processes add a sixth <em>from-spec</em> variant to allow an opaque value to 
		be assigned based on non-deterministic choice, yielding the form:
		</p><div class="exampleInner"><pre>&lt;from opaque="yes"&gt;
		</pre></div><p>The value of this form in the interpretation of assignment is chosen 
		<em>nondeterministically</em> from the XSD value space of the target. It can only be 
		used in assignments where the "to-spec" refers to a variable property. Two distinct 
		use cases exist for opaque assignment. If the value space of the target is suitably 
		constrained, then opaque assignment is a useful way to describe behavioral alternatives 
		where the mechanism for choosing the alternative is private or otherwise external to the 
		process specification. For this use case, the XSD type of the target property must be one 
		of the following:
		</p><ul><li><p>xsd:boolean</p></li><li><p>A type derived from xsd:string and restricted by enumeration</p></li><li><p>A type derived from any XSD integral numeric type restricted by either 
			enumeration or a combination of minExclusive or minInclusive and maxExclusive or 
			maxInclusive </p></li></ul><p>A second use cases exists for target properties which don't meet these requirements. 
		When the target's value space is not constrained, it is useful to think of opaque 
		assignment as providing a <em>unique identifier</em>. Semantically, each opaque assignment 
		of this form should be considered to generate a unique value similar to a GUID. This style of 
		opaque assignment is most useful to model the initialization of properties used for correlation.
		</p><p>A process that uses assignment of opaque values is clearly not executable in the normal 
		sense.  However, it is feasible to emulate possible execution traces using assignment of 
		random values of the correct type.
		</p></div></div><div class="div1">
<h2><a name="examples"></a>16. Examples</h2><div class="div2">
<h3><a name="shippingservice"></a>16.1. Shipping Service</h3><p>This example presents the use of a BPEL4WS abstract process to describe a rudimentary 
		shipping service. This service handles the shipment of orders. From the service point of 
		view, orders are composed of a number of items. The shipping service offers two types of 
		shipment: shipments where the items are held and shipped together and shipment where the 
		items are shipped piecemeal until all of the order is accounted for. 
		</p><div class="div3">
<h4><a name="servicedescription"></a>16.1.1. Service Description</h4><p>The context for the shipping service is a two-party interaction between a customer 
			and the service. This is modeled in the following 
			<code>partnerLinkType</code> definition:
			</p><div class="exampleInner"><pre>&lt;plnk:partnerLinkType name="shippingLT"
   xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"&gt;
	&lt;plnk:role name="shippingService"&gt;
		&lt;plnk:portType name="shippingServicePT"/&gt;
	&lt;/plnk:role&gt;
	&lt;plnk:role name="shippingServiceCustomer"&gt;
		&lt;plnk:portType name="shippingServiceCustomerPT"/&gt;
	&lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;
			</pre></div><p>The corresponding message and portType definitions are as follows:
			</p><div class="exampleInner"><pre>&lt;wsdl:definitions  
              targetNameSpace="http://ship.org/wsdl/shipping"
              xmlns:ship= ...&gt;

&lt;message name="shippingRequestMsg"&gt;
	&lt;part name="shipOrder" type="ship:shipOrder"/&gt;
&lt;/message&gt;

&lt;message name="shippingNoticeMsg"&gt;
	&lt;part name="shipNotice" type="ship:shipNotice"/&gt;
&lt;/message&gt;

&lt;portType name="shippingServicePT"&gt;
	&lt;operation name="shippingRequest"&gt;
		&lt;input message="shippingRequestMsg"/&gt;
	&lt;/operation&gt;
&lt;/portType&gt;

&lt;portType name="shippingServiceCustomerPT"&gt;
	&lt;operation name="shippingNotice"&gt;
		&lt;input message="shippingNoticeMsg"/&gt;
	&lt;/operation&gt;
&lt;/portType&gt;

&lt;/wsdl:definitions&gt;
			</pre></div></div><div class="div3">
<h4><a name="messageproperties2"></a>16.1.2. Message Properties</h4><p>The properties relevant to the service behavior are:
			</p><ul><li><p>The ship order ID that is used to correlate the ship notice(s) with the ship 
				order (<code>shipOrderID</code>)
				</p></li><li><p>Whether the order is to be shipped complete or not 
				(<code>shipComplete</code>)
				</p></li><li><p>The total number of items in the order 
				(<code>itemsTotal</code>)
				</p></li><li><p>The number of items referred to in a ship notice so that, when partial 
				shipments are acceptable, we can use this, along with itemsTotal, to track the 
				overall fulfillment of the shipment (<code>itemsCount</code>)
				</p></li></ul><p>Here are the definitions for the properties and their aliases:
			</p><div class="exampleInner"><pre>			
&lt;wsdl:definitions 
       targetNamespace="http://example.com/shipProps/"
       xmlns:sns="http://ship.org/wsdl/shipping"
       xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"&gt;
 
   &lt;!-- types used in abstract processes are required to be finite domains. 
        The itemCountType is restricted by range --&gt;

   &lt;wsdl:types&gt;
      &lt;xsd:schema&gt; 
        &lt;xsd:simpleType name="itemCountType"&gt; 
                &lt;xsd:restriction base="xsd:int"&gt; 
                        &lt;xsd:minInclusive value="1"/&gt; 
                        &lt;xsd:maxInclusive value="50"/&gt; 
                &lt;/xsd:restriction&gt; 
        &lt;/xsd:simpleType&gt; 
      &lt;/xsd:schema&gt;    
   &lt;/wsdl:types&gt;

   &lt;bpws:property name="shipOrderID" type="xsd:int"/&gt;
   &lt;bpws:property name="shipComplete" type="xsd:boolean"/&gt;
   &lt;bpws:property name="itemsTotal" type="ship:itemCountType"/&gt;
   &lt;bpws:property name="itemsCount" type="ship:itemCountType"/&gt;
   &lt;bpws:property name="numItemsShipped" type="ship:itemCountType"/&gt;

   &lt;bpws:propertyAlias propertyName="tns:shipOrderID" 
              messageType="sns:shippingRequestMsg"
              part="shipOrder"
              query="/ShipOrderRequestHeader/shipOrderID"/&gt;

   &lt;bpws:propertyAlias propertyName="tns:shipOrderID" 
              messageType="sns:shippingNoticeMsg"
              part="shipNotice"
              query="/ShipNoticeHeader/shipOrderID"/&gt;

   &lt;bpws:propertyAlias propertyName="tns:shipComplete" 
              messageType="sns:shippingRequestMsg"
              part="shipOrder"
              query="/ShipOrderRequestHeader/shipComplete"/&gt;

   &lt;bpws:propertyAlias propertyName="tns:itemsTotal" 
               messageType="sns:shippingRequestMsg"
               part="shipOrder"
               query="/ShipOrderRequestHeader/itemsTotal"/&gt;

   &lt;bpws:propertyAlias propertyName="tns:itemsCount" 
                messageType="sns:shippingNoticeMsg"
                part="shipNotice"
                query="/ShipNoticeHeader/itemsCount"/&gt;

&lt;/wsdl:definitions&gt;
			</pre></div></div><div class="div3">
<h4><a name="process"></a>16.1.3. Process</h4><p>Next is the process definition. For brevity, the abstract process definition does 
			not include, for example, the handling of error conditions (business or otherwise) 
			that a complete description would account for. The rough outline of the process is 
			as follows:
			</p><div class="exampleInner"><pre>receive shipOrder
switch
	case shipComplete
		send shipNotice
	otherwise
	   itemsShipped := 0
	   while itemsShipped &lt; itemsTotal
		itemsCount := opaque // non-deterministic assignment
						   // corresponding e.g. to 
						   // internal interaction with
						   // back-end system
		send shipNotice
		itemsShipped = itemsShipped + itemsCount
			</pre></div><p>And here is the more complete version:
			</p><div class="exampleInner"><pre>&lt;process name="shippingService"
	   targetNamespace="http://acme.com/shipping"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
	   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	   xmlns:sns="http://ship.org/wsdl/shipping"
         xmlns:props="http://example.com/shipProps/"
         abstractProcess="yes"&gt;

&lt;partnerLinks&gt;
  &lt;partnerLink name="customer"
           partnerLinkType="sns:shippingLT"
	     partnerRole="shippingServiceCustomer"
	     myRole="shippingService"/&gt;
&lt;/partnerLinks&gt;

&lt;variables&gt;
  &lt;variable name="shipRequest"
             messageType="sns:shippingRequestMsg"/&gt;
  &lt;variable name="shipNotice"
 		 messageType="sns:shippingNoticeMsg"/&gt;
  &lt;variable name="itemsShipped"
             type="props:itemCountType"/&gt;
&lt;/variables&gt;

&lt;correlationSets&gt;
  &lt;correlationSet name="shipOrder"
			properties="props:shipOrderID"/&gt;
&lt;/correlationSets&gt;

&lt;sequence&gt;

  &lt;receive partnerLink="customer"
           portType="sns:shippingServicePT"
	     operation="shippingRequest"
	     variable="shipRequest"&gt;
    &lt;correlations&gt;
      &lt;correlation set="shipOrder" initiate="yes"/&gt;
    &lt;/correlations&gt;
  &lt;/receive&gt;

  &lt;switch&gt;
    &lt;case condition=
       "bpws:getVariableProperty('shipRequest','props:shipComplete')" &gt;
      &lt;sequence&gt;
	  &lt;assign&gt;
          &lt;copy&gt;
            &lt;from variable="shipRequest" property="props:itemsCount"/&gt;
            &lt;to variable="shipNotice" property="props:itemsCount"/&gt;
          &lt;/copy&gt;
        &lt;/assign&gt;
        &lt;invoke partnerLink="customer"
		  portType="sns:shippingServiceCustomerPT"
              operation="shippingNotice"
		  inputVariable="shipNotice"&gt;
	    &lt;correlations&gt;
	      &lt;correlation set="shipOrder" pattern="out"/&gt;
	    &lt;/correlations&gt;
	  &lt;/invoke&gt;
      &lt;/sequence&gt;
    &lt;/case&gt;
    &lt;otherwise&gt;
      &lt;sequence&gt;
        &lt;assign&gt;
          &lt;copy&gt;
	      &lt;from expression="0"/&gt;
	      &lt;to variable="itemsShipped"/&gt;
          &lt;/copy&gt;
	  &lt;/assign&gt;
	  &lt;while condition=
         "bpws:getVariableData('itemsShipped') &lt;
          bpws:getVariableProperty('shipRequest','props:itemsTotal')"&gt;
           &lt;sequence&gt;
	        &lt;assign&gt;
                &lt;copy&gt;
	            &lt;from opaque="yes"/&gt;
	            &lt;to variable="shipNotice" property="props:itemsCount"/&gt;
                &lt;/copy&gt;
	       &lt;/assign&gt;
             &lt;invoke partnerLink="customer"
		         portType="sns:shippingServiceCustomerPT"
                     operation="shippingNotice"
		         inputVariable="shipNotice"&gt;
	          &lt;correlations&gt;
	             &lt;correlation set="shipOrder" pattern="out"/&gt;
	          &lt;/correlations&gt;
	       &lt;/invoke&gt;
	       &lt;assign&gt;
                &lt;copy&gt;
	            &lt;from expression=
                        "bpws:getVariableData('itemsShipped')
                         + 
                         bpws:getVariableProperty('shipNotice',
                                                  'props:itemsCount')"/&gt;
	            &lt;to variable="itemsShipped"/&gt;
                &lt;/copy&gt;  
	       &lt;/assign&gt;
           &lt;/sequence&gt;
	   &lt;/while&gt;
       &lt;/sequence&gt;
    &lt;/otherwise&gt;
  &lt;/switch&gt;
&lt;/sequence&gt;

&lt;/process&gt;
			</pre></div></div></div><div class="div2">
<h3><a name="loanapproval"></a>16.2. Loan Approval</h3><p>This example considers a simple loan approval Web Service that provides a port where 
		customers can send their requests for loans. Customers of the service send their loan 
		requests, including personal information and amount being requested. Using this information, 
		the loan service runs a simple process that results in either a "loan approved" message or a 
		"loan rejected" message. The approval decision can be reached in two different ways, 
		depending on the amount requested and the risk associated with the requester. For low 
		amounts (less than $10,000) and low-risk individuals, approval is automatic. For high 
		amounts or medium and high-risk individuals, each credit request needs to be studied in 
		greater detail. Thus, to process each request, the loan service uses the functionality 
		provided by two other services. In the streamlined processing available for low-amount 
		loans, a "risk assessment" service is used to obtain a quick evaluation of the risk associated 
		with the requesting individual. A full-fledged "loan approval" service (possibly requiring 
		direct involvement of a loan expert) is used to obtain in-depth assessments of requests when 
		the streamlined approval process does not apply.
		</p><div class="div3">
<h4><a name="servicedescription2"></a>16.2.1. Service Description</h4><p>The WSDL portType supported by this service is shown below ("loanServicePT" portType). 
			It is assumed that an independent "loan.org" consortium has provided definitions of the 
			loan service portType as well as the risk assessment and in-depth loan approval service, 
			so all the required WSDL definitions appear in the same WSDL document. In particular, the 
			portTypes for the Web Services providing the risk assessment and approval functions, and 
			all the required partner link types that relate to the use of these portTypes, are also 
			defined there.
			</p><div class="exampleInner"><pre>&lt;definitions 
      targetNamespace="http://loans.org/wsdl/loan-approval"
      xmlns="http://schemas.xmlsoap.org/wsdl/"
      xmlns:xsd="http://www.w3.org/2001/XMLSchema"    
    	xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"      
      xmlns:lns="http://loans.org/wsdl/loan-approval"&gt;


&lt;message name="creditInformationMessage"&gt;
   &lt;part name="firstName" type="xsd:string"/&gt;
   &lt;part name="name" type="xsd:string"/&gt;
   &lt;part name="amount" type="xsd:integer"/&gt;
&lt;/message&gt;

&lt;message name="approvalMessage"&gt;
   &lt;part name="accept" type="xsd:string"/&gt;
&lt;/message&gt;

&lt;message name="riskAssessmentMessage"&gt;
   &lt;part name="level" type="xsd:string"/&gt;
&lt;/message&gt;   

&lt;message name="errorMessage"&gt;
   &lt;part name="errorCode" type="xsd:integer"/&gt;
&lt;/message&gt;

&lt;portType name="loanServicePT"&gt;
   &lt;operation name="request"&gt;
      &lt;input message="lns:creditInformationMessage"/&gt;
      &lt;output message="lns:approvalMessage"/&gt;
      &lt;fault name="unableToHandleRequest" 
             message="lns:errorMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;portType name="riskAssessmentPT"&gt;
   &lt;operation name="check"&gt;
      &lt;input message="lns:creditInformationMessage"/&gt;
      &lt;output message="lns:riskAssessmentMessage"/&gt;
      &lt;fault name="loanProcessFault" 
             message="lns:errorMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;

&lt;portType name="loanApprovalPT"&gt;
   &lt;operation name="approve"&gt;
      &lt;input message="lns:creditInformationMessage"/&gt;
      &lt;output message="lns:approvalMessage"/&gt;
      &lt;fault name="loanProcessFault" 
             message="lns:errorMessage"/&gt;
   &lt;/operation&gt;
&lt;/portType&gt;      

&lt;plnk:partnerLinkType name="loanPartnerLinkType"&gt;
   &lt;plnk:role name="loanService"&gt;
       &lt;plnk:portType name="lns:loanServicePT"/&gt;
   &lt;/plnk:role&gt;
&lt;/plnk:partnerLinkType&gt;

&lt;plnk:partnerLinkType name="loanApprovalLinkType"&gt;
   &lt;plnk:role name="approver"&gt;
       &lt;plnk:portType name="lns:loanApprovalPT"/&gt;
   &lt;/plnk:role&gt;   
&lt;/plnk:partnerLinkType&gt;

&lt;plnk:partnerLinkType name="riskAssessmentLinkType"&gt;
   &lt;plnk:role name="assessor"&gt;
       &lt;plnk:portType name="lns:riskAssessmentPT"/&gt;
   &lt;/plnk:role&gt;   
&lt;/plnk:partnerLinkType&gt;

&lt;/definitions&gt;
			</pre></div></div><div class="div3">
<h4><a name="process2"></a>16.2.2. Process</h4><p>In the business process defined below, the interaction with the customer is represented 
			by the initial &lt;receive&gt; and the matching &lt;reply&gt; activities. The use of risk assessment 
			and loan approval services is represented by &lt;invoke&gt; elements. All these activities are 
			contained within a &lt;flow&gt;, and their (potentially concurrent) behavior is staged according 
			to the dependencies expressed by corresponding &lt;link&gt; elements. Note that the transition 
			conditions attached to the &lt;source&gt; elements of the links determine which links get 
			activated. Dead path elimination is enabled by the value "yes" taken by the 
			"suppressJoinFailure" attribute on the &lt;process&gt; element. This implies that as certain 
			links are set false the consequences of this decision can be propagated and the excecution 
			of certain activities can be skipped.
			</p><p>Because the operations invoked can return a fault of type "loanProcessFault", a fault 
			handler is provided. When a fault occurs, control is transferred to the fault handler, 
			where a &lt;reply&gt; element is used to return a fault response of type "unableToHandleRequest" 
			to the loan requester.
			</p><div class="exampleInner"><pre>&lt;process name="loanApprovalProcess" 
         targetNamespace="http://acme.com/loanprocessing" 
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:lns="http://loans.org/wsdl/loan-approval"
         suppressJoinFailure="yes"&gt;

   &lt;partnerLinks&gt;
      &lt;partnerLink name="customer" 
               partnerLinkType="lns:loanPartnerLinkType"
               myRole="loanService"/&gt;
      &lt;partnerLink name="approver" 
               partnerLinkType="lns:loanApprovalLinkType"
               partnerRole="approver"/&gt;
      &lt;partnerLink name="assessor" 
               partnerLinkType="lns:riskAssessmentLinkType"
               partnerRole="assessor"/&gt;
   &lt;/partnerLinks&gt;

   &lt;variables&gt;
     &lt;variable name="request" 
                messageType="lns:creditInformationMessage"/&gt;
     &lt;variable name="risk" 
                messageType="lns:riskAssessmentMessage"/&gt;
     &lt;variable name="approval" 
                messageType="lns:approvalMessage"/&gt;
     &lt;variable name="error" 
                messageType="lns:errorMessage"/&gt;
   &lt;/variables&gt;

   &lt;faultHandlers&gt;
      &lt;catch faultName="lns:loanProcessFault" 
             faultVariable="error"&gt;
         &lt;reply   partnerLink="customer"
                  portType="lns:loanServicePT" 
                  operation="request"
                  variable="error" 
                  faultName="unableToHandleRequest"/&gt;
      &lt;/catch&gt;
   &lt;/faultHandlers&gt;
                                                                  

   &lt;flow&gt;

      &lt;links&gt;
         &lt;link name="receive-to-assess"/&gt;
         &lt;link name="receive-to-approval"/&gt;
         &lt;link name="approval-to-reply"/&gt;
         &lt;link name="assess-to-setMessage"/&gt;
         &lt;link name="setMessage-to-reply"/&gt;
         &lt;link name="assess-to-approval"/&gt;
      &lt;/links&gt;

      &lt;receive partnerLink="customer" 
               portType="lns:loanServicePT" 
               operation="request" 
               variable="request" createInstance="yes"&gt;
         &lt;source linkName="receive-to-assess"
            transitionCondition=
              "bpws:getVariableData('request','amount')&lt; 10000"/&gt;          
         &lt;source linkName="receive-to-approval"
            transitionCondition=
              "bpws:getVariableData('request','amount')&gt;=10000"/&gt;
      &lt;/receive&gt;

      &lt;invoke  partnerLink="assessor" 
               portType="lns:riskAssessmentPT" 
               operation="check"
               inputVariable="request"  
               outputVariable="risk"&gt;
         &lt;target linkName="receive-to-assess"/&gt;
         &lt;source linkName="assess-to-setMessage" 
            transitionCondition=
              "bpws:getVariableData('risk','level')='low'"/&gt;
         &lt;source linkName="assess-to-approval" 
            transitionCondition=
              "bpws:getVariableData('risk','level')!='low'"/&gt;
      &lt;/invoke&gt;

      &lt;assign&gt;
         &lt;target linkName="assess-to-setMessage"/&gt;
         &lt;source linkName="setMessage-to-reply"/&gt;
         &lt;copy&gt;
            &lt;from expression="'yes'"/&gt;
            &lt;to variable="approval" part="accept"/&gt;
         &lt;/copy&gt;
      &lt;/assign&gt;

      &lt;invoke  partnerLink="approver" 
               portType="lns:loanApprovalPT" 
               operation="approve" 
               inputVariable="request" 
               outputVariable="approval"&gt;
         &lt;target linkName="receive-to-approval"/&gt;
         &lt;target linkName="assess-to-approval"/&gt;
         &lt;source linkName="approval-to-reply" /&gt;
      &lt;/invoke&gt;

      &lt;reply   partnerLink="customer" 
               portType="lns:loanServicePT" 
               operation="request" 
               variable="approval"&gt;
         &lt;target linkName="setMessage-to-reply"/&gt;
         &lt;target linkName="approval-to-reply"/&gt;
      &lt;/reply&gt;
   &lt;/flow&gt;

&lt;/process&gt;
			</pre></div></div></div><div class="div2">
<h3><a name="multiplestartactivities"></a>16.3. Multiple Start Activities</h3><p>A process can have multiple activities that create a process instance. An example of 
		this situation is a (simplified) business process run by an auction house. The purpose of 
		the business process is to collect information from the buyer and the seller of a particular 
		auction, report the appropriate auction results to some auction registration service, and 
		then send the registration result back to the seller and the buyer. Thus the business process 
		starts with two activities, one for receiving the seller information and one for receiving the 
		buyer information. Because a particular auction is uniquely identified by an auction ID, the 
		seller and the buyer need to provide this information when sending in their data. The sequence 
		in which the seller and buyer requests arrive at the auction house is random. Thus, when such 
		a request comes in, it needs to be checked whether a business process instance exists already 
		or not. If not, a business process instance is created. After both requests have been received, 
		the auction registration service is invoked. Because the invocation is done asynchronously, the 
		auction house passes the auction ID to the auction registration service. The auction registration 
		service returns this auction ID in its answer so that the auction house can locate the proper 
		business process instance. Because there are many buyers and sellers, each of them needs to 
		provide their endpoint references, so that the auction service can respond properly. In addition, 
		the auction house needs to provide its own endpoint reference to the auction registration service 
		so that the auction registration service can send the response back to the auction house.
		</p><div class="div3">
<h4><a name="servicedescription3"></a>16.3.1. Service Description</h4><p>The auction service offers two port types, called sellerPT and buyerPT, with 
			appropriate operations for accepting the data provided by the seller and the buyer. 
			Because the processing time of the business process is lengthy, the auction service 
			responds to the seller and buyer through appropriate port types, sellerAnswerPT and 
			buyerAnswerPT. These portTypes are properly combined into two partner link types, one 
			for the seller called sellerAuctionHouseLT and one for the buyer called buyerAuctionHouseLT.
			</p><p>The auction service needs two port types, called auctionRegistrationPT and 
			auctionRegistrationAnswerPT, that provide for the invocation of the auction registration 
			service. The port types are part of the appropriate partner link type 
			auctionHouseAuctionRegistrationServiceLT.
			</p><div class="exampleInner"><pre>&lt;definitions 
    targetNamespace="http://www.auction.com/wsdl/auctionService" 
    xmlns:tns="http://www.auction.com/wsdl/auctionService" 
    xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
    xmlns:wsa="http://schemas.xmlsoap.org/ws/2003/03/addressing"
    xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;
 
&lt;!-- Messages for communication with the seller --&gt;
 
  &lt;message name="sellerData"&gt;
     &lt;part name="creditCardNumber" type="xsd:string"/&gt;
     &lt;part name="shippingCosts" type="xsd:integer"/&gt;
     &lt;part name="auctionId" type="xsd:integer"/&gt;
     &lt;part name="endpointReference" type="wsa:EndpointReferenceType"/&gt;
  &lt;/message&gt;
  &lt;message name="sellerAnswerData"&gt;
     &lt;part name="thankYouText" type="xsd:string"/&gt;
  &lt;/message&gt;
 
&lt;!-- Messages for communication with the buyer --&gt;
 
  &lt;message name="buyerData"&gt;
     &lt;part name="creditCardNumber" type="xsd:string"/&gt;
     &lt;part name="phoneNumber" type="xsd:string"/&gt;
     &lt;part name="ID" type="xsd:integer"/&gt;
     &lt;part name="endpointReference" type="wsa:EndpointReferenceType"/&gt;
  &lt;/message&gt;
  &lt;message name="buyerAnswerData"&gt;
     &lt;part name="thankYouText" type="xsd:string"/&gt;
  &lt;/message&gt;
 
&lt;!-- Messages for communication with the auction registration service --&gt;
 
  &lt;message name="auctionData"&gt;
     &lt;part name="auctionId" type="xsd:integer"/&gt;
     &lt;part name="amount" type="xsd:integer"/&gt;
  &lt;/message&gt;
  &lt;message name="auctionAnswerData"&gt;
     &lt;part name="registrationId" type="xsd:integer"/&gt;
     &lt;part name="auctionId" type="xsd:integer"/&gt;
     &lt;part name="auctionHouseEndpointReference" 
                 type="wsa:EndpointReferenceType"/&gt;
  &lt;/message&gt;
  
&lt;!-- Port types for interacting with the seller --&gt;
 
  &lt;portType name="sellerPT"&gt;
     &lt;operation name="submit"&gt;
        &lt;input message="tns:sellerData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;portType name="sellerAnswerPT"&gt;
     &lt;operation name="answer"&gt;
        &lt;input message="tns:sellerAnswerData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;
 
&lt;!-- Port types for interacting with the buyer --&gt;
 
  &lt;portType name="buyerPT"&gt;
     &lt;operation name="submit"&gt;
        &lt;input message="tns:buyerData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;portType name="buyerAnswerPT"&gt;
     &lt;operation name="answer"&gt;
        &lt;input message="tns:buyerAnswerData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;
 
&lt;!-- Port types for interacting with the auction registration service --&gt;
 
  &lt;portType name="auctionRegistrationPT"&gt;
     &lt;operation name="process"&gt;
        &lt;input message="tns:auctionData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;portType name="auctionRegistrationAnswerPT"&gt;
     &lt;operation name="answer"&gt;
        &lt;input message="tns:auctionAnswerData"/&gt;
     &lt;/operation&gt;
  &lt;/portType&gt;

&lt;!-- Context type used for locating business process via auction Id --&gt;
 
  &lt;bpws:property name="auctionId"
                 type="xsd:string"/&gt;

  &lt;bpws:propertyAlias propertyName="tns:auctionId"
                     messageType="tns:sellerData" 
                     part="auctionId"/&gt;

  &lt;bpws:propertyAlias propertyName="tns:auctionId"
                           messageType="tns:buyerData"
                           part="ID"/&gt;
  &lt;bpws:propertyAlias propertyName="tns:auctionId"
                          messageType="tns:auctionData"
                          part="auctionId"/&gt;
   &lt;bpws:propertyAlias propertyName="tns:auctionId"
                          messageType="tns:auctionAnswerData"
                          part="auctionId"/&gt;
 
 
&lt;!-- Partner link type for seller/auctionHouse --&gt;
 
  &lt;plnk:partnerLinkType name="tns:sellerAuctionHouseLT"&gt;     
     &lt;plnk:role name="auctionHouse"&gt;
        &lt;plnk:portType name="tns:sellerPT"/&gt;
     &lt;/plnk:role&gt;
     &lt;plnk:role name="seller"&gt;
        &lt;plnk:portType name="tns:sellerAnswerPT"/&gt;
     &lt;/plnk:role&gt;
  &lt;/plnk:partnerLinkType&gt;
 
&lt;!-- Partner link type for buyer/auctionHouse --&gt;
 
  &lt;plnk:partnerLinkType name="buyerAuctionHouseLT"&gt;      
     &lt;plnk:role name="auctionHouse"&gt;
        &lt;plnk:portType name="tns:buyerPT"/&gt;
     &lt;/plnk:role&gt;
     &lt;plnk:role name="buyer"&gt;
        &lt;plnk:portType name="tns:buyerAnswerPT"/&gt;
     &lt;/plnk:role&gt;
  &lt;/plnk:partnerLinkType&gt;
 
&lt;!-- Partner link type for auction house/auction 
     registration service --&gt;
 
  &lt;plnk:partnerLinkType name="auctionHouseAuctionRegistrationServiceLT"&gt;
     &lt;plnk:role name="auctionRegistrationService"&gt;
       &lt;plnk:portType name="tns:auctionRegistrationPT"/&gt;
     &lt;/plnk:role&gt;
     &lt;plnk:role name="auctionHouse"&gt;
       &lt;plnk:portType name="tns:auctionRegistrationAnswerPT"/&gt;
     &lt;/plnk:role&gt;
  &lt;/plnk:partnerLinkType&gt;
&lt;/definitions&gt;
			</pre></div></div><div class="div3">
<h4><a name="process3"></a>16.3.2. Process</h4><p>The BPEL4WS definition for the business process offered by the auction house follows:
			</p><div class="exampleInner"><pre>&lt;process name="auctionService"
       targetNamespace="http://www.auction.com"
       variableAccessSerializable="no"
       xmlns:as="http://www.auction.com/wsdl/auctionService" 
       xmlns:wsa="http://schemas.xmlsoap.org/ws/2003/03/addressing"
       xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"&gt;
         
 
&lt;!-- Partners --&gt;
 
  &lt;partnerLinks&gt;
     &lt;partnerLink name="seller" 
              partnerLinkType="as:sellerAuctionHouseLT"
              myRole="auctionHouse" partnerRole="seller"/&gt;
     &lt;partnerLink name="buyer" 
              partnerLinkType="as:buyerAuctionHouseLT"
              myRole="auctionHouse" partnerRole="buyer"/&gt;
     &lt;partnerLink name="auctionRegistrationService"
              partnerLinkType=
              "as:auctionHouseAuctionRegistrationServiceLT"
              myRole="auctionHouse" 
              partnerRole="auctionRegistrationService"/&gt;
  &lt;/partnerLinks&gt;
 
&lt;!-- Variables --&gt;
 
  &lt;variables&gt;
     &lt;variable name="sellerData" messageType="as:sellerData"/&gt;
     &lt;variable name="sellerAnswerData" messageType="as:sellerAnswerData"/&gt;
     &lt;variable name="buyerData" messageType="as:buyerData"/&gt;
     &lt;variable name="buyerAnswerData" messageType="as:buyerAnswerData"/&gt;
     &lt;variable name="auctionData"
                messageType="as:auctionData"/&gt;
     &lt;variable name="auctionAnswerData"
                messageType="as:auctionAnswerData"/&gt;
  &lt;/variables&gt;
 
&lt;!-- Correlation set for correlating buyer and seller request 
     as well as auction house and auction registration service
     exchange --&gt;
 
  &lt;correlationSets&gt;
     &lt;correlationSet name="auctionIdentification"
        properties="as:auctionId"/&gt;
        
  &lt;/correlationSets&gt;
 
&lt;!-- Structure of the business process --&gt;
 
  &lt;sequence&gt;
 
&lt;!-- Process buyer and seller request concurrently
     Either one can create a process instance --&gt;
 
     &lt;flow&gt;
 
&lt;!-- Process seller request --&gt; 
    
        &lt;receive name="acceptSellerInformation"
                 partnerLink="seller"
                 portType="as:sellerPT"
                 operation="provide"
                 variable="sellerData"
                 createInstance="yes"&gt;
            &lt;correlations&gt;
                 &lt;correlation set="auctionIdentification"
                              initiate="yes"/&gt;
                 &lt;/correlations&gt;              
                 
         &lt;/receive&gt;
 
&lt;!-- Process buyer request --&gt; 
 
        &lt;receive name="acceptBuyerInformation"
                 partnerLink="buyer"
                 portType="as:buyerPT"
                 operation="provide"
                 variable="buyerData"
                 createInstance="yes"&gt;
            &lt;correlations&gt;
                 &lt;correlation set="auctionIdentification"
                              initiate="yes"/&gt;
            &lt;/correlations&gt;
        &lt;/receive&gt; 
                 
 
      &lt;/flow&gt;
 
&lt;!-- Invoke auction registration service 
     by setting the target endpoint reference
     and setting my own endpoint reference for call back
     and receiving the answer 
     Correlation of request and answer is via auction Id --&gt;
 
      &lt;assign&gt;
         &lt;copy&gt;
            &lt;from&gt;
              &lt;wsa:EndpointReference&gt;
                 &lt;wsa:Address&gt;xs:anyURI&lt;/wsa:Address&gt;
                 &lt;wsa:ServiceName&gt;ars:RegistrationService&lt;/wsa:ServiceName&gt;
              &lt;/wsa:EndpointReference&gt;
            &lt;/from&gt;
            &lt;to partnerLink="auctionRegistrationService"/&gt;
         &lt;/copy&gt;
      &lt;/assign&gt;
 
      &lt;assign&gt;
         &lt;copy&gt;
           
            &lt;from partnerLink="auctionRegistrationService"
                  endpointReference="myRole"/&gt;
            &lt;to variable="auctionData"
                part="auctionHouseServiceRef"/&gt;
         &lt;/copy&gt;
      &lt;/assign&gt;
 
      &lt;invoke name="registerAuctionResults"
              partnerLink="auctionRegistrationService"
              portType="as:auctionRegistrationPT"
              operation="process"
              inputVariable="auctionData"&gt;
         &lt;correlations&gt;
              &lt;correlation set="auctionIdentification"/&gt;                                
         &lt;/correlations&gt;  
      &lt;/invoke&gt; 
              
      &lt;receive name="receiveAuctionRegistrationInformation"
               partnerLink="auctionRegistrationService"
               portType="as:auctionRegistrationAnswerPT"
               operation="answer"
               variable="auctionAnswerData"&gt;
               
         &lt;correlations&gt;
              &lt;correlation set="auctionIdentification"/&gt;
         &lt;/correlations&gt;
    &lt;/receive&gt;

&lt;!-- Send responses back to seller and buyer --&gt;
 
      &lt;flow&gt;
 
&lt;!-- Process seller response by
     setting the seller to the endpoint reference provided by the seller
     and invoking the response --&gt;
 
         &lt;sequence&gt;
 
             &lt;assign&gt;
                &lt;copy&gt;
                   &lt;from variable="sellerData"
                         part="endpointReference"/&gt;
                   &lt;to partnerLink="seller"/&gt;
                &lt;/copy&gt;
             &lt;/assign&gt;
  
             &lt;invoke name="respondToSeller"
                     partnerLink="seller"
                     portType="as:sellerAnswerPT"
                     operation="answer"
                     inputVariable="sellerAnswerData"/&gt;
 
         &lt;/sequence&gt;
 
&lt;!-- Process buyer response by
     setting the buyer to the endpoint reference provided by the buyer
     and invoking the response --&gt;
 
         &lt;sequence&gt;
 
             &lt;assign&gt;
                &lt;copy&gt;
                   &lt;from variable="buyerData" 
                         part="endpointReference"/&gt;
                   &lt;to partnerLink="buyer"/&gt;
                &lt;/copy&gt;
             &lt;/assign&gt;
  
             &lt;invoke name="respondToBuyer"
                     partnerLink="buyer"
                     portType="as:buyerAnswerPT"
                     operation="answer"
                     inputVariable="buyerAnswerData"/&gt;
 
         &lt;/sequence&gt;
 
      &lt;/flow&gt;
 
   &lt;/sequence&gt;
 
&lt;/process&gt;
			</pre></div></div></div></div><div class="div1">
<h2><a name="securityconsiderations"></a>17. Security Considerations</h2><p>Because messages can be modified or forged, it is strongly RECOMMENDED that business 
	process implementations use WS-Security to ensure messages have not been modified or forged 
	while in transit or while residing at destinations. Similarly, invalid or expired messages 
	could be re-used or message headers not specifically associated with the specific message 
	could be referenced. Consequently, when using WS-Security, signatures MUST include the 
	semantically significant headers and the message body (as well as any other relevant data) 
	so that they cannot be independently separated and re-used.
	</p><p>Messaging protocols used to communicate among business processes are subject to various 
	forms of replay attacks. In addition to the mechanisms listed above, messages SHOULD include 
	a message timestamp (as described in WS-Security) within the signature. Recipients can use 
	the timestamp information to cache the most recent messages for a business process and detect 
	duplicate transmissions and prevent potential replay attacks.
	</p><p>It should also be noted that business process implementations are subject to various 
	forms of denial-of-service attacks.  Implementers of business process execution systems 
	compliant with this specification should take this into account.
	</p></div><div class="div1">
<h2><a name="acknowledgments"></a>18. Acknowledgments</h2><p>Achille Fokoue, Ashok Malhotra, and Bob Schloss for their help with developing and verifying 
	the XML Schemas.
	</p><p>Tony Andrews and Marc Levy for their help in defining abstract processes.
	</p><p>Tony Hoare and Marc Shapiro for thoughtful comments on the language concepts.
	</p><p>Jonathan Marsh for suggesting the generalization of the dependency on external (query 
	and expression) languages.
	</p><p>Tom Freund and Tony Storey for inducing us to precisely define the relationship with the 
	coordination framework in WS-Transaction.
	</p><p>Martin Nally for his help on improving the usability of the language.
	</p></div><div class="div1">
<h2><a name="references"></a>19. References</h2><dl><dt class="label"><a name="ref01"></a>REC-xml</dt><dd>W3C Recommendation 
		"<em><a href="http://www.w3.org/TR/REC-xml">The XML Specification</a></em>"
		</dd><dt class="label"><a name="ref02"></a>SOAP</dt><dd>W3C Note 
		"<em><a href="http://www.w3.org/TR/SOAP/">Simple Object Access Protocol (SOAP) 1.1</a></em>"
		</dd><dt class="label"><a name="ref03"></a>WSDL</dt><dd>W3C Note 
		"<em><a href="http://www.w3.org/TR/wsdl">Web Services Definition Language (WSDL) 1.1</a></em>"
		</dd><dt class="label"><a name="ref04"></a>UDDI</dt><dd>Industry Initiative 
		"<em><a href="http://www.uddi.org/specification.html">Universal Description, Discovery and Integration</a></em>"
		</dd><dt class="label"><a name="ref05"></a>XLANG</dt><dd><em><a href="http://www.gotdotnet.com/team/xml_wsspecs/xlang-c/default.htm">Web Services for Business Process Design</a></em></dd><dt class="label"><a name="ref06"></a>WSFL</dt><dd>WSFL: 
		<em><a href="http://www-3.ibm.com/software/solutions/webservices/pdf/WSFL.pdf">Web Service Flow Language 1.0</a></em></dd><dt class="label"><a name="ref07"></a>XML Schema 1</dt><dd>W3C Proposed Recommendation 
		"<em><a href="http://www.w3.org/TR/xmlschema-1/">XML Schema Part 1: Structures</a></em>"
		</dd><dt class="label"><a name="ref08"></a>XML Schema 2</dt><dd>W3C Proposed Recommendation 
		"<em><a href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2: Datatypes</a></em>"
		</dd><dt class="label"><a name="ref09"></a>XPath</dt><dd>W3C Recommendation 
		"<em><a href="http://www.w3.org/TR/xpath">XML Path Language (XPath) Version 1.0</a></em>"
		</dd><dt class="label"><a name="ref10"></a>Sagas</dt><dd>"<em>Sagas</em>", H. Garcia-Molina and K. Salem, Proc. 
		ACM SIGMOD (1987).
		</dd><dt class="label"><a name="ref11"></a>Open Nested Transactions</dt><dd>"<em>Trends in systems aspects of database management</em>", I.L. 
		Traiger, Proc. 2nd Intl. Conf. on Databases (ICOD-2), Wiley &amp; Sons 1983.
		</dd><dt class="label"><a name="ref12"></a>WS-Transaction</dt><dd>"<em>Web Services Transaction</em>", IBM &amp; Microsoft, 2002.
		</dd><dt class="label"><a name="ref13"></a>KEYWORDS</dt><dd>"<em>Key words for use in RFCs to Indicate Requirement Levels</em>", 
		<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>, S. Bradner, Harvard University, 
		March 1997.
		</dd><dt class="label"><a name="ref14"></a>URI</dt><dd>"<em>Uniform Resource Identifiers (URI): Generic Syntax</em>", 
		<a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>, T. Berners-Lee, R. Fielding, 
		L. Masinter, MIT/LCS, U.C. Irvine, Xerox Corporation, August 1998.
		</dd><dt class="label"><a name="ref15"></a>BPEL</dt><dd>"<em>Business Process Execution Language for Web Services Version 
		1.0,</em>" BEA, IBM and Microsoft, August 2002:
		<a href="">http://dev2dev.bea.com/techtrack/BPEL4WS.jsp</a>, <a href="http://www-106.ibm.com/developerworks/library/ws-bpel/">http://www-106.ibm.com/developerworks/library/ws-bpel/</a>, <a href="http://msdn.microsoft.com/library/en-us/dnbiz2k2/html/bpel1-0.asp">http://msdn.microsoft.com/library/en-us/dnbiz2k2/html/bpel1-0.asp</a></dd><dt class="label"><a name="ref16"></a>WS-Addressing</dt><dd>"<em>Web Services Addressing (WS-Addressing)</em>", BEA, 
		IBM and Microsoft, March 2003:
		<a href="http://msdn.microsoft.com/ws/2003/03/ws-addressing/">http://msdn.microsoft.com/ws/2003/03/ws-addressing/</a>, <a href="http://www-106.ibm.com/developerworks/webservices/library/ws-add/">http://www-106.ibm.com/developerworks/webservices/library/ws-add/</a>, <a href="http://dev2dev.bea.com/technologies/webservices/ws-addressing.jsp">http://dev2dev.bea.com/technologies/webservices/ws-addressing.jsp</a></dd></dl></div><div class="div1">
<h2><a name="appendices"></a>20. Appendices</h2><div class="div2">
<h3><a name="appendixa"></a>20.1. Appendix A - Standard Faults</h3><p>The following list specifies the standard faults defined within the BPEL4WS specification. 
		All these faults are named within the BPEL4WS namespace standard prefix bpws: corresponding 
		to URI "http://schemas.xmlsoap.org/ws/2003/03/business-process/".
		</p><p>
			<table width="80%" cellpadding="4" cellspacing="0" border="1">
				<tbody><tr valign="top">
					<td align="left"><b>Fault name</b></td>
					<td align="left"><b>Reason</b></td>
				</tr>
				<tr valign="top">
					<td align="left">selectionFailure</td>
					<td align="left">Thrown when a selection operation performed either in a function 
					such as bpws:getVariableData, or in an assignment, encounters an error.</td>
				</tr>
				<tr valign="top">
					<td align="left">conflictingReceive</td>
					<td align="left">Thrown
when more than one receive activity or equivalent (currently, onMessage
branch in a pick activity) are enabled simultaneously for the same
partner link, port type, operation and correlation set(s).</td>
				</tr>
				<tr valign="top">
					<td align="left">conflictingRequest</td>
					<td align="left">Thrown when more than one synchronous inbound request on the same 
					partner link for a particular port type, operation and correlation set(s) are active.</td>
				</tr>
				<tr valign="top">
					<td align="left">mismatchedAssignmentFailure</td>
					<td align="left">Thrown when incompatible types are encountered in an assign activity.</td>
				</tr>
				<tr valign="top">
					<td align="left">joinFailure</td>
					<td align="left">Thrown when the join condition of an activity evaluates to false.</td>
				</tr>
				<tr valign="top">
					<td align="left">forcedTermination</td>
					<td align="left">Thrown as the result of a fault in an enclosing scope.</td>
				</tr>
				<tr valign="top">
					<td align="left">correlationViolation</td>
					<td align="left">Thrown when the contents of the messages that are processed in an 
					invoke, receive, or reply activity do not match specified correlation information.</td>
				</tr>
				<tr valign="top">
					<td align="left">uninitializedVariable</td>
					<td align="left">Thrown when there is an attempt to access the value of an 
					uninitialized part in a message variable.</td>
				</tr>
				<tr valign="top">
					<td align="left">repeatedCompensation</td>
					<td align="left">Thrown when an installed compensation handler is invoked more 
					than once.</td>
				</tr>
				<tr valign="top">
					<td align="left">invalidReply</td>
					<td align="left">Thrown when a reply is sent on a partner link, portType and operation 
					for which the corresponding receive with the same correlation has not been carried 
					out.</td>
				</tr>
			</tbody></table>
		</p></div><div class="div2">
<h3><a name="appendixb"></a>20.2. Appendix A - Standard Faults</h3><p>The following list specifies the defaults for all standard attributes at the process 
		and activity level. The table does not include activity-specific attributes (such as 
		<code>partnerLink</code> in an invoke activity).
		</p><p>
			<table width="80%" cellpadding="4" cellspacing="0" border="1">
				<tbody><tr valign="top">
					<td align="left"><b>Parameter</b></td>
					<td align="left"><b>Default</b></td>
				</tr>
				<tr valign="top">
					<td align="left">queryLanguage</td>
					<td align="left">
					<a href="http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/TR/1999/REC-xpath-19991116</a>
					</td>
				</tr>
				<tr valign="top">
					<td align="left">expressionLanguage</td>
					<td align="left">
					<a href="http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/TR/1999/REC-xpath-19991116</a>
					</td>
				</tr>
				<tr valign="top">
					<td align="left">suppressJoinFailure</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">variableAccessSerializable</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">abstractProcess</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">initiate</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">pattern</td>
					<td align="left">No default</td>
				</tr>
				<tr valign="top">
					<td align="left">createInstance</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">enableInstanceCompensation</td>
					<td align="left">no</td>
				</tr>
				<tr valign="top">
					<td align="left">joinCondition</td>
					<td align="left">Disjunction of the status of the incoming links</td>
				</tr>
				<tr valign="top">
					<td align="left">transitionCondition</td>
					<td align="left">true</td>
				</tr>
			</tbody></table>
		</p></div><div class="div2">
<h3><a name="appendixc"></a>20.3. Appendix C - Coordination Protocol</h3><p>It is valuable to express the fault and compensation handling relationship between scopes 
		by using the protocol framework of <a href="#ref16">[WS-Addressing]</a>. Specifically, this section shows 
		how the relationship between an enclosing scope and each of its nested scopes can be modeled 
		using the BusinessAgreement protocol defined in the WS-Transaction specification.  The 
		BusinessAgreement protocol is designed to enable distributed coordination of business 
		activities.  BPEL4WS usage of the protocol makes the assumption of localized behavior 
		in a single service, and as a result several of the features of the protocol, including the 
		acknowledgement signal <em>Forget</em>, and the <em>Error</em> and 
		<em>Replay</em> messages, are not actually needed in BPEL4WS.
		</p><div class="div3">
<h4><a name="coordinationprotocolforbpel4wsscopes"></a>20.3.1. Coordination Protocol for BPEL4WS Scopes</h4><ul><li><p>A. A nested scope may complete successfully. In this case a compensation 
				handler is installed for the nested scope. This is modeled with a 
				<em>Completed</em> signal from the nested scope to its parent scope.
				</p></li><li><p>B. A nested scope may encounter a fault internally. In this case the scope 
				always terminates unsuccessfully.
				</p><ul><li><p>i. If the fault handler rethrows a fault to its enclosing scope, this 
						is modeled as a <em>Faulted</em> signal from the nested scope to its parent scope.
						</p></li><li><p>ii. If the fault is handled and not rethrown, the scope exits 
						gracefully from the work of its parent scope. This is modeled as an 
						<em>Exited</em> signal from the nested scope to its parent scope.
						</p></li></ul></li><li><p>C. After a nested scope has completed, (a fault or compensation handler for) 
				the parent scope may ask it to compensate itself by invoking its compensation handler. 
				The compensate action is modeled with a <em>Compensate</em> signal from the parent 
				scope to the nested scope. 
				</p></li><li><p>D. Upon successful completion of the compensation, the nested scope sends 
				the <em>Compensated</em> signal to its parent scope.
				</p></li><li><p>E. The compensation handler may itself fault internally. In this case
				</p><ul><li><p>i. If the fault is not handled by a scope within the compensation 
						handler, it is rethrown to the parent scope. This is modeled as a 
						<em>Faulted</em> signal from the nested scope to its parent scope.
						</p></li><li><p>ii. If the fault is handled and not rethrown, we assume that the 
						compensation was able to complete successfully. In this case the nested 
						scope sends the <em>Compensated</em> signal to its parent scope.
						</p></li></ul></li><li><p>F. If there is a fault in the parent scope independent of the work of the 
				nested scope, the parent scope will ask the nested scope to prematurely abandon its 
				work by sending a <em>Cancel</em> signal.
				</p></li><li><p>G. The nested scope, upon receiving the cancel signal, will interrupt and 
				terminate its behavior (as though there were an internal fault), and return a 
				<em>Canceled</em> signal to the parent.
				</p></li><li><p>H. Finally, when a parent scope decides that the compensation for a completed 
				nested scope is not needed any more it sends a <em>Close</em> signal to the 
				nested scope. After discarding the compensation handler the nested scope responds 
				with a <em>Closed</em> signal.
				</p></li><li><p>I. In case there is a race between the <em>Completed</em> signal from the 
				nested scope and the <em>Cancel</em> signal from the parent scope, the 
				<em>Completed</em> signal wins, i.e., the nested scope is deemed to have 
				completed and the <em>Cancel</em> signal is ignored.
				</p></li><li><p>J. In case a <em>Cancel</em> signal is sent to a nested scope that 
				has already faulted internally, the <em>Cancel</em> signal is ignored and 
				the scope will eventually send either a <em>Faulted</em> or an <em>Exited</em> 
				signal to the parent.
				</p></li></ul><p><a name="figure02"><b>Figure 2: BusinessAgreement Protocol State Diagram
			</b></a><br></p><p><img src="bpel-spec_files/specfig2.gif" alt="Figure 2: BusinessAgreement Protocol State Diagram"></p><p>The BusinessAgreement protocol state diagram above summarizes the preceding discussion. 
			In the diagram, the parent (enclosing) scope generates <em>Cancel</em>, <em>Compensate</em>, 
			<em>Forget</em> and <em>Close</em> signals and the nested scope generates 
			<em>Completed</em>, <em>Faulted</em>, <em>Exited</em>, <em>Compensated</em>, 
			<em>Canceled</em> and <em>Closed</em> signals. It is important to emphasize that 
			the states represent the state of the relationship between the parent scope and one 
			specific nested scope. However, it is very nearly the case that the states represent 
			the state of the nested scope itself, except in case of signal races.  Note that the 
			signal races discussed in points I and J above are not reflected in the diagram since 
			the diagram only reflects real protocol states.
			</p></div></div><div class="div2">
<h3><a name="appendixd"></a>20.4. Appendix D - XSD Schemas</h3><p><a name="bpel4wsschema"><b>BPEL4WS Schema</b></a></p><div class="exampleInner"><pre>&lt;?xml version='1.0' encoding="UTF-8"?&gt;
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"    
        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
        xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" 
    targetNamespace="http://schemas.xmlsoap.org/ws/2003/03/business-process/" 
        elementFormDefault="qualified"&gt;

    &lt;import namespace="http://schemas.xmlsoap.org/wsdl/"
                      schemaLocation="http://schemas.xmlsoap.org/wsdl/"/&gt;

    &lt;complexType name="tExtensibleElements"&gt;
        &lt;annotation&gt;
            &lt;documentation&gt;
                 This type is extended by other component types 
                 to allow elements and attributes from 
                 other namespaces to be added. 
            &lt;/documentation&gt;
        &lt;/annotation&gt;
        &lt;sequence&gt;
            &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"
                 processContents="lax"/&gt;
        &lt;/sequence&gt;
        &lt;anyAttribute namespace="##other" processContents="lax"/&gt;

    &lt;/complexType&gt;

    &lt;element name="process" type="bpws:tProcess"/&gt;
    &lt;complexType name="tProcess"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="partnerLinks" type="bpws:tPartnerLinks"
                             minOccurs="0"/&gt;
                    &lt;element name="partners" type="bpws:tPartners"
                             minOccurs="0"/&gt;
                    &lt;element name="variables"
                             type="bpws:tVariables"
                             minOccurs="0"/&gt;
                    &lt;element name="correlationSets" 
                             type="bpws:tCorrelationSets" minOccurs="0"/&gt;
                    &lt;element name="faultHandlers" type="bpws:tFaultHandlers"
                             minOccurs="0"/&gt;
                    &lt;element name="compensationHandler"
                             type="bpws:tCompensationHandler" minOccurs="0"/&gt;
                    &lt;element name="eventHandlers"
                             type="bpws:tEventHandlers" minOccurs="0"/&gt;
                    &lt;group ref="bpws:activity"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="name" type="NCName"
                           use="required"/&gt;
                &lt;attribute name="targetNamespace" type="anyURI"
                           use="required"/&gt;
                &lt;attribute name="queryLanguage" type="anyURI"
                    default="http://www.w3.org/TR/1999/REC-xpath-19991116"/&gt;
                &lt;attribute name="expressionLanguage" type="anyURI"
                    default="http://www.w3.org/TR/1999/REC-xpath-19991116"/&gt;
                &lt;attribute name="suppressJoinFailure" type="bpws:tBoolean"
                           default="no"/&gt;
                &lt;attribute name="enableInstanceCompensation" 
                           type="bpws:tBoolean" default="no"/&gt;
                &lt;attribute name="abstractProcess" type="bpws:tBoolean" 
                           default="no"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;group name="activity"&gt;
        &lt;choice&gt;
            &lt;element name="empty" type="bpws:tEmpty"/&gt;
            &lt;element name="invoke" type="bpws:tInvoke"/&gt;
            &lt;element name="receive" type="bpws:tReceive"/&gt;
            &lt;element name="reply" type="bpws:tReply"/&gt;
            &lt;element name="assign" type="bpws:tAssign"/&gt;
            &lt;element name="wait" type="bpws:tWait"/&gt;
            &lt;element name="throw" type="bpws:tThrow"/&gt;
            &lt;element name="terminate" type="bpws:tTerminate"/&gt;
            &lt;element name="flow" type="bpws:tFlow"/&gt;
            &lt;element name="switch" type="bpws:tSwitch"/&gt;
            &lt;element name="while" type="bpws:tWhile"/&gt;
            &lt;element name="sequence" type="bpws:tSequence"/&gt;
            &lt;element name="pick" type="bpws:tPick"/&gt;
            &lt;element name="scope" type="bpws:tScope"/&gt;
        &lt;/choice&gt;
    &lt;/group&gt;


    &lt;complexType name="tPartnerLinks"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;                               
               &lt;sequence&gt;
                    &lt;element name="partnerLink" type="bpws:tPartnerLink"
                             minOccurs="1" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tPartnerLink"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;attribute name="name" type="NCName" use="required"/&gt;
                &lt;attribute name="partnerLinkType" type="QName"
                           use="required"/&gt;
                &lt;attribute name="myRole" type="NCName"/&gt;
                &lt;attribute name="partnerRole" type="NCName"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;


    &lt;complexType name="tPartners"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;                               
               &lt;sequence&gt;
                    &lt;element name="partner" type="bpws:tPartner"
                             minOccurs="1" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tPartner"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
               &lt;sequence&gt;
                  &lt;element name="partnerLink" minOccurs="1" 
                           maxOccurs="unbounded"&gt;
                     &lt;complexType&gt;
                         &lt;complexContent&gt;
                            &lt;extension base="bpws:tExtensibleElements"&gt;
                               &lt;attribute name="name" type="NCName" 
                                          use="required"/&gt;
                            &lt;/extension&gt;
                         &lt;/complexContent&gt;
                     &lt;/complexType&gt;
                  &lt;/element&gt;
               &lt;/sequence&gt;
               &lt;attribute name="name" type="NCName" use="required"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tFaultHandlers"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;

                &lt;sequence&gt;
                    &lt;element name="catch" type="bpws:tCatch" 
                             minOccurs="0" maxOccurs="unbounded"/&gt;
                    &lt;element name="catchAll" type="bpws:tActivityOrCompensateContainer"
                             minOccurs="0"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCatch"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivityOrCompensateContainer"&gt;
                &lt;attribute name="faultName" type="QName"/&gt;
                &lt;attribute name="faultVariable" type="NCName"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;


    &lt;complexType name="tActivityContainer"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;group ref="bpws:activity"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;
    &lt;complexType name="tActivityOrCompensateContainer"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;choice&gt;
                    &lt;group ref="bpws:activity"/&gt;
                    &lt;element name="compensate" type="bpws:tCompensate"/&gt;
                &lt;/choice&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tEventHandlers"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
               &lt;sequence&gt;
                   &lt;element name="onMessage" type="bpws:tOnMessage"
                            minOccurs="0" maxOccurs="unbounded"/&gt;
                   &lt;element name="onAlarm" type="bpws:tOnAlarm"
                            minOccurs="0" maxOccurs="unbounded"/&gt;
               &lt;/sequence&gt;
            &lt;/extension&gt;
       &lt;/complexContent&gt;
    &lt;/complexType&gt;


    &lt;complexType name="tOnMessage"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlations" type="bpws:tCorrelations"
                             minOccurs="0"/&gt;
                    &lt;group ref="bpws:activity"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="partnerLink" type="NCName" use="required"/&gt;
                &lt;attribute name="portType" type="QName" use="required"/&gt;
                &lt;attribute name="operation" type="NCName" use="required"/&gt;
                &lt;attribute name="variable" type="NCName"
                           use="optional"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tOnAlarm"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivityContainer"&gt;
                &lt;attribute name="for" type="bpws:tDuration-expr"/&gt;
                &lt;attribute name="until" type="bpws:tDeadline-expr"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCompensationHandler"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivityOrCompensateContainer"/&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tVariables"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;                            
                &lt;sequence&gt;
                    &lt;element name="variable"
                             type="bpws:tVariable"
                             maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tVariable"&gt;
    			
       	&lt;!-- variable does not allow extensibility elements     
because otherwise its content model would be non-deterministic --&gt;
                &lt;attribute name="name" type="NCName" use="required"/&gt;
                &lt;attribute name="messageType" type="QName" use = "optional"/&gt;
                &lt;attribute name="type" type="QName" use = "optional"/&gt;
                &lt;attribute name="element" type="QName" use = "optional"/&gt;
                &lt;anyAttribute namespace="##other" processContents="lax"/&gt;
      
    &lt;/complexType&gt;

    &lt;complexType name="tCorrelationSets"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlationSet"
                             type="bpws:tCorrelationSet" 
                             maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tCorrelationSet"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;attribute name="properties" use="required"&gt;
                    &lt;simpleType&gt;
                        &lt;list itemType="QName"/&gt;
                    &lt;/simpleType&gt;
                &lt;/attribute&gt;
                &lt;attribute name="name" type="NCName" use="required"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tActivity"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="target" type="bpws:tTarget" 
                             minOccurs="0" maxOccurs="unbounded"/&gt;
                    &lt;element name="source" type="bpws:tSource" 
                             minOccurs="0" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="name" type="NCName"/&gt;
                &lt;attribute name="joinCondition" 
                           type="bpws:tBoolean-expr"/&gt;
                &lt;attribute name="suppressJoinFailure" 
                           type="bpws:tBoolean" default="no"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tSource"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;                   
                &lt;attribute name="linkName" type="NCName" use="required"/&gt;
                &lt;attribute name="transitionCondition" 
                           type="bpws:tBoolean-expr"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tTarget"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;                 
                &lt;attribute name="linkName" type="NCName" use="required"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;

    &lt;/complexType&gt;

    &lt;complexType name="tEmpty"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"/&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCorrelations"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
               &lt;sequence&gt;
		      &lt;element name="correlation" type="bpws:tCorrelation"
                           minOccurs="1" maxOccurs="unbounded" /&gt;
		   &lt;/sequence&gt;
		&lt;/extension&gt;
	&lt;/complexContent&gt;
   &lt;/complexType&gt;

   &lt;complexType name="tCorrelation"&gt;
	&lt;complexContent&gt;
		&lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;attribute name="set" type="NCName" use="required"/&gt;
                &lt;attribute name="initiate" type="bpws:tBoolean"
                           default="no"/&gt;
		   
            &lt;/extension&gt;
     &lt;/complexContent&gt;    
   &lt;/complexType&gt;

    &lt;complexType name="tCorrelationsWithPattern"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlation"
                             type="bpws:tCorrelationWithPattern"
                             minOccurs="1"
                             maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCorrelationWithPattern"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tCorrelation"&gt;
                &lt;attribute name="pattern"&gt;
			  &lt;simpleType&gt;
				&lt;restriction base="string"&gt;
					&lt;enumeration value="in" /&gt;
					&lt;enumeration value="out" /&gt;
					&lt;enumeration value="out-in" /&gt;
				&lt;/restriction&gt;
			  &lt;/simpleType&gt;
		    &lt;/attribute&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;
    
  

    &lt;complexType name="tInvoke"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlations" 
                             type="bpws:tCorrelationsWithPattern"
                             minOccurs="0" maxOccurs="1"/&gt;
                    &lt;element name="catch" type="bpws:tCatch" 
                             minOccurs="0" maxOccurs="unbounded"/&gt;
                    &lt;element name="catchAll" 
                             type="bpws:tActivityOrCompensateContainer"
                             minOccurs="0"/&gt;
                    &lt;element name="compensationHandler" 
                             type="bpws:tCompensationHandler" minOccurs="0"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="partnerLink" type="NCName" use="required"/&gt;
                &lt;attribute name="portType" type="QName" use="required"/&gt;
                &lt;attribute name="operation" type="NCName" use="required"/&gt;
                &lt;attribute name="inputVariable" 
                           type="NCName" use="optional"/&gt;
                &lt;attribute name="outputVariable" type="NCName"
                           use="optional"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tReceive"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlations" 
                              type="bpws:tCorrelations" minOccurs="0"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="partnerLink" type="NCName" use="required"/&gt;
                &lt;attribute name="portType" type="QName" use="required"/&gt;
                &lt;attribute name="operation" type="NCName" use="required"/&gt;
                &lt;attribute name="variable" type="NCName" use="optional"/&gt;
                &lt;attribute name="createInstance" type="bpws:tBoolean" 
                           default="no"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tReply"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="correlations" 
                             type="bpws:tCorrelations" minOccurs="0"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="partnerLink" type="NCName" use="required"/&gt;
                &lt;attribute name="portType" type="QName" use="required"/&gt;
                &lt;attribute name="operation" type="NCName" use="required"/&gt;
                &lt;attribute name="variable" type="NCName"
                           use="optional"/&gt;
                &lt;attribute name="faultName" type="QName"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tAssign"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="copy" type="bpws:tCopy" 
                             minOccurs="1" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCopy"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element ref="bpws:from"/&gt;
                    &lt;element ref="bpws:to"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;element name="from" type="bpws:tFrom"/&gt;
    &lt;complexType name="tFrom"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;attribute name="variable" type="NCName"/&gt;
                &lt;attribute name="part" type="NCName"/&gt;
                &lt;attribute name="query" type="string"/&gt;
                &lt;attribute name="property" type="QName"/&gt;
                &lt;attribute name="partnerLink" type="NCName"/&gt;
                &lt;attribute name="endpointReference" type="bpws:tRoles"/&gt;
                &lt;attribute name="expression" type="string"/&gt;
                &lt;attribute name="opaque" type="bpws:tBoolean"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;element name="to"&gt;
        &lt;complexType&gt;
            &lt;complexContent&gt;
                &lt;restriction base="bpws:tFrom"&gt;
                    &lt;attribute name="expression" type="string"
                               use="prohibited"/&gt;
                    &lt;attribute name="opaque" type="bpws:tBoolean"
                               use="prohibited"/&gt;
                    &lt;attribute name="endpointReference" type="bpws:tRoles"
                               use="prohibited"/&gt;                 
                &lt;/restriction&gt;
            &lt;/complexContent&gt;
        &lt;/complexType&gt;
    &lt;/element&gt;
    
    
    &lt;complexType name="tWait"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;attribute name="for" 
                           type="bpws:tDuration-expr"/&gt;
                &lt;attribute name="until" 
                           type="bpws:tDeadline-expr"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tThrow"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;attribute name="faultName" type="QName" use="required"/&gt;
                &lt;attribute name="faultVariable" type="NCName"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tCompensate"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;attribute name="scope" type="NCName"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tTerminate"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"/&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tFlow"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="links" type="bpws:tLinks" minOccurs="0"/&gt;
                    &lt;group ref="bpws:activity" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tLinks"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;sequence&gt;
                    &lt;element name="link" 
                             type="bpws:tLink"
                             maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tLink"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tExtensibleElements"&gt;
                &lt;attribute name="name" type="NCName" use="required"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tSwitch"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="case" maxOccurs="unbounded"&gt;
                        &lt;complexType&gt;
                            &lt;complexContent&gt;
                                &lt;extension base="bpws:tActivityContainer"&gt;
                                    &lt;attribute name="condition"
                                               type="bpws:tBoolean-expr"
                                               use="required"/&gt;
                                &lt;/extension&gt;
                            &lt;/complexContent&gt;
                        &lt;/complexType&gt;
                    &lt;/element&gt;
                    &lt;element name="otherwise" 
                             type="bpws:tActivityContainer"
                             minOccurs="0"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tWhile"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;group ref="bpws:activity"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="condition" 
                           type="bpws:tBoolean-expr" 
                           use="required"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tSequence"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;group ref="bpws:activity" maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tPick"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="onMessage" 
                             type="bpws:tOnMessage" 
                             maxOccurs="unbounded"/&gt;
                    &lt;element name="onAlarm" 
                             type="bpws:tOnAlarm" minOccurs="0" 
                             maxOccurs="unbounded"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="createInstance" 
                           type="bpws:tBoolean" default="no"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;complexType name="tScope"&gt;
        &lt;complexContent&gt;
            &lt;extension base="bpws:tActivity"&gt;
                &lt;sequence&gt;
                    &lt;element name="variables"
                             type="bpws:tVariables"
                             minOccurs="0"/&gt;
                    &lt;element name="correlationSets" 
                             type="bpws:tCorrelationSets" 
                             minOccurs="0"/&gt;
                    &lt;element name="faultHandlers" 
                             type="bpws:tFaultHandlers" 
                             minOccurs="0"/&gt;
                    &lt;element name="compensationHandler" 
                             type="bpws:tCompensationHandler" 
                             minOccurs="0"/&gt;
                    &lt;element name="eventHandlers"
                             type="bpws:tEventHandlers"
                             minOccurs="0"/&gt;
                    &lt;group ref="bpws:activity"/&gt;
                &lt;/sequence&gt;
                &lt;attribute name="variableAccessSerializable" 
                           type="bpws:tBoolean" 
                           default="no"/&gt;
            &lt;/extension&gt;
        &lt;/complexContent&gt;
    &lt;/complexType&gt;

    &lt;simpleType name="tBoolean-expr"&gt;
        &lt;restriction base="string"/&gt;
    &lt;/simpleType&gt;

    &lt;simpleType name="tDuration-expr"&gt;
        &lt;restriction base="string"/&gt;
    &lt;/simpleType&gt;

    &lt;simpleType name="tDeadline-expr"&gt;
        &lt;restriction base="string"/&gt;
    &lt;/simpleType&gt;

    &lt;simpleType name="tBoolean"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="yes"/&gt;
            &lt;enumeration value="no"/&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;

    &lt;simpleType name="tRoles"&gt;
        &lt;restriction base="string"&gt;
            &lt;enumeration value="myRole"/&gt;
            &lt;enumeration value="partnerRole"/&gt;
        &lt;/restriction&gt;
    &lt;/simpleType&gt;
&lt;/schema&gt;
		</pre></div><p><a name="partnerlinktypeschema"><b>Partner Link Type Schema</b></a></p><div class="exampleInner"><pre>&lt;?xml version='1.0' encoding="UTF-8"?&gt;
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema" 
	xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/" 
	targetNamespace="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
	elementFormDefault="qualified"&gt;
 	
   &lt;element name="partnerLinkType" type="plnk:tPartnerLinkType"/&gt;
      
   &lt;complexType name="tPartnerLinkType"&gt;
      &lt;sequence&gt;
         &lt;element name="role" type="plnk:tRole" minOccurs="1" maxOccurs="2"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="NCName" use="required"/&gt;
   &lt;/complexType&gt;
   
   &lt;complexType name="tRole"&gt;
      &lt;sequence&gt;
         &lt;element name="portType" minOccurs="1" maxOccurs="1"&gt;
            &lt;complexType&gt;
               &lt;attribute name="name" type="QName" use="required"/&gt;
            &lt;/complexType&gt;
         &lt;/element&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="NCName" use="required"/&gt;
   &lt;/complexType&gt;
&lt;/schema&gt;
		</pre></div><p><a name="messageproperties_schema"><b>Message Properties Schema</b></a></p><div class="exampleInner"><pre>&lt;?xml version='1.0' encoding="UTF-8"?&gt;
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema" 
    targetNamespace="http://schemas.xmlsoap.org/ws/2003/03/business-process/"           
        xmlns:wsbp="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
        elementFormDefault="qualified"&gt;
 
    &lt;element name="property"&gt;
       &lt;complexType&gt;
          &lt;attribute name="name" type="NCName" use="required"/&gt;
          &lt;attribute name="type" type="QName" use="required"/&gt;
       &lt;/complexType&gt;
    &lt;/element&gt;

    &lt;element name="propertyAlias"&gt;
       &lt;complexType&gt;
          &lt;attribute name="propertyName" type="QName" use="required"/&gt;
          &lt;attribute name="messageType" type="QName" use="required"/&gt;
          &lt;attribute name="part" type="NCName"/&gt;
          &lt;attribute name="query" type="string"/&gt;
       &lt;/complexType&gt;
     &lt;/element&gt;
&lt;/schema&gt;
		</pre></div></div></div></div></td></tr></tbody></table><table width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody><tr>
<td><img src="bpel-spec_files/c.gif" width="1" height="1" alt=""></td>
</tr>
<tr valign="top">
<td height="21" class="bbg">  <a href="http://www.ibm.com/ibm/" class="mainlink">About IBM</a><span class="divider">  |  </span><a href="http://www.ibm.com/privacy/" class="mainlink">Privacy</a><span class="divider">  |  </span><a href="http://www.ibm.com/legal/" class="mainlink">Terms of use</a><span class="divider">  |  </span><a href="http://www.ibm.com/contact/" class="mainlink">Contact</a></td>
</tr>
</tbody></table>

<!-- Survey trigger start -->
<script language="JavaScript1.2" type="text/javascript">
//<![CDATA[<!--
var language="en";
var country="us";
var site="cvm";
var module="devworks";
var version="1";
var rate="0.51"; 
//-->]]>
</script>
<script language="JavaScript1.2" type="text/javascript" src="bpel-spec_files/popup.js">
</script>
<!-- Survey trigger end -->

<script type="text/javascript" language="JavaScript1.2" src="bpel-spec_files/stats.js"></script>
<noscript><img src="//stats.www.ibm.com/rc/images/uc.GIF?R=noscript" width="1" height="1" alt="" border="0" /></noscript></body></html>